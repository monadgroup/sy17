/* OpenGL extension header, automatically generated by KeyJ's glext.py */
#ifndef __GLEXT_H__
#define __GLEXT_H__

#include <stdint.h>
#include <GL/gl.h>
//#include <GL/glext.h>

/*#ifndef GLAPIENTRY
#ifdef APIENTRY
#define GLAPIENTRY APIENTRY
#else
#ifdef APIENTRYP
      #define GLAPIENTRY APIENTRYP
    #else
      #error I do not know how to define GLAPIENTRY
    #endif
#endif
#endif*/
#define GLAPIENTRY WINAPI

typedef char GLchar;
typedef uint64_t GLuint64;
typedef int64_t GLint64;
typedef uint64_t GLuint64EXT;
typedef int64_t GLint64EXT;
typedef struct __GLsync *GLsync;

#ifdef WIN32
#define glextGetProcAddress wglGetProcAddress
#ifndef GLEXT_WANT_WGL
#define GLEXT_WANT_WGL 1
#endif
#ifndef GLEXT_WANT_GLX
#define GLEXT_WANT_GLX 0
#endif
#else
#define glextGetProcAddress glXGetProcAddressARB
#ifndef GLEXT_WANT_WGL
#define GLEXT_WANT_WGL 0
#endif
#ifndef GLEXT_WANT_GLX
#define GLEXT_WANT_GLX 1
#endif
#endif

#ifndef GLEXT_DECLARE_FUNCTIONS
#define GLEXT_DECLARE_FUNCTIONS 1
#endif

#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
/* http://www.opengl.org/documentation/specs/version1.2/opengl1.2.1.pdf */
#define GL_UNSIGNED_BYTE_3_3_2                   0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4                0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1                0x8034
#define GL_UNSIGNED_INT_8_8_8_8                  0x8035
#define GL_UNSIGNED_INT_10_10_10_2               0x8036
#define GL_RESCALE_NORMAL                        0x803A
#define GL_UNSIGNED_BYTE_2_3_3_REV               0x8362
#define GL_UNSIGNED_SHORT_5_6_5                  0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV              0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV            0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV            0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV              0x8367
#define GL_BGR                                   0x80E0
#define GL_BGRA                                  0x80E1
#define GL_MAX_ELEMENTS_VERTICES                 0x80E8
#define GL_MAX_ELEMENTS_INDICES                  0x80E9
#define GL_CLAMP_TO_EDGE                         0x812F
#define GL_TEXTURE_MIN_LOD                       0x813A
#define GL_TEXTURE_MAX_LOD                       0x813B
#define GL_TEXTURE_BASE_LEVEL                    0x813C
#define GL_TEXTURE_MAX_LEVEL                     0x813D
#define GL_LIGHT_MODEL_COLOR_CONTROL             0x81F8
#define GL_SINGLE_COLOR                          0x81F9
#define GL_SEPARATE_SPECULAR_COLOR               0x81FA
#define GL_SMOOTH_POINT_SIZE_RANGE               0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY         0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE               0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY         0x0B23
#define GL_ALIASED_POINT_SIZE_RANGE              0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE              0x846E
#define GL_PACK_SKIP_IMAGES                      0x806B
#define GL_PACK_IMAGE_HEIGHT                     0x806C
#define GL_UNPACK_SKIP_IMAGES                    0x806D
#define GL_UNPACK_IMAGE_HEIGHT                   0x806E
#define GL_TEXTURE_3D                            0x806F
#define GL_PROXY_TEXTURE_3D                      0x8070
#define GL_TEXTURE_DEPTH                         0x8071
#define GL_TEXTURE_WRAP_R                        0x8072
#define GL_MAX_3D_TEXTURE_SIZE                   0x8073
#define GL_TEXTURE_BINDING_3D                    0x806A
#define GL_MAX_ELEMENTS_VERTICES                 0x80E8
#define GL_MAX_ELEMENTS_INDICES                  0x80E9
typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
extern PFNGLTEXIMAGE3DPROC glTexImage3D;
extern PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
extern PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_1_2*/

#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
/* http://www.opengl.org/documentation/specs/version1.3/glspec13.pdf */
#define GL_TEXTURE0                              0x84C0
#define GL_TEXTURE1                              0x84C1
#define GL_TEXTURE2                              0x84C2
#define GL_TEXTURE3                              0x84C3
#define GL_TEXTURE4                              0x84C4
#define GL_TEXTURE5                              0x84C5
#define GL_TEXTURE6                              0x84C6
#define GL_TEXTURE7                              0x84C7
#define GL_TEXTURE8                              0x84C8
#define GL_TEXTURE9                              0x84C9
#define GL_TEXTURE10                             0x84CA
#define GL_TEXTURE11                             0x84CB
#define GL_TEXTURE12                             0x84CC
#define GL_TEXTURE13                             0x84CD
#define GL_TEXTURE14                             0x84CE
#define GL_TEXTURE15                             0x84CF
#define GL_TEXTURE16                             0x84D0
#define GL_TEXTURE17                             0x84D1
#define GL_TEXTURE18                             0x84D2
#define GL_TEXTURE19                             0x84D3
#define GL_TEXTURE20                             0x84D4
#define GL_TEXTURE21                             0x84D5
#define GL_TEXTURE22                             0x84D6
#define GL_TEXTURE23                             0x84D7
#define GL_TEXTURE24                             0x84D8
#define GL_TEXTURE25                             0x84D9
#define GL_TEXTURE26                             0x84DA
#define GL_TEXTURE27                             0x84DB
#define GL_TEXTURE28                             0x84DC
#define GL_TEXTURE29                             0x84DD
#define GL_TEXTURE30                             0x84DE
#define GL_TEXTURE31                             0x84DF
#define GL_ACTIVE_TEXTURE                        0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE                 0x84E1
#define GL_MAX_TEXTURE_UNITS                     0x84E2
#define GL_NORMAL_MAP                            0x8511
#define GL_REFLECTION_MAP                        0x8512
#define GL_TEXTURE_CUBE_MAP                      0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP              0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X           0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X           0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y           0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y           0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z           0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z           0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP                0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE             0x851C
#define GL_COMPRESSED_ALPHA                      0x84E9
#define GL_COMPRESSED_LUMINANCE                  0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA            0x84EB
#define GL_COMPRESSED_INTENSITY                  0x84EC
#define GL_COMPRESSED_RGB                        0x84ED
#define GL_COMPRESSED_RGBA                       0x84EE
#define GL_TEXTURE_COMPRESSION_HINT              0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE         0x86A0
#define GL_TEXTURE_COMPRESSED                    0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS        0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS            0x86A3
#define GL_MULTISAMPLE                           0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE              0x809E
#define GL_SAMPLE_ALPHA_TO_ONE                   0x809F
#define GL_SAMPLE_COVERAGE                       0x80A0
#define GL_SAMPLE_BUFFERS                        0x80A8
#define GL_SAMPLES                               0x80A9
#define GL_SAMPLE_COVERAGE_VALUE                 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT                0x80AB
#define GL_MULTISAMPLE_BIT                       0x20000000
#define GL_TRANSPOSE_MODELVIEW_MATRIX            0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX           0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX              0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX                0x84E6
#define GL_COMBINE                               0x8570
#define GL_COMBINE_RGB                           0x8571
#define GL_COMBINE_ALPHA                         0x8572
#define GL_SOURCE0_RGB                           0x8580
#define GL_SOURCE1_RGB                           0x8581
#define GL_SOURCE2_RGB                           0x8582
#define GL_SOURCE0_ALPHA                         0x8588
#define GL_SOURCE1_ALPHA                         0x8589
#define GL_SOURCE2_ALPHA                         0x858A
#define GL_OPERAND0_RGB                          0x8590
#define GL_OPERAND1_RGB                          0x8591
#define GL_OPERAND2_RGB                          0x8592
#define GL_OPERAND0_ALPHA                        0x8598
#define GL_OPERAND1_ALPHA                        0x8599
#define GL_OPERAND2_ALPHA                        0x859A
#define GL_RGB_SCALE                             0x8573
#define GL_ADD_SIGNED                            0x8574
#define GL_INTERPOLATE                           0x8575
#define GL_SUBTRACT                              0x84E7
#define GL_CONSTANT                              0x8576
#define GL_PRIMARY_COLOR                         0x8577
#define GL_PREVIOUS                              0x8578
#define GL_DOT3_RGB                              0x86AE
#define GL_DOT3_RGBA                             0x86AF
#define GL_CLAMP_TO_BORDER                       0x812D
typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture);
typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, void *img);
typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLACTIVETEXTUREPROC glActiveTexture;
extern PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
extern PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
extern PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
extern PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
extern PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
extern PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
extern PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
extern PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
extern PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
extern PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
extern PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
extern PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
extern PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
extern PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
extern PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
extern PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
extern PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
extern PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
extern PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
extern PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
extern PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
extern PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
extern PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
extern PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
extern PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
extern PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
extern PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
extern PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
extern PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
extern PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
extern PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
extern PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
extern PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
extern PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
extern PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
extern PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
extern PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_1_3*/

#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
/* http://www.opengl.org/documentation/specs/version1.4/glspec14.pdf */
#define GL_GENERATE_MIPMAP                       0x8191
#define GL_GENERATE_MIPMAP_HINT                  0x8192
#define GL_DEPTH_COMPONENT16                     0x81A5
#define GL_DEPTH_COMPONENT24                     0x81A6
#define GL_DEPTH_COMPONENT32                     0x81A7
#define GL_TEXTURE_DEPTH_SIZE                    0x884A
#define GL_DEPTH_TEXTURE_MODE                    0x884B
#define GL_TEXTURE_COMPARE_MODE                  0x884C
#define GL_TEXTURE_COMPARE_FUNC                  0x884D
#define GL_COMPARE_R_TO_TEXTURE                  0x884E
#define GL_FOG_COORDINATE_SOURCE                 0x8450
#define GL_FOG_COORDINATE                        0x8451
#define GL_FRAGMENT_DEPTH                        0x8452
#define GL_CURRENT_FOG_COORDINATE                0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE             0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE           0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER          0x8456
#define GL_FOG_COORDINATE_ARRAY                  0x8457
#define GL_POINT_SIZE_MIN                        0x8126
#define GL_POINT_SIZE_MAX                        0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE             0x8128
#define GL_POINT_DISTANCE_ATTENUATION            0x8129
#define GL_COLOR_SUM                             0x8458
#define GL_CURRENT_SECONDARY_COLOR               0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE            0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE            0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE          0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER         0x845D
#define GL_SECONDARY_COLOR_ARRAY                 0x845E
#define GL_BLEND_DST_RGB                         0x80C8
#define GL_BLEND_SRC_RGB                         0x80C9
#define GL_BLEND_DST_ALPHA                       0x80CA
#define GL_BLEND_SRC_ALPHA                       0x80CB
#define GL_INCR_WRAP                             0x8507
#define GL_DECR_WRAP                             0x8508
#define GL_TEXTURE_FILTER_CONTROL                0x8500
#define GL_TEXTURE_LOD_BIAS                      0x8501
#define GL_MAX_TEXTURE_LOD_BIAS                  0x84FD
#define GL_MIRRORED_REPEAT                       0x8370
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode);
typedef void (GLAPIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void (GLAPIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *p);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONPROC glBlendEquation;
extern PFNGLBLENDCOLORPROC glBlendColor;
extern PFNGLFOGCOORDFPROC glFogCoordf;
extern PFNGLFOGCOORDFVPROC glFogCoordfv;
extern PFNGLFOGCOORDDPROC glFogCoordd;
extern PFNGLFOGCOORDDVPROC glFogCoorddv;
extern PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
extern PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
extern PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
extern PFNGLPOINTPARAMETERIPROC glPointParameteri;
extern PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
extern PFNGLPOINTPARAMETERFPROC glPointParameterf;
extern PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
extern PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
extern PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
extern PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
extern PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
extern PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
extern PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
extern PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
extern PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
extern PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
extern PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
extern PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
extern PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
extern PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
extern PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
extern PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
extern PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
extern PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
extern PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
extern PFNGLWINDOWPOS2DPROC glWindowPos2d;
extern PFNGLWINDOWPOS2FPROC glWindowPos2f;
extern PFNGLWINDOWPOS2IPROC glWindowPos2i;
extern PFNGLWINDOWPOS2SPROC glWindowPos2s;
extern PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
extern PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
extern PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
extern PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
extern PFNGLWINDOWPOS3DPROC glWindowPos3d;
extern PFNGLWINDOWPOS3FPROC glWindowPos3f;
extern PFNGLWINDOWPOS3IPROC glWindowPos3i;
extern PFNGLWINDOWPOS3SPROC glWindowPos3s;
extern PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
extern PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
extern PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
extern PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_1_4*/

#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
/* http://www.opengl.org/documentation/specs/version1.5/glspec15.pdf */
#define GL_BUFFER_SIZE                           0x8764
#define GL_BUFFER_USAGE                          0x8765
#define GL_QUERY_COUNTER_BITS                    0x8864
#define GL_CURRENT_QUERY                         0x8865
#define GL_QUERY_RESULT                          0x8866
#define GL_QUERY_RESULT_AVAILABLE                0x8867
#define GL_ARRAY_BUFFER                          0x8892
#define GL_ELEMENT_ARRAY_BUFFER                  0x8893
#define GL_ARRAY_BUFFER_BINDING                  0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING          0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING           0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING           0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING            0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING            0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING    0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING        0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING  0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING   0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING           0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING    0x889F
#define GL_READ_ONLY                             0x88B8
#define GL_WRITE_ONLY                            0x88B9
#define GL_READ_WRITE                            0x88BA
#define GL_BUFFER_ACCESS                         0x88BB
#define GL_BUFFER_MAPPED                         0x88BC
#define GL_BUFFER_MAP_POINTER                    0x88BD
#define GL_STREAM_DRAW                           0x88E0
#define GL_STREAM_READ                           0x88E1
#define GL_STREAM_COPY                           0x88E2
#define GL_STATIC_DRAW                           0x88E4
#define GL_STATIC_READ                           0x88E5
#define GL_STATIC_COPY                           0x88E6
#define GL_DYNAMIC_DRAW                          0x88E8
#define GL_DYNAMIC_READ                          0x88E9
#define GL_DYNAMIC_COPY                          0x88EA
#define GL_SAMPLES_PASSED                        0x8914
#define GL_FOG_COORD_SRC                         GL_FOG_COORDINATE_SOURCE
#define GL_FOG_COORD                             GL_FOG_COORDINATE
#define GL_CURRENT_FOG_COORD                     GL_CURRENT_FOG_COORDINATE
#define GL_FOG_COORD_ARRAY_TYPE                  GL_FOG_COORDINATE_ARRAY_TYPE
#define GL_FOG_COORD_ARRAY_STRIDE                GL_FOG_COORDINATE_ARRAY_STRIDE
#define GL_FOG_COORD_ARRAY_POINTER               GL_FOG_COORDINATE_ARRAY_POINTER
#define GL_FOG_COORD_ARRAY                       GL_FOG_COORDINATE_ARRAY
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING        GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#define GL_SRC0_RGB                              GL_SOURCE0_RGB
#define GL_SRC1_RGB                              GL_SOURCE1_RGB
#define GL_SRC2_RGB                              GL_SOURCE2_RGB
#define GL_SRC0_ALPHA                            GL_SOURCE0_ALPHA
#define GL_SRC1_ALPHA                            GL_SOURCE1_ALPHA
#define GL_SRC2_ALPHA                            GL_SOURCE2_ALPHA
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
typedef void (GLAPIENTRY * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids);
typedef GLboolean (GLAPIENTRY * PFNGLISQUERYPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLENDQUERYPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers);
typedef void (GLAPIENTRY * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers);
typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void* data, GLenum usage);
typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void* data);
typedef void* (GLAPIENTRY * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void** params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGENQUERIESPROC glGenQueries;
extern PFNGLDELETEQUERIESPROC glDeleteQueries;
extern PFNGLISQUERYPROC glIsQuery;
extern PFNGLBEGINQUERYPROC glBeginQuery;
extern PFNGLENDQUERYPROC glEndQuery;
extern PFNGLGETQUERYIVPROC glGetQueryiv;
extern PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
extern PFNGLBINDBUFFERPROC glBindBuffer;
extern PFNGLDELETEBUFFERSPROC glDeleteBuffers;
extern PFNGLGENBUFFERSPROC glGenBuffers;
extern PFNGLISBUFFERPROC glIsBuffer;
extern PFNGLBUFFERDATAPROC glBufferData;
extern PFNGLBUFFERSUBDATAPROC glBufferSubData;
extern PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
extern PFNGLMAPBUFFERPROC glMapBuffer;
extern PFNGLUNMAPBUFFERPROC glUnmapBuffer;
extern PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
extern PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_1_5*/

#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
/* http://www.opengl.org/documentation/specs/version2.0/glspec20.pdf */
#define GL_BLEND_EQUATION_RGB                    GL_BLEND_EQUATION
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED           0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE              0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE            0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE              0x8625
#define GL_CURRENT_VERTEX_ATTRIB                 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE             0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE               0x8643
#define GL_VERTEX_ATTRIB_ARRAY_POINTER           0x8645
#define GL_STENCIL_BACK_FUNC                     0x8800
#define GL_STENCIL_BACK_FAIL                     0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL          0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS          0x8803
#define GL_MAX_DRAW_BUFFERS                      0x8824
#define GL_DRAW_BUFFER0                          0x8825
#define GL_DRAW_BUFFER1                          0x8826
#define GL_DRAW_BUFFER2                          0x8827
#define GL_DRAW_BUFFER3                          0x8828
#define GL_DRAW_BUFFER4                          0x8829
#define GL_DRAW_BUFFER5                          0x882A
#define GL_DRAW_BUFFER6                          0x882B
#define GL_DRAW_BUFFER7                          0x882C
#define GL_DRAW_BUFFER8                          0x882D
#define GL_DRAW_BUFFER9                          0x882E
#define GL_DRAW_BUFFER10                         0x882F
#define GL_DRAW_BUFFER11                         0x8830
#define GL_DRAW_BUFFER12                         0x8831
#define GL_DRAW_BUFFER13                         0x8832
#define GL_DRAW_BUFFER14                         0x8833
#define GL_DRAW_BUFFER15                         0x8834
#define GL_BLEND_EQUATION_ALPHA                  0x883D
#define GL_POINT_SPRITE                          0x8861
#define GL_COORD_REPLACE                         0x8862
#define GL_MAX_VERTEX_ATTRIBS                    0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED        0x886A
#define GL_MAX_TEXTURE_COORDS                    0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS               0x8872
#define GL_FRAGMENT_SHADER                       0x8B30
#define GL_VERTEX_SHADER                         0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS       0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS         0x8B4A
#define GL_MAX_VARYING_FLOATS                    0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS        0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS      0x8B4D
#define GL_SHADER_TYPE                           0x8B4F
#define GL_FLOAT_VEC2                            0x8B50
#define GL_FLOAT_VEC3                            0x8B51
#define GL_FLOAT_VEC4                            0x8B52
#define GL_INT_VEC2                              0x8B53
#define GL_INT_VEC3                              0x8B54
#define GL_INT_VEC4                              0x8B55
#define GL_BOOL                                  0x8B56
#define GL_BOOL_VEC2                             0x8B57
#define GL_BOOL_VEC3                             0x8B58
#define GL_BOOL_VEC4                             0x8B59
#define GL_FLOAT_MAT2                            0x8B5A
#define GL_FLOAT_MAT3                            0x8B5B
#define GL_FLOAT_MAT4                            0x8B5C
#define GL_SAMPLER_1D                            0x8B5D
#define GL_SAMPLER_2D                            0x8B5E
#define GL_SAMPLER_3D                            0x8B5F
#define GL_SAMPLER_CUBE                          0x8B60
#define GL_SAMPLER_1D_SHADOW                     0x8B61
#define GL_SAMPLER_2D_SHADOW                     0x8B62
#define GL_DELETE_STATUS                         0x8B80
#define GL_COMPILE_STATUS                        0x8B81
#define GL_LINK_STATUS                           0x8B82
#define GL_VALIDATE_STATUS                       0x8B83
#define GL_INFO_LOG_LENGTH                       0x8B84
#define GL_ATTACHED_SHADERS                      0x8B85
#define GL_ACTIVE_UNIFORMS                       0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH             0x8B87
#define GL_SHADER_SOURCE_LENGTH                  0x8B88
#define GL_ACTIVE_ATTRIBUTES                     0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH           0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT       0x8B8B
#define GL_SHADING_LANGUAGE_VERSION              0x8B8C
#define GL_CURRENT_PROGRAM                       0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN             0x8CA0
#define GL_LOWER_LEFT                            0x8CA1
#define GL_UPPER_LEFT                            0x8CA2
#define GL_STENCIL_BACK_REF                      0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK               0x8CA4
#define GL_STENCIL_BACK_WRITEMASK                0x8CA5
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs);
typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (GLAPIENTRY * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
typedef void (GLAPIENTRY * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLCOMPILESHADERPROC) (GLuint shader);
typedef GLuint (GLAPIENTRY * PFNGLCREATEPROGRAMPROC) (void);
typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROC) (GLenum type);
typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPROC) (GLuint program);
typedef void (GLAPIENTRY * PFNGLDELETESHADERPROC) (GLuint shader);
typedef void (GLAPIENTRY * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (GLAPIENTRY * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (GLAPIENTRY * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length);
typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void** pointer);
typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPROC) (GLuint program);
typedef GLboolean (GLAPIENTRY * PFNGLISSHADERPROC) (GLuint shader);
typedef void (GLAPIENTRY * PFNGLLINKPROGRAMPROC) (GLuint program);
typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEPROC) (GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source);
typedef void (GLAPIENTRY * PFNGLUSEPROGRAMPROC) (GLuint program);
typedef void (GLAPIENTRY * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
extern PFNGLDRAWBUFFERSPROC glDrawBuffers;
extern PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
extern PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
extern PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
extern PFNGLATTACHSHADERPROC glAttachShader;
extern PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
extern PFNGLCOMPILESHADERPROC glCompileShader;
extern PFNGLCREATEPROGRAMPROC glCreateProgram;
extern PFNGLCREATESHADERPROC glCreateShader;
extern PFNGLDELETEPROGRAMPROC glDeleteProgram;
extern PFNGLDELETESHADERPROC glDeleteShader;
extern PFNGLDETACHSHADERPROC glDetachShader;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
extern PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
extern PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
extern PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
extern PFNGLGETPROGRAMIVPROC glGetProgramiv;
extern PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
extern PFNGLGETSHADERIVPROC glGetShaderiv;
extern PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
extern PFNGLSHADERSOURCEPROC glShaderSource;
extern PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
extern PFNGLGETUNIFORMFVPROC glGetUniformfv;
extern PFNGLGETUNIFORMIVPROC glGetUniformiv;
extern PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
extern PFNGLISPROGRAMPROC glIsProgram;
extern PFNGLISSHADERPROC glIsShader;
extern PFNGLLINKPROGRAMPROC glLinkProgram;
extern PFNGLGETSHADERSOURCEPROC glGetShaderSource;
extern PFNGLUSEPROGRAMPROC glUseProgram;
extern PFNGLUNIFORM1FPROC glUniform1f;
extern PFNGLUNIFORM1FVPROC glUniform1fv;
extern PFNGLUNIFORM1IPROC glUniform1i;
extern PFNGLUNIFORM1IVPROC glUniform1iv;
extern PFNGLUNIFORM2FPROC glUniform2f;
extern PFNGLUNIFORM2FVPROC glUniform2fv;
extern PFNGLUNIFORM2IPROC glUniform2i;
extern PFNGLUNIFORM2IVPROC glUniform2iv;
extern PFNGLUNIFORM3FPROC glUniform3f;
extern PFNGLUNIFORM3FVPROC glUniform3fv;
extern PFNGLUNIFORM3IPROC glUniform3i;
extern PFNGLUNIFORM3IVPROC glUniform3iv;
extern PFNGLUNIFORM4FPROC glUniform4f;
extern PFNGLUNIFORM4FVPROC glUniform4fv;
extern PFNGLUNIFORM4IPROC glUniform4i;
extern PFNGLUNIFORM4IVPROC glUniform4iv;
extern PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
extern PFNGLVALIDATEPROGRAMPROC glValidateProgram;
extern PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
extern PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_2_0*/

#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
/* http://www.opengl.org/documentation/specs/version2.1/glspec21.pdf */
#define GL_CURRENT_RASTER_SECONDARY_COLOR        0x845F
#define GL_PIXEL_PACK_BUFFER                     0x88EB
#define GL_PIXEL_UNPACK_BUFFER                   0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING             0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING           0x88EF
#define GL_FLOAT_MAT2x3                          0x8B65
#define GL_FLOAT_MAT2x4                          0x8B66
#define GL_FLOAT_MAT3x2                          0x8B67
#define GL_FLOAT_MAT3x4                          0x8B68
#define GL_FLOAT_MAT4x2                          0x8B69
#define GL_FLOAT_MAT4x3                          0x8B6A
#define GL_SRGB                                  0x8C40
#define GL_SRGB8                                 0x8C41
#define GL_SRGB_ALPHA                            0x8C42
#define GL_SRGB8_ALPHA8                          0x8C43
#define GL_SLUMINANCE_ALPHA                      0x8C44
#define GL_SLUMINANCE8_ALPHA8                    0x8C45
#define GL_SLUMINANCE                            0x8C46
#define GL_SLUMINANCE8                           0x8C47
#define GL_COMPRESSED_SRGB                       0x8C48
#define GL_COMPRESSED_SRGB_ALPHA                 0x8C49
#define GL_COMPRESSED_SLUMINANCE                 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA           0x8C4B
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_2_1*/

#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
/* https://www.opengl.org/registry/doc/glspec30.20080923.pdf */
/* GL_ARB_framebuffer_object GL_ARB_map_buffer_range GL_ARB_uniform_buffer_object GL_ARB_vertex_array_object */
#define GL_COMPARE_REF_TO_TEXTURE                GL_COMPARE_R_TO_TEXTURE_ARB
#define GL_CLIP_DISTANCE0                        GL_CLIP_PLANE0
#define GL_CLIP_DISTANCE1                        GL_CLIP_PLANE1
#define GL_CLIP_DISTANCE2                        GL_CLIP_PLANE2
#define GL_CLIP_DISTANCE3                        GL_CLIP_PLANE3
#define GL_CLIP_DISTANCE4                        GL_CLIP_PLANE4
#define GL_CLIP_DISTANCE5                        GL_CLIP_PLANE5
#define GL_MAX_CLIP_DISTANCES                    GL_MAX_CLIP_PLANES
#define GL_MAJOR_VERSION                         0x821B
#define GL_MINOR_VERSION                         0x821C
#define GL_NUM_EXTENSIONS                        0x821D
#define GL_CONTEXT_FLAGS                         0x821E
#define GL_DEPTH_BUFFER                          0x8223
#define GL_STENCIL_BUFFER                        0x8224
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT   0x0001
#define GL_RGBA32F                               0x8814
#define GL_RGB32F                                0x8815
#define GL_RGBA16F                               0x881A
#define GL_RGB16F                                0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER           0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS              0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET              0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET              0x8905
#define GL_CLAMP_VERTEX_COLOR                    0x891A
#define GL_CLAMP_FRAGMENT_COLOR                  0x891B
#define GL_CLAMP_READ_COLOR                      0x891C
#define GL_FIXED_ONLY                            0x891D
#define GL_MAX_VARYING_COMPONENTS                GL_MAX_VARYING_FLOATS
#define GL_TEXTURE_RED_TYPE                      0x8C10
#define GL_TEXTURE_GREEN_TYPE                    0x8C11
#define GL_TEXTURE_BLUE_TYPE                     0x8C12
#define GL_TEXTURE_ALPHA_TYPE                    0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE                0x8C14
#define GL_TEXTURE_INTENSITY_TYPE                0x8C15
#define GL_TEXTURE_DEPTH_TYPE                    0x8C16
#define GL_TEXTURE_1D_ARRAY                      0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY                0x8C19
#define GL_TEXTURE_2D_ARRAY                      0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY                0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY              0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY              0x8C1D
#define GL_R11F_G11F_B10F                        0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV          0x8C3B
#define GL_RGB9_E5                               0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV              0x8C3E
#define GL_TEXTURE_SHARED_SIZE                   0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE        0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS           0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START       0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE        0x8C85
#define GL_PRIMITIVES_GENERATED                  0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD                    0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS                   0x8C8C
#define GL_SEPARATE_ATTRIBS                      0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER             0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING     0x8C8F
#define GL_RGBA32UI                              0x8D70
#define GL_RGB32UI                               0x8D71
#define GL_RGBA16UI                              0x8D76
#define GL_RGB16UI                               0x8D77
#define GL_RGBA8UI                               0x8D7C
#define GL_RGB8UI                                0x8D7D
#define GL_RGBA32I                               0x8D82
#define GL_RGB32I                                0x8D83
#define GL_RGBA16I                               0x8D88
#define GL_RGB16I                                0x8D89
#define GL_RGBA8I                                0x8D8E
#define GL_RGB8I                                 0x8D8F
#define GL_RED_INTEGER                           0x8D94
#define GL_GREEN_INTEGER                         0x8D95
#define GL_BLUE_INTEGER                          0x8D96
#define GL_ALPHA_INTEGER                         0x8D97
#define GL_RGB_INTEGER                           0x8D98
#define GL_RGBA_INTEGER                          0x8D99
#define GL_BGR_INTEGER                           0x8D9A
#define GL_BGRA_INTEGER                          0x8D9B
#define GL_SAMPLER_1D_ARRAY                      0x8DC0
#define GL_SAMPLER_2D_ARRAY                      0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW               0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW               0x8DC4
#define GL_SAMPLER_CUBE_SHADOW                   0x8DC5
#define GL_UNSIGNED_INT_VEC2                     0x8DC6
#define GL_UNSIGNED_INT_VEC3                     0x8DC7
#define GL_UNSIGNED_INT_VEC4                     0x8DC8
#define GL_INT_SAMPLER_1D                        0x8DC9
#define GL_INT_SAMPLER_2D                        0x8DCA
#define GL_INT_SAMPLER_3D                        0x8DCB
#define GL_INT_SAMPLER_CUBE                      0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY                  0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY                  0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D               0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D               0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D               0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE             0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY         0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY         0x8DD7
#define GL_QUERY_WAIT                            0x8E13
#define GL_QUERY_NO_WAIT                         0x8E14
#define GL_QUERY_BY_REGION_WAIT                  0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT               0x8E16
typedef void (GLAPIENTRY * PFNGLCOLORMASKIPROC) (GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAPIENTRY * PFNGLGETBOOLEANI_VPROC) (GLenum pname, GLuint index, GLboolean* data);
typedef void (GLAPIENTRY * PFNGLENABLEIPROC) (GLenum cap, GLuint index);
typedef void (GLAPIENTRY * PFNGLDISABLEIPROC) (GLenum cap, GLuint index);
typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDIPROC) (GLenum cap, GLuint index);
typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKPROC) (void);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAPIENTRY * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERPROC) (void);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint v0, GLint v1);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint v0, GLint v1, GLint v2);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint v0, GLuint v1);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort* v0);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint* params);
typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint colorNumber, const GLchar* name);
typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawBuffer, const GLint* value);
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawBuffer, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawBuffer, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);
typedef const GLubyte* (GLAPIENTRY * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORMASKIPROC glColorMaski;
extern PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
extern PFNGLENABLEIPROC glEnablei;
extern PFNGLDISABLEIPROC glDisablei;
extern PFNGLISENABLEDIPROC glIsEnabledi;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
extern PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
extern PFNGLCLAMPCOLORPROC glClampColor;
extern PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
extern PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
extern PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
extern PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
extern PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
extern PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
extern PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
extern PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
extern PFNGLUNIFORM1UIPROC glUniform1ui;
extern PFNGLUNIFORM2UIPROC glUniform2ui;
extern PFNGLUNIFORM3UIPROC glUniform3ui;
extern PFNGLUNIFORM4UIPROC glUniform4ui;
extern PFNGLUNIFORM1UIVPROC glUniform1uiv;
extern PFNGLUNIFORM2UIVPROC glUniform2uiv;
extern PFNGLUNIFORM3UIVPROC glUniform3uiv;
extern PFNGLUNIFORM4UIVPROC glUniform4uiv;
extern PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
extern PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
extern PFNGLCLEARBUFFERIVPROC glClearBufferiv;
extern PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
extern PFNGLCLEARBUFFERFVPROC glClearBufferfv;
extern PFNGLCLEARBUFFERFIPROC glClearBufferfi;
extern PFNGLGETSTRINGIPROC glGetStringi;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_3_0*/

#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
/* https://www.opengl.org/registry/doc/glspec31.20090528.pdf */
/* GL_ARB_copy_buffer */
#define GL_SAMPLER_2D_RECT                       0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW                0x8B64
#define GL_SAMPLER_BUFFER                        0x8DC2
#define GL_INT_SAMPLER_2D_RECT                   0x8DCD
#define GL_INT_SAMPLER_BUFFER                    0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT          0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER           0x8DD8
#define GL_TEXTURE_BUFFER                        0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE               0x8C2B
#define GL_TEXTURE_BINDING_BUFFER                0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING     0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT                 0x8C2E
#define GL_TEXTURE_RECTANGLE                     0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE             0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE               0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE            0x84F8
#define GL_RED_SNORM                             0x8F90
#define GL_RG_SNORM                              0x8F91
#define GL_RGB_SNORM                             0x8F92
#define GL_RGBA_SNORM                            0x8F93
#define GL_R8_SNORM                              0x8F94
#define GL_RG8_SNORM                             0x8F95
#define GL_RGB8_SNORM                            0x8F96
#define GL_RGBA8_SNORM                           0x8F97
#define GL_R16_SNORM                             0x8F98
#define GL_RG16_SNORM                            0x8F99
#define GL_RGB16_SNORM                           0x8F9A
#define GL_RGBA16_SNORM                          0x8F9B
#define GL_SIGNED_NORMALIZED                     0x8F9C
#define GL_PRIMITIVE_RESTART                     0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX               0x8F9E
#define GL_BUFFER_ACCESS_FLAGS                   0x911F
#define GL_BUFFER_MAP_LENGTH                     0x9120
#define GL_BUFFER_MAP_OFFSET                     0x9121
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalFormat, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint buffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
extern PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
extern PFNGLTEXBUFFERPROC glTexBuffer;
extern PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_3_1*/

#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
/* https://www.opengl.org/registry/doc/glspec32.compatibility.20091207.pdf */
/* GL_ARB_draw_elements_base_vertex GL_ARB_provoking_vertex GL_ARB_sync GL_ARB_texture_multisample */
/* GL_CONTEXT_CORE_PROFILE_BIT 0x00000001 */
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT     0x00000002
#define GL_LINES_ADJACENCY                       0x000A
#define GL_LINE_STRIP_ADJACENCY                  0x000B
#define GL_TRIANGLES_ADJACENCY                   0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY              0x000D
#define GL_PROGRAM_POINT_SIZE                    0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS      0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED        0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS  0x8DA8
#define GL_GEOMETRY_SHADER                       0x8DD9
#define GL_GEOMETRY_VERTICES_OUT                 0x8916
#define GL_GEOMETRY_INPUT_TYPE                   0x8917
#define GL_GEOMETRY_OUTPUT_TYPE                  0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS       0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES          0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS  0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS          0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS         0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS        0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS         0x9125
#define GL_CONTEXT_PROFILE_MASK                  0x9126
typedef void (GLAPIENTRY * PFNGLGETINTEGER64I_VPROC) (GLenum pname, GLuint index, GLint64 * data);
typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum value, GLint64 * data);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
extern PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
extern PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_3_2*/

#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
/* https://www.opengl.org/registry/doc/glspec33.compatibility.20100311.pdf */
#define GL_RGB10_A2UI                            0x906F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR           0x88FE
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_3_3*/

#ifndef GL_VERSION_4_0
#define GL_VERSION_4_0 1
/* https://www.opengl.org/registry/doc/glspec40.compatibility.20100311.pdf */
#define GL_SAMPLE_SHADING                        0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE              0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET     0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET     0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS 0x8F9F
#define GL_TEXTURE_CUBE_MAP_ARRAY                0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY        0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY          0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY                0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW         0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY            0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY   0x900F
typedef void (GLAPIENTRY * PFNGLMINSAMPLESHADINGPROC) (GLclampf value);
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
extern PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
extern PFNGLBLENDEQUATIONIPROC glBlendEquationi;
extern PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
extern PFNGLBLENDFUNCIPROC glBlendFunci;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_VERSION_4_0*/

#ifndef GL_VERSION_4_1
#define GL_VERSION_4_1 1
/* https://www.opengl.org/registry/doc/glspec41.compatibility.20100725.pdf */
#endif /*GL_VERSION_4_1*/

#ifndef GL_VERSION_4_2
#define GL_VERSION_4_2 1
/* https://www.opengl.org/registry/doc/glspec42.compatibility.20120427.pdf */
#define GL_COPY_READ_BUFFER_BINDING              0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING             0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE             0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED             0x8E23
#define GL_COMPRESSED_RGBA_BPTC_UNORM            0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM      0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT      0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT    0x8E8F
#endif /*GL_VERSION_4_2*/

#ifndef GL_VERSION_4_3
#define GL_VERSION_4_3 1
/* https://www.opengl.org/registry/doc/glspec43.compatibility.20130214.pdf */
#define GL_VERTEX_ATTRIB_ARRAY_LONG              0x874E
#define GL_NUM_SHADING_LANGUAGE_VERSIONS         0x82E9
#endif /*GL_VERSION_4_3*/

#ifndef GL_VERSION_4_4
#define GL_VERSION_4_4 1
/* https://www.opengl.org/registry/doc/glspec44.compatibility.pdf */
#define GL_MAX_VERTEX_ATTRIB_STRIDE              0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED  0x8221
#define GL_TEXTURE_BUFFER_BINDING                0x8C2A
#endif /*GL_VERSION_4_4*/

#ifndef GL_VERSION_4_5
#define GL_VERSION_4_5 1
/* https://www.opengl.org/registry/doc/glspec45.compatibility.pdf */
/* GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004 */
/* GLenum glGetGraphicsResetStatus (void) */
/* void glGetnTexImage (GLenum tex, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels) */
/* void glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, GLvoid *pixels) */
/* void glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) */
#endif /*GL_VERSION_4_5*/

#if GLEXT_WANT_GLX
#ifndef GLX_VERSION_1_2
#define GLX_VERSION_1_2 1
/* http://www.opengl.org/documentation/specs/glx/glx1.2.ps */
typedef Display* (GLAPIENTRY * PFNGLXGETCURRENTDISPLAYPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_VERSION_1_2*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_VERSION_1_3
#define GLX_VERSION_1_3 1
/* http://www.opengl.org/documentation/specs/glx/glx1.3.pdf */
#define GLX_WINDOW_BIT                           0x00000001
#define GLX_PIXMAP_BIT                           0x00000002
#define GLX_PBUFFER_BIT                          0x00000004
#define GLX_RGBA_BIT                             0x00000001
#define GLX_COLOR_INDEX_BIT                      0x00000002
#define GLX_PBUFFER_CLOBBER_MASK                 0x08000000
#define GLX_FRONT_LEFT_BUFFER_BIT                0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT               0x00000002
#define GLX_BACK_LEFT_BUFFER_BIT                 0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT                0x00000008
#define GLX_AUX_BUFFERS_BIT                      0x00000010
#define GLX_DEPTH_BUFFER_BIT                     0x00000020
#define GLX_STENCIL_BUFFER_BIT                   0x00000040
#define GLX_ACCUM_BUFFER_BIT                     0x00000080
#define GLX_CONFIG_CAVEAT                        0x20
#define GLX_X_VISUAL_TYPE                        0x22
#define GLX_TRANSPARENT_TYPE                     0x23
#define GLX_TRANSPARENT_INDEX_VALUE              0x24
#define GLX_TRANSPARENT_RED_VALUE                0x25
#define GLX_TRANSPARENT_GREEN_VALUE              0x26
#define GLX_TRANSPARENT_BLUE_VALUE               0x27
#define GLX_TRANSPARENT_ALPHA_VALUE              0x28
#define GLX_DONT_CARE                            0xFFFFFFFF
#define GLX_NONE                                 0x8000
#define GLX_SLOW_CONFIG                          0x8001
#define GLX_TRUE_COLOR                           0x8002
#define GLX_DIRECT_COLOR                         0x8003
#define GLX_PSEUDO_COLOR                         0x8004
#define GLX_STATIC_COLOR                         0x8005
#define GLX_GRAY_SCALE                           0x8006
#define GLX_STATIC_GRAY                          0x8007
#define GLX_TRANSPARENT_RGB                      0x8008
#define GLX_TRANSPARENT_INDEX                    0x8009
#define GLX_VISUAL_ID                            0x800B
#define GLX_SCREEN                               0x800C
#define GLX_NON_CONFORMANT_CONFIG                0x800D
#define GLX_DRAWABLE_TYPE                        0x8010
#define GLX_RENDER_TYPE                          0x8011
#define GLX_X_RENDERABLE                         0x8012
#define GLX_FBCONFIG_ID                          0x8013
#define GLX_RGBA_TYPE                            0x8014
#define GLX_COLOR_INDEX_TYPE                     0x8015
#define GLX_MAX_PBUFFER_WIDTH                    0x8016
#define GLX_MAX_PBUFFER_HEIGHT                   0x8017
#define GLX_MAX_PBUFFER_PIXELS                   0x8018
#define GLX_PRESERVED_CONTENTS                   0x801B
#define GLX_LARGEST_PBUFFER                      0x801C
#define GLX_WIDTH                                0x801D
#define GLX_HEIGHT                               0x801E
#define GLX_EVENT_MASK                           0x801F
#define GLX_DAMAGED                              0x8020
#define GLX_SAVED                                0x8021
#define GLX_WINDOW                               0x8022
#define GLX_PBUFFER                              0x8023
#define GLX_PBUFFER_HEIGHT                       0x8040
#define GLX_PBUFFER_WIDTH                        0x8041
typedef XID GLXWindow;
typedef XID GLXPbuffer;
typedef XID GLXFBConfigID;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef struct {  int event_type;   int draw_type;   unsigned long serial;   Bool send_event;   Display *display;   GLXDrawable drawable;   unsigned int buffer_mask;   unsigned int aux_buffer;   int x, y;   int width, height;   int count; } GLXPbufferClobberEvent;
typedef union __GLXEvent {  GLXPbufferClobberEvent glxpbufferclobber;   long pad[24]; } GLXEvent;
typedef GLXFBConfig* (GLAPIENTRY * PFNGLXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
typedef GLXFBConfig* (GLAPIENTRY * PFNGLXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
typedef XVisualInfo* (GLAPIENTRY * PFNGLXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
typedef int (GLAPIENTRY * PFNGLXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
typedef GLXWindow (GLAPIENTRY * PFNGLXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
typedef void (GLAPIENTRY * PFNGLXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
typedef GLXPixmap (GLAPIENTRY * PFNGLXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
typedef void (GLAPIENTRY * PFNGLXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
typedef GLXPbuffer (GLAPIENTRY * PFNGLXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
typedef void (GLAPIENTRY * PFNGLXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
typedef void (GLAPIENTRY * PFNGLXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
typedef GLXContext (GLAPIENTRY * PFNGLXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef Bool (GLAPIENTRY * PFNGLXMAKECONTEXTCURRENTPROC) (Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef GLXDrawable (GLAPIENTRY * PFNGLXGETCURRENTREADDRAWABLEPROC) (void);
typedef int (GLAPIENTRY * PFNGLXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
typedef void (GLAPIENTRY * PFNGLXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (GLAPIENTRY * PFNGLXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCHOOSEFBCONFIGPROC glXChooseFBConfig;
extern PFNGLXGETFBCONFIGSPROC glXGetFBConfigs;
extern PFNGLXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
extern PFNGLXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
extern PFNGLXCREATEWINDOWPROC glXCreateWindow;
extern PFNGLXDESTROYWINDOWPROC glXDestroyWindow;
extern PFNGLXCREATEPIXMAPPROC glXCreatePixmap;
extern PFNGLXDESTROYPIXMAPPROC glXDestroyPixmap;
extern PFNGLXCREATEPBUFFERPROC glXCreatePbuffer;
extern PFNGLXDESTROYPBUFFERPROC glXDestroyPbuffer;
extern PFNGLXQUERYDRAWABLEPROC glXQueryDrawable;
extern PFNGLXCREATENEWCONTEXTPROC glXCreateNewContext;
extern PFNGLXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
extern PFNGLXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
extern PFNGLXQUERYCONTEXTPROC glXQueryContext;
extern PFNGLXSELECTEVENTPROC glXSelectEvent;
extern PFNGLXGETSELECTEDEVENTPROC glXGetSelectedEvent;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_VERSION_1_3*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_VERSION_1_4
#define GLX_VERSION_1_4 1
/* http://www.opengl.org/documentation/specs/glx/glx1.4.pdf */
#define GLX_SAMPLE_BUFFERS                       100000
#define GLX_SAMPLES                              100001
typedef extern void ( * (GLAPIENTRY * PFNGLXGETPROCADDRESSPROC) (const GLubyte *procName)) (void);;
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETPROCADDRESSPROC glXGetProcAddress;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_VERSION_1_4*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_3DFX_multisample
#define GLX_3DFX_multisample 1
/* http://www.opengl.org/registry/specs/3DFX/3dfx_multisample.txt */
#define GLX_SAMPLE_BUFFERS_3DFX                  0x8050
#define GLX_SAMPLES_3DFX                         0x8051
#endif /*GLX_3DFX_multisample*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_AMD_gpu_association
#define GLX_AMD_gpu_association 1
/* http://www.opengl.org/registry/specs/AMD/glx_gpu_association.txt */
#define GLX_GPU_VENDOR_AMD                       0x1F00
#define GLX_GPU_RENDERER_STRING_AMD              0x1F01
#define GLX_GPU_OPENGL_VERSION_STRING_AMD        0x1F02
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD          0x21A2
#define GLX_GPU_RAM_AMD                          0x21A3
#define GLX_GPU_CLOCK_AMD                        0x21A4
#define GLX_GPU_NUM_PIPES_AMD                    0x21A5
#define GLX_GPU_NUM_SIMD_AMD                     0x21A6
#define GLX_GPU_NUM_RB_AMD                       0x21A7
#define GLX_GPU_NUM_SPI_AMD                      0x21A8
typedef void (GLAPIENTRY * PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC) (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLXContext (GLAPIENTRY * PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC) (unsigned int id, GLXContext share_list);
typedef GLXContext (GLAPIENTRY * PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) (unsigned int id, GLXContext share_context, const int* attribList);
typedef Bool (GLAPIENTRY * PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC) (GLXContext ctx);
typedef unsigned int (GLAPIENTRY * PFNGLXGETCONTEXTGPUIDAMDPROC) (GLXContext ctx);
typedef GLXContext (GLAPIENTRY * PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC) (void);
typedef unsigned int (GLAPIENTRY * PFNGLXGETGPUIDSAMDPROC) (unsigned int maxCount, unsigned int* ids);
typedef int (GLAPIENTRY * PFNGLXGETGPUINFOAMDPROC) (unsigned int id, int property, GLenum dataType, unsigned int size, void* data);
typedef Bool (GLAPIENTRY * PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) (GLXContext ctx);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glXBlitContextFramebufferAMD;
extern PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glXCreateAssociatedContextAMD;
extern PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glXCreateAssociatedContextAttribsAMD;
extern PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glXDeleteAssociatedContextAMD;
extern PFNGLXGETCONTEXTGPUIDAMDPROC glXGetContextGPUIDAMD;
extern PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glXGetCurrentAssociatedContextAMD;
extern PFNGLXGETGPUIDSAMDPROC glXGetGPUIDsAMD;
extern PFNGLXGETGPUINFOAMDPROC glXGetGPUInfoAMD;
extern PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glXMakeAssociatedContextCurrentAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_AMD_gpu_association*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_context_flush_control
#define GLX_ARB_context_flush_control 1
/* http://www.opengl.org/registry/specs/KHR/context_flush_control.txt */
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB    0x0000
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB         0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB   0x2098
#endif /*GLX_ARB_context_flush_control*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_create_context
#define GLX_ARB_create_context 1
/* http://www.opengl.org/registry/specs/ARB/glx_create_context.txt */
#define GLX_CONTEXT_DEBUG_BIT_ARB                0x0001
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB   0x0002
#define GLX_CONTEXT_MAJOR_VERSION_ARB            0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB            0x2092
#define GLX_CONTEXT_FLAGS_ARB                    0x2094
typedef GLXContext (GLAPIENTRY * PFNGLXCREATECONTEXTATTRIBSARBPROC) (Display* dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribsARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_ARB_create_context*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_create_context_profile
#define GLX_ARB_create_context_profile 1
/* http://www.opengl.org/registry/specs/ARB/glx_create_context.txt */
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB         0x00000001
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_PROFILE_MASK_ARB             0x9126
#endif /*GLX_ARB_create_context_profile*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_create_context_robustness
#define GLX_ARB_create_context_robustness 1
/* http://www.opengl.org/registry/specs/ARB/glx_create_context_robustness.txt */
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB        0x00000004
#define GLX_LOSE_CONTEXT_ON_RESET_ARB            0x8252
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_NO_RESET_NOTIFICATION_ARB            0x8261
#endif /*GLX_ARB_create_context_robustness*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_fbconfig_float
#define GLX_ARB_fbconfig_float 1
/* http://www.opengl.org/registry/specs/ARB/color_buffer_float.txt */
#define GLX_RGBA_FLOAT_BIT_ARB                   0x00000004
#define GLX_RGBA_FLOAT_TYPE_ARB                  0x20B9
#endif /*GLX_ARB_fbconfig_float*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_framebuffer_sRGB
#define GLX_ARB_framebuffer_sRGB 1
/* http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt */
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB         0x20B2
#endif /*GLX_ARB_framebuffer_sRGB*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_multisample
#define GLX_ARB_multisample 1
/* http://www.opengl.org/registry/specs/ARB/multisample.txt */
#define GLX_SAMPLE_BUFFERS_ARB                   100000
#define GLX_SAMPLES_ARB                          100001
#endif /*GLX_ARB_multisample*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_robustness_application_isolation
#define GLX_ARB_robustness_application_isolation 1
/* http://www.opengl.org/registry/specs/ARB/glx_robustness_isolation.txt */
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB      0x00000008
#endif /*GLX_ARB_robustness_application_isolation*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_robustness_share_group_isolation
#define GLX_ARB_robustness_share_group_isolation 1
/* http://www.opengl.org/registry/specs/ARB/glx_robustness_isolation.txt */
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB      0x00000008
#endif /*GLX_ARB_robustness_share_group_isolation*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ARB_vertex_buffer_object
#define GLX_ARB_vertex_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/vertex_buffer_object.txt */
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#endif /*GLX_ARB_vertex_buffer_object*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ATI_pixel_format_float
#define GLX_ATI_pixel_format_float 1
#define GLX_RGBA_FLOAT_ATI_BIT                   0x00000100
#endif /*GLX_ATI_pixel_format_float*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_ATI_render_texture
#define GLX_ATI_render_texture 1
#define GLX_BIND_TO_TEXTURE_RGB_ATI                      0x9800
#define GLX_BIND_TO_TEXTURE_RGBA_ATI                    0x9801
#define GLX_TEXTURE_FORMAT_ATI                                0x9802
#define GLX_TEXTURE_TARGET_ATI                                0x9803
#define GLX_MIPMAP_TEXTURE_ATI                                0x9804
#define GLX_TEXTURE_RGB_ATI                                      0x9805
#define GLX_TEXTURE_RGBA_ATI                                    0x9806
#define GLX_NO_TEXTURE_ATI                                        0x9807
#define GLX_TEXTURE_CUBE_MAP_ATI                            0x9808
#define GLX_TEXTURE_1D_ATI                                        0x9809
#define GLX_TEXTURE_2D_ATI                                        0x980A
#define GLX_MIPMAP_LEVEL_ATI                                    0x980B
#define GLX_CUBE_MAP_FACE_ATI                                  0x980C
#define GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI      0x980D
#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI      0x980E
#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI      0x980F
#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI      0x9810
#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI      0x9811
#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI      0x9812
#define GLX_FRONT_LEFT_ATI                                        0x9813
#define GLX_FRONT_RIGHT_ATI                                      0x9814
#define GLX_BACK_LEFT_ATI                                          0x9815
#define GLX_BACK_RIGHT_ATI                                        0x9816
#define GLX_AUX0_ATI                                                    0x9817
#define GLX_AUX1_ATI                                                    0x9818
#define GLX_AUX2_ATI                                                    0x9819
#define GLX_AUX3_ATI                                                    0x981A
#define GLX_AUX4_ATI                                                    0x981B
#define GLX_AUX5_ATI                                                    0x981C
#define GLX_AUX6_ATI                                                    0x981D
#define GLX_AUX7_ATI                                                    0x981E
#define GLX_AUX8_ATI                                                    0x981F
#define GLX_AUX9_ATI                                                    0x9820
#define GLX_BIND_TO_TEXTURE_LUMINANCE_ATI          0x9821
#define GLX_BIND_TO_TEXTURE_INTENSITY_ATI          0x9822
typedef void (GLAPIENTRY * PFNGLXBINDTEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
typedef void (GLAPIENTRY * PFNGLXRELEASETEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
typedef void (GLAPIENTRY * PFNGLXDRAWABLEATTRIBATIPROC) (Display *dpy, GLXDrawable draw, const int *attrib_list);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDTEXIMAGEATIPROC glXBindTexImageATI;
extern PFNGLXRELEASETEXIMAGEATIPROC glXReleaseTexImageATI;
extern PFNGLXDRAWABLEATTRIBATIPROC glXDrawableAttribATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_ATI_render_texture*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_buffer_age
#define GLX_EXT_buffer_age 1
/* http://www.opengl.org/registry/specs/EXT/glx_buffer_age.txt */
#define GLX_BACK_BUFFER_AGE_EXT                  0x20F4
#endif /*GLX_EXT_buffer_age*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_create_context_es2_profile
#define GLX_EXT_create_context_es2_profile 1
/* http://www.opengl.org/registry/specs/EXT/glx_create_context_es2_profile.txt */
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT          0x00000004
#endif /*GLX_EXT_create_context_es2_profile*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_create_context_es_profile
#define GLX_EXT_create_context_es_profile 1
/* http://www.opengl.org/registry/specs/EXT/glx_create_context_es_profile.txt */
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT           0x00000004
#endif /*GLX_EXT_create_context_es_profile*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_fbconfig_packed_float
#define GLX_EXT_fbconfig_packed_float 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_packed_float.txt */
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT         0x20B1
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT          0x00000008
#endif /*GLX_EXT_fbconfig_packed_float*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_framebuffer_sRGB
#define GLX_EXT_framebuffer_sRGB 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_framebuffer_sRGB.txt */
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT         0x20B2
#endif /*GLX_EXT_framebuffer_sRGB*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_import_context
#define GLX_EXT_import_context 1
/* http://www.opengl.org/registry/specs/EXT/import_context.txt */
#define GLX_SHARE_CONTEXT_EXT                    0x800A
#define GLX_VISUAL_ID_EXT                        0x800B
#define GLX_SCREEN_EXT                           0x800C
typedef XID GLXContextID;
typedef void (GLAPIENTRY * PFNGLXFREECONTEXTEXTPROC) (Display* dpy, GLXContext context);
typedef GLXContextID (GLAPIENTRY * PFNGLXGETCONTEXTIDEXTPROC) (const GLXContext context);
typedef GLXContext (GLAPIENTRY * PFNGLXIMPORTCONTEXTEXTPROC) (Display* dpy, GLXContextID contextID);
typedef int (GLAPIENTRY * PFNGLXQUERYCONTEXTINFOEXTPROC) (Display* dpy, GLXContext context, int attribute,int *value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXFREECONTEXTEXTPROC glXFreeContextEXT;
extern PFNGLXGETCONTEXTIDEXTPROC glXGetContextIDEXT;
extern PFNGLXIMPORTCONTEXTEXTPROC glXImportContextEXT;
extern PFNGLXQUERYCONTEXTINFOEXTPROC glXQueryContextInfoEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_EXT_import_context*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_libglvnd
#define GLX_EXT_libglvnd 1
/* http://www.opengl.org/registry/specs/EXT/glx_libglvnd.txt */
#define GLX_VENDOR_NAMES_EXT                     0x20F6
#endif /*GLX_EXT_libglvnd*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_scene_marker
#define GLX_EXT_scene_marker 1
/* http://www.opengl.org/registry/specs/EXT/scene_marker.txt */
#endif /*GLX_EXT_scene_marker*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_stereo_tree
#define GLX_EXT_stereo_tree 1
/* http://www.opengl.org/registry/specs/EXT/glx_stereo_tree.txt */
#define GLX_STEREO_NOTIFY_EXT                    0x00000000
#define GLX_STEREO_NOTIFY_MASK_EXT               0x00000001
#define GLX_STEREO_TREE_EXT                      0x20F5
#endif /*GLX_EXT_stereo_tree*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_swap_control
#define GLX_EXT_swap_control 1
/* http://www.opengl.org/registry/specs/EXT/swap_control.txt */
#define GLX_SWAP_INTERVAL_EXT                    0x20F1
#define GLX_MAX_SWAP_INTERVAL_EXT                0x20F2
typedef void (GLAPIENTRY * PFNGLXSWAPINTERVALEXTPROC) (Display* dpy, GLXDrawable drawable, int interval);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_EXT_swap_control*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_swap_control_tear
#define GLX_EXT_swap_control_tear 1
/* http://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt */
#define GLX_LATE_SWAPS_TEAR_EXT                  0x20F3
#endif /*GLX_EXT_swap_control_tear*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_texture_from_pixmap
#define GLX_EXT_texture_from_pixmap 1
/* http://www.opengl.org/registry/specs/EXT/texture_from_pixmap.txt */
#define GLX_TEXTURE_1D_BIT_EXT                   0x00000001
#define GLX_TEXTURE_2D_BIT_EXT                   0x00000002
#define GLX_TEXTURE_RECTANGLE_BIT_EXT            0x00000004
#define GLX_BIND_TO_TEXTURE_RGB_EXT              0x20D0
#define GLX_BIND_TO_TEXTURE_RGBA_EXT             0x20D1
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT           0x20D2
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT          0x20D3
#define GLX_Y_INVERTED_EXT                       0x20D4
#define GLX_TEXTURE_FORMAT_EXT                   0x20D5
#define GLX_TEXTURE_TARGET_EXT                   0x20D6
#define GLX_MIPMAP_TEXTURE_EXT                   0x20D7
#define GLX_TEXTURE_FORMAT_NONE_EXT              0x20D8
#define GLX_TEXTURE_FORMAT_RGB_EXT               0x20D9
#define GLX_TEXTURE_FORMAT_RGBA_EXT              0x20DA
#define GLX_TEXTURE_1D_EXT                       0x20DB
#define GLX_TEXTURE_2D_EXT                       0x20DC
#define GLX_TEXTURE_RECTANGLE_EXT                0x20DD
#define GLX_FRONT_LEFT_EXT                       0x20DE
#define GLX_FRONT_RIGHT_EXT                      0x20DF
#define GLX_BACK_LEFT_EXT                        0x20E0
#define GLX_BACK_RIGHT_EXT                       0x20E1
#define GLX_AUX0_EXT                             0x20E2
#define GLX_AUX1_EXT                             0x20E3
#define GLX_AUX2_EXT                             0x20E4
#define GLX_AUX3_EXT                             0x20E5
#define GLX_AUX4_EXT                             0x20E6
#define GLX_AUX5_EXT                             0x20E7
#define GLX_AUX6_EXT                             0x20E8
#define GLX_AUX7_EXT                             0x20E9
#define GLX_AUX8_EXT                             0x20EA
#define GLX_AUX9_EXT                             0x20EB
typedef void (GLAPIENTRY * PFNGLXBINDTEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer, const int *attrib_list);
typedef void (GLAPIENTRY * PFNGLXRELEASETEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDTEXIMAGEEXTPROC glXBindTexImageEXT;
extern PFNGLXRELEASETEXIMAGEEXTPROC glXReleaseTexImageEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_EXT_texture_from_pixmap*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_visual_info
#define GLX_EXT_visual_info 1
/* http://www.opengl.org/registry/specs/EXT/visual_info.txt */
#define GLX_X_VISUAL_TYPE_EXT                    0x22
#define GLX_TRANSPARENT_TYPE_EXT                 0x23
#define GLX_TRANSPARENT_INDEX_VALUE_EXT          0x24
#define GLX_TRANSPARENT_RED_VALUE_EXT            0x25
#define GLX_TRANSPARENT_GREEN_VALUE_EXT          0x26
#define GLX_TRANSPARENT_BLUE_VALUE_EXT           0x27
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT          0x28
#define GLX_NONE_EXT                             0x8000
#define GLX_TRUE_COLOR_EXT                       0x8002
#define GLX_DIRECT_COLOR_EXT                     0x8003
#define GLX_PSEUDO_COLOR_EXT                     0x8004
#define GLX_STATIC_COLOR_EXT                     0x8005
#define GLX_GRAY_SCALE_EXT                       0x8006
#define GLX_STATIC_GRAY_EXT                      0x8007
#define GLX_TRANSPARENT_RGB_EXT                  0x8008
#define GLX_TRANSPARENT_INDEX_EXT                0x8009
#endif /*GLX_EXT_visual_info*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_EXT_visual_rating
#define GLX_EXT_visual_rating 1
/* http://www.opengl.org/registry/specs/EXT/visual_rating.txt */
#define GLX_VISUAL_CAVEAT_EXT                    0x20
#define GLX_SLOW_VISUAL_EXT                      0x8001
#define GLX_NON_CONFORMANT_VISUAL_EXT            0x800D
#endif /*GLX_EXT_visual_rating*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_INTEL_swap_event
#define GLX_INTEL_swap_event 1
/* http://www.opengl.org/registry/specs/INTEL/swap_event.txt */
#define GLX_EXCHANGE_COMPLETE_INTEL              0x8180
#define GLX_COPY_COMPLETE_INTEL                  0x8181
#define GLX_FLIP_COMPLETE_INTEL                  0x8182
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK      0x04000000
#endif /*GLX_INTEL_swap_event*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_agp_offset
#define GLX_MESA_agp_offset 1
/* http://www.opengl.org/registry/specs/MESA/agp_offset.txt */
typedef unsigned int (GLAPIENTRY * PFNGLXGETAGPOFFSETMESAPROC) (const void* pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETAGPOFFSETMESAPROC glXGetAGPOffsetMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_agp_offset*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_copy_sub_buffer
#define GLX_MESA_copy_sub_buffer 1
/* http://www.opengl.org/registry/specs/MESA/copy_sub_buffer.txt */
typedef void (GLAPIENTRY * PFNGLXCOPYSUBBUFFERMESAPROC) (Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCOPYSUBBUFFERMESAPROC glXCopySubBufferMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_copy_sub_buffer*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_pixmap_colormap
#define GLX_MESA_pixmap_colormap 1
/* http://www.opengl.org/registry/specs/MESA/pixmap_colormap.txt */
typedef GLXPixmap (GLAPIENTRY * PFNGLXCREATEGLXPIXMAPMESAPROC) (Display* dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCREATEGLXPIXMAPMESAPROC glXCreateGLXPixmapMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_pixmap_colormap*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_query_renderer
#define GLX_MESA_query_renderer 1
/* http://www.opengl.org/registry/specs/MESA/glx_query_renderer.txt */
#define GLX_RENDERER_VENDOR_ID_MESA              0x8183
#define GLX_RENDERER_DEVICE_ID_MESA              0x8184
#define GLX_RENDERER_VERSION_MESA                0x8185
#define GLX_RENDERER_ACCELERATED_MESA            0x8186
#define GLX_RENDERER_VIDEO_MEMORY_MESA           0x8187
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_PREFERRED_PROFILE_MESA      0x8189
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
#define GLX_RENDERER_ID_MESA                     0x818E
typedef Bool (GLAPIENTRY * PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC) (int attribute, unsigned int* value);
typedef const char* (GLAPIENTRY * PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC) (int attribute);
typedef Bool (GLAPIENTRY * PFNGLXQUERYRENDERERINTEGERMESAPROC) (Display* dpy, int screen, int renderer, int attribute, unsigned int *value);
typedef const char* (GLAPIENTRY * PFNGLXQUERYRENDERERSTRINGMESAPROC) (Display *dpy, int screen, int renderer, int attribute);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glXQueryCurrentRendererIntegerMESA;
extern PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glXQueryCurrentRendererStringMESA;
extern PFNGLXQUERYRENDERERINTEGERMESAPROC glXQueryRendererIntegerMESA;
extern PFNGLXQUERYRENDERERSTRINGMESAPROC glXQueryRendererStringMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_query_renderer*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_release_buffers
#define GLX_MESA_release_buffers 1
/* http://www.opengl.org/registry/specs/MESA/release_buffers.txt */
typedef Bool (GLAPIENTRY * PFNGLXRELEASEBUFFERSMESAPROC) (Display* dpy, GLXDrawable d);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXRELEASEBUFFERSMESAPROC glXReleaseBuffersMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_release_buffers*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_set_3dfx_mode
#define GLX_MESA_set_3dfx_mode 1
/* http://www.opengl.org/registry/specs/MESA/set_3dfx_mode.txt */
#define GLX_3DFX_WINDOW_MODE_MESA                0x1
#define GLX_3DFX_FULLSCREEN_MODE_MESA            0x2
typedef GLboolean (GLAPIENTRY * PFNGLXSET3DFXMODEMESAPROC) (GLint mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXSET3DFXMODEMESAPROC glXSet3DfxModeMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_set_3dfx_mode*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_MESA_swap_control
#define GLX_MESA_swap_control 1
/* http://cgit.freedesktop.org/mesa/mesa/plain/docs/MESA_swap_control.spec */
typedef int (GLAPIENTRY * PFNGLXGETSWAPINTERVALMESAPROC) (void);
typedef int (GLAPIENTRY * PFNGLXSWAPINTERVALMESAPROC) (unsigned int interval);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETSWAPINTERVALMESAPROC glXGetSwapIntervalMESA;
extern PFNGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_MESA_swap_control*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_copy_buffer
#define GLX_NV_copy_buffer 1
/* http://www.opengl.org/registry/specs/NV/glx_copy_buffer.txt */
typedef void (GLAPIENTRY * PFNGLXCOPYBUFFERSUBDATANVPROC) (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC) (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCOPYBUFFERSUBDATANVPROC glXCopyBufferSubDataNV;
extern PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glXNamedCopyBufferSubDataNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_copy_buffer*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_copy_image
#define GLX_NV_copy_image 1
/* http://www.opengl.org/registry/specs/NV/copy_image.txt */
/* void glXCopyImageSubDataNV (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) */
#endif /*GLX_NV_copy_image*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_delay_before_swap
#define GLX_NV_delay_before_swap 1
/* http://www.opengl.org/registry/specs/NV/glx_delay_before_swap.txt */
typedef Bool (GLAPIENTRY * PFNGLXDELAYBEFORESWAPNVPROC) (Display* dpy, GLXDrawable drawable, GLfloat seconds);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXDELAYBEFORESWAPNVPROC glXDelayBeforeSwapNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_delay_before_swap*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_float_buffer
#define GLX_NV_float_buffer 1
/* http://cvs1.nvidia.com/inc/GL/glxtokens.h */
#define GLX_FLOAT_COMPONENTS_NV                  0x20B0
#endif /*GLX_NV_float_buffer*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_multisample_coverage
#define GLX_NV_multisample_coverage 1
/* http://www.opengl.org/registry/specs/NV/multisample_coverage.txt */
#define GLX_COLOR_SAMPLES_NV                     0x20B3
#define GLX_COVERAGE_SAMPLES_NV                  100001
#endif /*GLX_NV_multisample_coverage*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_present_video
#define GLX_NV_present_video 1
/* http://www.opengl.org/registry/specs/NV/present_video.txt */
#define GLX_NUM_VIDEO_SLOTS_NV                   0x20F0
typedef int (GLAPIENTRY * PFNGLXBINDVIDEODEVICENVPROC) (Display* dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
typedef unsigned int* (GLAPIENTRY * PFNGLXENUMERATEVIDEODEVICESNVPROC) (Display *dpy, int screen, int *nelements);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDVIDEODEVICENVPROC glXBindVideoDeviceNV;
extern PFNGLXENUMERATEVIDEODEVICESNVPROC glXEnumerateVideoDevicesNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_present_video*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_robustness_video_memory_purge
#define GLX_NV_robustness_video_memory_purge 1
/* http://www.opengl.org/registry/specs/NV/robustness_video_memory_purge.txt */
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#endif /*GLX_NV_robustness_video_memory_purge*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_swap_group
#define GLX_NV_swap_group 1
/* http://www.opengl.org/registry/specs/NV/glx_swap_group.txt */
typedef Bool (GLAPIENTRY * PFNGLXBINDSWAPBARRIERNVPROC) (Display* dpy, GLuint group, GLuint barrier);
typedef Bool (GLAPIENTRY * PFNGLXJOINSWAPGROUPNVPROC) (Display* dpy, GLXDrawable drawable, GLuint group);
typedef Bool (GLAPIENTRY * PFNGLXQUERYFRAMECOUNTNVPROC) (Display* dpy, int screen, GLuint *count);
typedef Bool (GLAPIENTRY * PFNGLXQUERYMAXSWAPGROUPSNVPROC) (Display* dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
typedef Bool (GLAPIENTRY * PFNGLXQUERYSWAPGROUPNVPROC) (Display* dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
typedef Bool (GLAPIENTRY * PFNGLXRESETFRAMECOUNTNVPROC) (Display* dpy, int screen);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDSWAPBARRIERNVPROC glXBindSwapBarrierNV;
extern PFNGLXJOINSWAPGROUPNVPROC glXJoinSwapGroupNV;
extern PFNGLXQUERYFRAMECOUNTNVPROC glXQueryFrameCountNV;
extern PFNGLXQUERYMAXSWAPGROUPSNVPROC glXQueryMaxSwapGroupsNV;
extern PFNGLXQUERYSWAPGROUPNVPROC glXQuerySwapGroupNV;
extern PFNGLXRESETFRAMECOUNTNVPROC glXResetFrameCountNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_swap_group*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_vertex_array_range
#define GLX_NV_vertex_array_range 1
/* http://oss.sgi.com/projects/ogl-sample/registry/NV/vertex_array_range.txt */
typedef void * (GLAPIENTRY * PFNGLXALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
typedef void (GLAPIENTRY * PFNGLXFREEMEMORYNVPROC) (void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXALLOCATEMEMORYNVPROC glXAllocateMemoryNV;
extern PFNGLXFREEMEMORYNVPROC glXFreeMemoryNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_vertex_array_range*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_video_capture
#define GLX_NV_video_capture 1
/* http://www.opengl.org/registry/specs/NV/video_capture.txt */
#define GLX_DEVICE_ID_NV                         0x20CD
#define GLX_UNIQUE_ID_NV                         0x20CE
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV           0x20CF
/* typedef XID GLXVideoCaptureDeviceNV */
typedef int (GLAPIENTRY * PFNGLXBINDVIDEOCAPTUREDEVICENVPROC) (Display* dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef GLXVideoCaptureDeviceNV * (GLAPIENTRY * PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) (Display* dpy, int screen, int *nelements);
typedef void (GLAPIENTRY * PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) (Display* dpy, GLXVideoCaptureDeviceNV device);
typedef int (GLAPIENTRY * PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) (Display* dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
typedef void (GLAPIENTRY * PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) (Display* dpy, GLXVideoCaptureDeviceNV device);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glXBindVideoCaptureDeviceNV;
extern PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glXEnumerateVideoCaptureDevicesNV;
extern PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glXLockVideoCaptureDeviceNV;
extern PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glXQueryVideoCaptureDeviceNV;
extern PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glXReleaseVideoCaptureDeviceNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_video_capture*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_NV_video_out
#define GLX_NV_video_out 1
/* http://www.opengl.org/registry/specs/NV/glx_video_output.txt */
#define GLX_VIDEO_OUT_COLOR_NV                   0x20C3
#define GLX_VIDEO_OUT_ALPHA_NV                   0x20C4
#define GLX_VIDEO_OUT_DEPTH_NV                   0x20C5
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV         0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV         0x20C7
#define GLX_VIDEO_OUT_FRAME_NV                   0x20C8
#define GLX_VIDEO_OUT_FIELD_1_NV                 0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV                 0x20CA
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV      0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV      0x20CC
typedef int (GLAPIENTRY * PFNGLXBINDVIDEOIMAGENVPROC) (Display* dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef int (GLAPIENTRY * PFNGLXGETVIDEODEVICENVPROC) (Display* dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
typedef int (GLAPIENTRY * PFNGLXGETVIDEOINFONVPROC) (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef int (GLAPIENTRY * PFNGLXRELEASEVIDEODEVICENVPROC) (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int (GLAPIENTRY * PFNGLXRELEASEVIDEOIMAGENVPROC) (Display* dpy, GLXPbuffer pbuf);
typedef int (GLAPIENTRY * PFNGLXSENDPBUFFERTOVIDEONVPROC) (Display* dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDVIDEOIMAGENVPROC glXBindVideoImageNV;
extern PFNGLXGETVIDEODEVICENVPROC glXGetVideoDeviceNV;
extern PFNGLXGETVIDEOINFONVPROC glXGetVideoInfoNV;
extern PFNGLXRELEASEVIDEODEVICENVPROC glXReleaseVideoDeviceNV;
extern PFNGLXRELEASEVIDEOIMAGENVPROC glXReleaseVideoImageNV;
extern PFNGLXSENDPBUFFERTOVIDEONVPROC glXSendPbufferToVideoNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_NV_video_out*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_OML_swap_method
#define GLX_OML_swap_method 1
/* http://www.opengl.org/registry/specs/OML/glx_swap_method.txt */
#define GLX_SWAP_METHOD_OML                      0x8060
#define GLX_SWAP_EXCHANGE_OML                    0x8061
#define GLX_SWAP_COPY_OML                        0x8062
#define GLX_SWAP_UNDEFINED_OML                   0x8063
#endif /*GLX_OML_swap_method*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_OML_sync_control
#define GLX_OML_sync_control 1
/* http://www.opengl.org/registry/specs/OML/glx_sync_control.txt */
typedef Bool (GLAPIENTRY * PFNGLXGETMSCRATEOMLPROC) (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
typedef Bool (GLAPIENTRY * PFNGLXGETSYNCVALUESOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
typedef int64_t (GLAPIENTRY * PFNGLXSWAPBUFFERSMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef Bool (GLAPIENTRY * PFNGLXWAITFORMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
typedef Bool (GLAPIENTRY * PFNGLXWAITFORSBCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETMSCRATEOMLPROC glXGetMscRateOML;
extern PFNGLXGETSYNCVALUESOMLPROC glXGetSyncValuesOML;
extern PFNGLXSWAPBUFFERSMSCOMLPROC glXSwapBuffersMscOML;
extern PFNGLXWAITFORMSCOMLPROC glXWaitForMscOML;
extern PFNGLXWAITFORSBCOMLPROC glXWaitForSbcOML;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_OML_sync_control*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIS_blended_overlay
#define GLX_SGIS_blended_overlay 1
/* http://www.opengl.org/registry/specs/SGIS/blended_overlay.txt */
#define GLX_BLENDED_RGBA_SGIS                    0x8025
#endif /*GLX_SGIS_blended_overlay*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIS_color_range
#define GLX_SGIS_color_range 1
/* http://www.opengl.org/registry/specs/SGIS/color_range.txt */
#endif /*GLX_SGIS_color_range*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIS_multisample
#define GLX_SGIS_multisample 1
/* http://www.opengl.org/registry/specs/SGIS/multisample.txt */
#define GLX_SAMPLE_BUFFERS_SGIS                  100000
#define GLX_SAMPLES_SGIS                         100001
#endif /*GLX_SGIS_multisample*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIS_shared_multisample
#define GLX_SGIS_shared_multisample 1
#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS      0x8026
#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS     0x8027
#endif /*GLX_SGIS_shared_multisample*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_fbconfig
#define GLX_SGIX_fbconfig 1
/* http://www.opengl.org/registry/specs/SGIX/fbconfig.txt */
#define GLX_RGBA_BIT_SGIX                        0x00000001
#define GLX_WINDOW_BIT_SGIX                      0x00000001
#define GLX_COLOR_INDEX_BIT_SGIX                 0x00000002
#define GLX_PIXMAP_BIT_SGIX                      0x00000002
#define GLX_SCREEN_EXT                           0x800C
#define GLX_DRAWABLE_TYPE_SGIX                   0x8010
#define GLX_RENDER_TYPE_SGIX                     0x8011
#define GLX_X_RENDERABLE_SGIX                    0x8012
#define GLX_FBCONFIG_ID_SGIX                     0x8013
#define GLX_RGBA_TYPE_SGIX                       0x8014
#define GLX_COLOR_INDEX_TYPE_SGIX                0x8015
typedef XID GLXFBConfigIDSGIX;
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef GLXFBConfigSGIX* (GLAPIENTRY * PFNGLXCHOOSEFBCONFIGSGIXPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
typedef GLXContext (GLAPIENTRY * PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPixmap (GLAPIENTRY * PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, Pixmap pixmap);
typedef int (GLAPIENTRY * PFNGLXGETFBCONFIGATTRIBSGIXPROC) (Display* dpy, GLXFBConfigSGIX config, int attribute, int *value);
typedef GLXFBConfigSGIX (GLAPIENTRY * PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) (Display* dpy, XVisualInfo *vis);
typedef XVisualInfo* (GLAPIENTRY * PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) (Display *dpy, GLXFBConfig config);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCHOOSEFBCONFIGSGIXPROC glXChooseFBConfigSGIX;
extern PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glXCreateContextWithConfigSGIX;
extern PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glXCreateGLXPixmapWithConfigSGIX;
extern PFNGLXGETFBCONFIGATTRIBSGIXPROC glXGetFBConfigAttribSGIX;
extern PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glXGetFBConfigFromVisualSGIX;
extern PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glXGetVisualFromFBConfigSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_fbconfig*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_hyperpipe
#define GLX_SGIX_hyperpipe 1
/* http://oss.sgi.com/projects/ogl-sample/registry/SGIX/hyperpipe_group.txt */
#define GLX_HYPERPIPE_ID_SGIX                    0x8030
#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX      80
#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX          0x00000001
#define GLX_HYPERPIPE_RENDER_PIPE_SGIX           0x00000002
#define GLX_PIPE_RECT_SGIX                       0x00000001
#define GLX_PIPE_RECT_LIMITS_SGIX                0x00000002
#define GLX_HYPERPIPE_STEREO_SGIX                0x00000003
#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX         0x00000004
#define GLX_BAD_HYPERPIPE_CONFIG_SGIX            91
#define GLX_BAD_HYPERPIPE_SGIX                   92
typedef struct {  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];   int  networkId; } GLXHyperpipeNetworkSGIX;
typedef struct {  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];   int channel;   unsigned int participationType;   int timeSlice; } GLXHyperpipeConfigSGIX;
typedef struct {  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];   int srcXOrigin;   int srcYOrigin;   int srcWidth;   int srcHeight;   int destXOrigin;   int destYOrigin;   int destWidth;   int destHeight; } GLXPipeRect;
typedef struct {  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];   int XOrigin;   int YOrigin;   int maxHeight;   int maxWidth; } GLXPipeRectLimits;
typedef GLXHyperpipeNetworkSGIX * (GLAPIENTRY * PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) (Display *dpy, int *npipes);
typedef int (GLAPIENTRY * PFNGLXHYPERPIPECONFIGSGIXPROC) (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
typedef GLXHyperpipeConfigSGIX * (GLAPIENTRY * PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId, int *npipes);
typedef int (GLAPIENTRY * PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId);
typedef int (GLAPIENTRY * PFNGLXBINDHYPERPIPESGIXPROC) (Display *dpy, int hpId);
typedef int (GLAPIENTRY * PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
typedef int (GLAPIENTRY * PFNGLXHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList);
typedef int (GLAPIENTRY * PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glXQueryHyperpipeNetworkSGIX;
extern PFNGLXHYPERPIPECONFIGSGIXPROC glXHyperpipeConfigSGIX;
extern PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glXQueryHyperpipeConfigSGIX;
extern PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glXDestroyHyperpipeConfigSGIX;
extern PFNGLXBINDHYPERPIPESGIXPROC glXBindHyperpipeSGIX;
extern PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glXQueryHyperpipeBestAttribSGIX;
extern PFNGLXHYPERPIPEATTRIBSGIXPROC glXHyperpipeAttribSGIX;
extern PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glXQueryHyperpipeAttribSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_hyperpipe*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_pbuffer
#define GLX_SGIX_pbuffer 1
/* http://www.opengl.org/registry/specs/SGIX/pbuffer.txt */
#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX           0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX          0x00000002
#define GLX_BACK_LEFT_BUFFER_BIT_SGIX            0x00000004
#define GLX_PBUFFER_BIT_SGIX                     0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX           0x00000008
#define GLX_AUX_BUFFERS_BIT_SGIX                 0x00000010
#define GLX_DEPTH_BUFFER_BIT_SGIX                0x00000020
#define GLX_STENCIL_BUFFER_BIT_SGIX              0x00000040
#define GLX_ACCUM_BUFFER_BIT_SGIX                0x00000080
#define GLX_SAMPLE_BUFFERS_BIT_SGIX              0x00000100
#define GLX_MAX_PBUFFER_WIDTH_SGIX               0x8016
#define GLX_MAX_PBUFFER_HEIGHT_SGIX              0x8017
#define GLX_MAX_PBUFFER_PIXELS_SGIX              0x8018
#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX           0x8019
#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX          0x801A
#define GLX_PRESERVED_CONTENTS_SGIX              0x801B
#define GLX_LARGEST_PBUFFER_SGIX                 0x801C
#define GLX_WIDTH_SGIX                           0x801D
#define GLX_HEIGHT_SGIX                          0x801E
#define GLX_EVENT_MASK_SGIX                      0x801F
#define GLX_DAMAGED_SGIX                         0x8020
#define GLX_SAVED_SGIX                           0x8021
#define GLX_WINDOW_SGIX                          0x8022
#define GLX_PBUFFER_SGIX                         0x8023
#define GLX_BUFFER_CLOBBER_MASK_SGIX             0x08000000
typedef XID GLXPbufferSGIX;
typedef struct { int type; unsigned long serial; Bool send_event; Display *display; GLXDrawable drawable; int event_type; int draw_type; unsigned int mask; int x, y; int width, height; int count; } GLXBufferClobberEventSGIX;
typedef GLXPbuffer (GLAPIENTRY * PFNGLXCREATEGLXPBUFFERSGIXPROC) (Display* dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list);
typedef void (GLAPIENTRY * PFNGLXDESTROYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf);
typedef void (GLAPIENTRY * PFNGLXGETSELECTEDEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long *mask);
typedef void (GLAPIENTRY * PFNGLXQUERYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf, int attribute, unsigned int *value);
typedef void (GLAPIENTRY * PFNGLXSELECTEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long mask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCREATEGLXPBUFFERSGIXPROC glXCreateGLXPbufferSGIX;
extern PFNGLXDESTROYGLXPBUFFERSGIXPROC glXDestroyGLXPbufferSGIX;
extern PFNGLXGETSELECTEDEVENTSGIXPROC glXGetSelectedEventSGIX;
extern PFNGLXQUERYGLXPBUFFERSGIXPROC glXQueryGLXPbufferSGIX;
extern PFNGLXSELECTEVENTSGIXPROC glXSelectEventSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_pbuffer*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_swap_barrier
#define GLX_SGIX_swap_barrier 1
/* http://oss.sgi.com/projects/ogl-sample/registry/SGIX/swap_barrier.txt */
typedef void (GLAPIENTRY * PFNGLXBINDSWAPBARRIERSGIXPROC) (Display *dpy, GLXDrawable drawable, int barrier);
typedef Bool (GLAPIENTRY * PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) (Display *dpy, int screen, int *max);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDSWAPBARRIERSGIXPROC glXBindSwapBarrierSGIX;
extern PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glXQueryMaxSwapBarriersSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_swap_barrier*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_swap_group
#define GLX_SGIX_swap_group 1
/* http://oss.sgi.com/projects/ogl-sample/registry/SGIX/swap_group.txt */
typedef void (GLAPIENTRY * PFNGLXJOINSWAPGROUPSGIXPROC) (Display *dpy, GLXDrawable drawable, GLXDrawable member);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXJOINSWAPGROUPSGIXPROC glXJoinSwapGroupSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_swap_group*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_video_resize
#define GLX_SGIX_video_resize 1
/* http://www.opengl.org/registry/specs/SGIX/video_resize.txt */
#define GLX_SYNC_FRAME_SGIX                      0x00000000
#define GLX_SYNC_SWAP_SGIX                       0x00000001
typedef int (GLAPIENTRY * PFNGLXBINDCHANNELTOWINDOWSGIXPROC) (Display* display, int screen, int channel, Window window);
typedef int (GLAPIENTRY * PFNGLXCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int x, int y, int w, int h);
typedef int (GLAPIENTRY * PFNGLXCHANNELRECTSYNCSGIXPROC) (Display* display, int screen, int channel, GLenum synctype);
typedef int (GLAPIENTRY * PFNGLXQUERYCHANNELDELTASSGIXPROC) (Display* display, int screen, int channel, int *x, int *y, int *w, int *h);
typedef int (GLAPIENTRY * PFNGLXQUERYCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXBINDCHANNELTOWINDOWSGIXPROC glXBindChannelToWindowSGIX;
extern PFNGLXCHANNELRECTSGIXPROC glXChannelRectSGIX;
extern PFNGLXCHANNELRECTSYNCSGIXPROC glXChannelRectSyncSGIX;
extern PFNGLXQUERYCHANNELDELTASSGIXPROC glXQueryChannelDeltasSGIX;
extern PFNGLXQUERYCHANNELRECTSGIXPROC glXQueryChannelRectSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGIX_video_resize*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGIX_visual_select_group
#define GLX_SGIX_visual_select_group 1
/* http://www.opengl.org/registry/specs/SGIX/visual_select_group.txt */
#define GLX_VISUAL_SELECT_GROUP_SGIX             0x8028
#endif /*GLX_SGIX_visual_select_group*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGI_cushion
#define GLX_SGI_cushion 1
/* http://www.opengl.org/registry/specs/SGI/cushion.txt */
typedef void (GLAPIENTRY * PFNGLXCUSHIONSGIPROC) (Display* dpy, Window window, float cushion);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXCUSHIONSGIPROC glXCushionSGI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGI_cushion*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGI_make_current_read
#define GLX_SGI_make_current_read 1
/* http://www.opengl.org/registry/specs/SGI/make_current_read.txt */
typedef GLXDrawable (GLAPIENTRY * PFNGLXGETCURRENTREADDRAWABLESGIPROC) (void);
typedef Bool (GLAPIENTRY * PFNGLXMAKECURRENTREADSGIPROC) (Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETCURRENTREADDRAWABLESGIPROC glXGetCurrentReadDrawableSGI;
extern PFNGLXMAKECURRENTREADSGIPROC glXMakeCurrentReadSGI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGI_make_current_read*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGI_swap_control
#define GLX_SGI_swap_control 1
/* http://www.opengl.org/registry/specs/SGI/swap_control.txt */
typedef int (GLAPIENTRY * PFNGLXSWAPINTERVALSGIPROC) (int interval);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGI_swap_control*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SGI_video_sync
#define GLX_SGI_video_sync 1
/* http://www.opengl.org/registry/specs/SGI/video_sync.txt */
typedef int (GLAPIENTRY * PFNGLXGETVIDEOSYNCSGIPROC) (unsigned int* count);
typedef int (GLAPIENTRY * PFNGLXWAITVIDEOSYNCSGIPROC) (int divisor, int remainder, unsigned int* count);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETVIDEOSYNCSGIPROC glXGetVideoSyncSGI;
extern PFNGLXWAITVIDEOSYNCSGIPROC glXWaitVideoSyncSGI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SGI_video_sync*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SUN_get_transparent_index
#define GLX_SUN_get_transparent_index 1
/* http://www.opengl.org/registry/specs/SUN/get_transparent_index.txt */
typedef Status (GLAPIENTRY * PFNGLXGETTRANSPARENTINDEXSUNPROC) (Display* dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXGETTRANSPARENTINDEXSUNPROC glXGetTransparentIndexSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SUN_get_transparent_index*/
#endif /*GLEXT_WANT_GLX*/

#if GLEXT_WANT_GLX
#ifndef GLX_SUN_video_resize
#define GLX_SUN_video_resize 1
/* http://wwws.sun.com/software/graphics/opengl/extensions/glx_sun_video_resize.txt */
#define GL_VIDEO_RESIZE_COMPENSATION_SUN         0x85CD
#define GLX_VIDEO_RESIZE_SUN                     0x8171
typedef int (GLAPIENTRY * PFNGLXVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float factor);
typedef int (GLAPIENTRY * PFNGLXGETVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float* factor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLXVIDEORESIZESUNPROC glXVideoResizeSUN;
extern PFNGLXGETVIDEORESIZESUNPROC glXGetVideoResizeSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GLX_SUN_video_resize*/
#endif /*GLEXT_WANT_GLX*/

#ifndef GL_3DFX_multisample
#define GL_3DFX_multisample 1
/* http://www.opengl.org/registry/specs/3DFX/3dfx_multisample.txt */
#define GL_MULTISAMPLE_3DFX                      0x86B2
#define GL_SAMPLE_BUFFERS_3DFX                   0x86B3
#define GL_SAMPLES_3DFX                          0x86B4
#define GL_MULTISAMPLE_BIT_3DFX                  0x20000000
#endif /*GL_3DFX_multisample*/

#ifndef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 1
/* http://www.opengl.org/registry/specs/3DFX/tbuffer.txt */
typedef void (GLAPIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_3DFX_tbuffer*/

#ifndef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 1
/* http://www.opengl.org/registry/specs/3DFX/texture_compression_FXT1.txt */
#define GL_COMPRESSED_RGB_FXT1_3DFX              0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX             0x86B1
#endif /*GL_3DFX_texture_compression_FXT1*/

#ifndef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 1
/* http://www.opengl.org/registry/specs/AMD/blend_minmax_factor.txt */
#define GL_FACTOR_MIN_AMD                        0x901C
#define GL_FACTOR_MAX_AMD                        0x901D
#endif /*GL_AMD_blend_minmax_factor*/

#ifndef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 1
/* http://www.opengl.org/registry/specs/AMD/conservative_depth.txt */
#endif /*GL_AMD_conservative_depth*/

#ifndef GL_AMD_debug_output
#define GL_AMD_debug_output 1
/* http://www.opengl.org/registry/specs/AMD/debug_output.txt */
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD          0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD         0x9144
#define GL_DEBUG_LOGGED_MESSAGES_AMD             0x9145
#define GL_DEBUG_SEVERITY_HIGH_AMD               0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_AMD             0x9147
#define GL_DEBUG_SEVERITY_LOW_AMD                0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD          0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD      0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD        0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD        0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD    0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD        0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD              0x9150
typedef void (GLAPIENTRY *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);
typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
extern PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
extern PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
extern PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_debug_output*/

#ifndef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 1
/* http://www.opengl.org/registry/specs/AMD/depth_clamp_separate.txt */
#define GL_DEPTH_CLAMP_NEAR_AMD                  0x901E
#define GL_DEPTH_CLAMP_FAR_AMD                   0x901F
#endif /*GL_AMD_depth_clamp_separate*/

#ifndef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 1
/* http://www.opengl.org/registry/specs/AMD/draw_buffers_blend.txt */
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
extern PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_draw_buffers_blend*/

#ifndef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 1
/* http://www.opengl.org/registry/specs/AMD/gcn_shader.txt */
#endif /*GL_AMD_gcn_shader*/

#ifndef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 1
/* http://www.opengl.org/registry/specs/AMD/gpu_shader_half_float.txt */
#define GL_FLOAT16_NV                            0x8FF8
#define GL_FLOAT16_VEC2_NV                       0x8FF9
#define GL_FLOAT16_VEC3_NV                       0x8FFA
#define GL_FLOAT16_VEC4_NV                       0x8FFB
#define GL_FLOAT16_MAT2_AMD                      0x91C5
#define GL_FLOAT16_MAT3_AMD                      0x91C6
#define GL_FLOAT16_MAT4_AMD                      0x91C7
#define GL_FLOAT16_MAT2x3_AMD                    0x91C8
#define GL_FLOAT16_MAT2x4_AMD                    0x91C9
#define GL_FLOAT16_MAT3x2_AMD                    0x91CA
#define GL_FLOAT16_MAT3x4_AMD                    0x91CB
#define GL_FLOAT16_MAT4x2_AMD                    0x91CC
#define GL_FLOAT16_MAT4x3_AMD                    0x91CD
#endif /*GL_AMD_gpu_shader_half_float*/

#ifndef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 1
/* http://www.opengl.org/registry/specs/AMD/gpu_shader_int64.txt */
#endif /*GL_AMD_gpu_shader_int64*/

#ifndef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 1
/* http://www.opengl.org/registry/specs/AMD/interleaved_elements.txt */
#define GL_RED                                   0x1903
#define GL_GREEN                                 0x1904
#define GL_BLUE                                  0x1905
#define GL_ALPHA                                 0x1906
#define GL_RG8UI                                 0x8238
#define GL_RG16UI                                0x823A
#define GL_RGBA8UI                               0x8D7C
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD            0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD                 0x91A5
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVERTEXATTRIBPARAMETERIAMDPROC glVertexAttribParameteriAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_interleaved_elements*/

#ifndef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 1
/* http://www.opengl.org/registry/specs/AMD/multi_draw_indirect.txt */
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
extern PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_multi_draw_indirect*/

#ifndef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 1
/* http://www.opengl.org/registry/specs/AMD/name_gen_delete.txt */
#define GL_DATA_BUFFER_AMD                       0x9151
#define GL_PERFORMANCE_MONITOR_AMD               0x9152
#define GL_QUERY_OBJECT_AMD                      0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD               0x9154
#define GL_SAMPLER_OBJECT_AMD                    0x9155
typedef void (GLAPIENTRY * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint* names);
typedef void (GLAPIENTRY * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint* names);
typedef GLboolean (GLAPIENTRY * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
extern PFNGLGENNAMESAMDPROC glGenNamesAMD;
extern PFNGLISNAMEAMDPROC glIsNameAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_name_gen_delete*/

#ifndef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 1
/* http://www.opengl.org/registry/specs/AMD/occlusion_query_event.txt */
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD        0x00000001
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD        0x00000002
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD      0x00000004
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD        0x874F
#define GL_QUERY_ALL_EVENT_BITS_AMD              0xFFFFFFFF
typedef void (GLAPIENTRY * PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLQUERYOBJECTPARAMETERUIAMDPROC glQueryObjectParameteruiAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_occlusion_query_event*/

#ifndef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 1
/* http://www.opengl.org/registry/specs/AMD/performance_monitor.txt */
#define GL_COUNTER_TYPE_AMD                      0x8BC0
#define GL_COUNTER_RANGE_AMD                     0x8BC1
#define GL_UNSIGNED_INT64_AMD                    0x8BC2
#define GL_PERCENTAGE_AMD                        0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD          0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD               0x8BC5
#define GL_PERFMON_RESULT_AMD                    0x8BC6
typedef void (GLAPIENTRY * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
typedef void (GLAPIENTRY * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors);
typedef void (GLAPIENTRY * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
typedef void (GLAPIENTRY * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString);
typedef void (GLAPIENTRY * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint* numGroups, GLsizei groupsSize, GLuint *groups);
typedef void (GLAPIENTRY * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
extern PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
extern PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
extern PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
extern PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
extern PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
extern PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
extern PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
extern PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
extern PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
extern PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_performance_monitor*/

#ifndef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 1
/* http://www.opengl.org/registry/specs/AMD/pinned_memory.txt */
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD    0x9160
#endif /*GL_AMD_pinned_memory*/

#ifndef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 1
/* http://www.opengl.org/registry/specs/AMD/query_buffer_object.txt */
#define GL_QUERY_BUFFER_AMD                      0x9192
#define GL_QUERY_BUFFER_BINDING_AMD              0x9193
#define GL_QUERY_RESULT_NO_WAIT_AMD              0x9194
#endif /*GL_AMD_query_buffer_object*/

#ifndef GL_AMD_sample_positions
#define GL_AMD_sample_positions 1
/* http://www.opengl.org/registry/specs/AMD/sample_positions.txt */
#define GL_SUBSAMPLE_DISTANCE_AMD                0x883F
typedef void (GLAPIENTRY * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat* val);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_sample_positions*/

#ifndef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 1
/* http://www.opengl.org/registry/specs/AMD/seamless_cubemap_per_texture.txt */
#define GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB         0x884F
#endif /*GL_AMD_seamless_cubemap_per_texture*/

#ifndef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 1
/* http://www.opengl.org/registry/specs/AMD/shader_atomic_counter_ops.txt */
#endif /*GL_AMD_shader_atomic_counter_ops*/

#ifndef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 1
/* http://www.opengl.org/registry/specs/AMD/shader_ballot.txt */
#endif /*GL_AMD_shader_ballot*/

#ifndef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 1
/* http://www.opengl.org/registry/specs/AMD/shader_explicit_vertex_parameter.txt */
#endif /*GL_AMD_shader_explicit_vertex_parameter*/

#ifndef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 1
/* http://www.opengl.org/registry/specs/AMD/shader_stencil_export.txt */
#endif /*GL_AMD_shader_stencil_export*/

#ifndef GL_AMD_shader_stencil_value_export
#define GL_AMD_shader_stencil_value_export 1
/* http://www.opengl.org/registry/specs/AMD/shader_stencil_value_export.txt */
#endif /*GL_AMD_shader_stencil_value_export*/

#ifndef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 1
/* http://www.opengl.org/registry/specs/AMD/shader_trinary_minmax.txt */
#endif /*GL_AMD_shader_trinary_minmax*/

#ifndef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 1
/* http://www.opengl.org/registry/specs/AMD/sparse_texture.txt */
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD        0x00000001
#define GL_VIRTUAL_PAGE_SIZE_X_AMD               0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD               0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD               0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD           0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD        0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS       0x919A
#define GL_MIN_SPARSE_LEVEL_AMD                  0x919B
#define GL_MIN_LOD_WARNING_AMD                   0x919C
typedef void (GLAPIENTRY * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
extern PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_sparse_texture*/

#ifndef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 1
/* http://www.opengl.org/registry/specs/AMD/stencil_operation_extended.txt */
#define GL_SET_AMD                               0x874A
#define GL_REPLACE_VALUE_AMD                     0x874B
#define GL_STENCIL_OP_VALUE_AMD                  0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD             0x874D
typedef void (GLAPIENTRY * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_stencil_operation_extended*/

#ifndef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 1
/* http://www.opengl.org/registry/specs/AMD/texture_texture4.txt */
#endif /*GL_AMD_texture_texture4*/

#ifndef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 1
/* http://www.opengl.org/registry/specs/AMD/transform_feedback3_lines_triangles.txt */
#endif /*GL_AMD_transform_feedback3_lines_triangles*/

#ifndef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 1
/* http://www.opengl.org/registry/specs/AMD/transform_feedback4.txt */
#define GL_STREAM_RASTERIZATION_AMD              0x91A0
#endif /*GL_AMD_transform_feedback4*/

#ifndef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 1
/* http://www.opengl.org/registry/specs/AMD/vertex_shader_layer.txt */
#endif /*GL_AMD_vertex_shader_layer*/

#ifndef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 1
/* http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt */
#define GL_SAMPLER_BUFFER_AMD                    0x9001
#define GL_INT_SAMPLER_BUFFER_AMD                0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD       0x9003
#define GL_TESSELLATION_MODE_AMD                 0x9004
#define GL_TESSELLATION_FACTOR_AMD               0x9005
#define GL_DISCRETE_AMD                          0x9006
#define GL_CONTINUOUS_AMD                        0x9007
typedef void (GLAPIENTRY * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
typedef void (GLAPIENTRY * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
extern PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_AMD_vertex_shader_tessellator*/

#ifndef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 1
/* http://www.opengl.org/registry/specs/AMD/vertex_shader_viewport_index.txt */
#endif /*GL_AMD_vertex_shader_viewport_index*/

#ifndef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#endif /*GL_ANGLE_depth_texture*/

#ifndef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE        0x8CA6
#define GL_READ_FRAMEBUFFER_ANGLE                0x8CA8
#define GL_DRAW_FRAMEBUFFER_ANGLE                0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE        0x8CAA
typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLITFRAMEBUFFERANGLEPROC glBlitFramebufferANGLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ANGLE_framebuffer_blit*/

#ifndef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_RENDERBUFFER_SAMPLES_ANGLE            0x8CAB
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_MAX_SAMPLES_ANGLE                     0x8D57
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC glRenderbufferStorageMultisampleANGLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ANGLE_framebuffer_multisample*/

#ifndef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE     0x88FE
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWARRAYSINSTANCEDANGLEPROC glDrawArraysInstancedANGLE;
extern PFNGLDRAWELEMENTSINSTANCEDANGLEPROC glDrawElementsInstancedANGLE;
extern PFNGLVERTEXATTRIBDIVISORANGLEPROC glVertexAttribDivisorANGLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ANGLE_instanced_arrays*/

#ifndef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE          0x93A4
#endif /*GL_ANGLE_pack_reverse_row_order*/

#ifndef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_PROGRAM_BINARY_ANGLE                  0x93A6
#endif /*GL_ANGLE_program_binary*/

#ifndef GL_ANGLE_texture_compression_dxt1
#define GL_ANGLE_texture_compression_dxt1 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE        0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE       0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE       0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE       0x83F3
#endif /*GL_ANGLE_texture_compression_dxt1*/

#ifndef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE        0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE       0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE       0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE       0x83F3
#endif /*GL_ANGLE_texture_compression_dxt3*/

#ifndef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE        0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE       0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE       0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE       0x83F3
#endif /*GL_ANGLE_texture_compression_dxt5*/

#ifndef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_TEXTURE_USAGE_ANGLE                   0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE          0x93A3
#endif /*GL_ANGLE_texture_usage*/

#ifndef GL_ANGLE_timer_query
#define GL_ANGLE_timer_query 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_QUERY_COUNTER_BITS_ANGLE              0x8864
#define GL_CURRENT_QUERY_ANGLE                   0x8865
#define GL_QUERY_RESULT_ANGLE                    0x8866
#define GL_QUERY_RESULT_AVAILABLE_ANGLE          0x8867
#define GL_TIME_ELAPSED_ANGLE                    0x88BF
#define GL_TIMESTAMP_ANGLE                       0x8E28
typedef void (GLAPIENTRY * PFNGLBEGINQUERYANGLEPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETEQUERIESANGLEPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLENDQUERYANGLEPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGENQUERIESANGLEPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VANGLEPROC) (GLuint id, GLenum pname, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVANGLEPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VANGLEPROC) (GLuint id, GLenum pname, GLuint64* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVANGLEPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYIVANGLEPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISQUERYANGLEPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLQUERYCOUNTERANGLEPROC) (GLuint id, GLenum target);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINQUERYANGLEPROC glBeginQueryANGLE;
extern PFNGLDELETEQUERIESANGLEPROC glDeleteQueriesANGLE;
extern PFNGLENDQUERYANGLEPROC glEndQueryANGLE;
extern PFNGLGENQUERIESANGLEPROC glGenQueriesANGLE;
extern PFNGLGETQUERYOBJECTI64VANGLEPROC glGetQueryObjecti64vANGLE;
extern PFNGLGETQUERYOBJECTIVANGLEPROC glGetQueryObjectivANGLE;
extern PFNGLGETQUERYOBJECTUI64VANGLEPROC glGetQueryObjectui64vANGLE;
extern PFNGLGETQUERYOBJECTUIVANGLEPROC glGetQueryObjectuivANGLE;
extern PFNGLGETQUERYIVANGLEPROC glGetQueryivANGLE;
extern PFNGLISQUERYANGLEPROC glIsQueryANGLE;
extern PFNGLQUERYCOUNTERANGLEPROC glQueryCounterANGLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ANGLE_timer_query*/

#ifndef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 1
/* https://code.google.com/p/angleproject/source/browse/#git%2Fextensions */
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
typedef void (GLAPIENTRY * PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC glGetTranslatedShaderSourceANGLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ANGLE_translated_shader_source*/

#ifndef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 1
/* http://www.opengl.org/registry/specs/APPLE/aux_depth_stencil.txt */
#define GL_AUX_DEPTH_STENCIL_APPLE               0x8A14
#endif /*GL_APPLE_aux_depth_stencil*/

#ifndef GL_APPLE_client_storage
#define GL_APPLE_client_storage 1
/* http://www.opengl.org/registry/specs/APPLE/client_storage.txt */
#define GL_UNPACK_CLIENT_STORAGE_APPLE           0x85B2
#endif /*GL_APPLE_client_storage*/

#ifndef GL_APPLE_element_array
#define GL_APPLE_element_array 1
/* http://www.opengl.org/registry/specs/APPLE/element_array.txt */
#define GL_ELEMENT_ARRAY_APPLE                   0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE              0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE           0x8A0E
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
extern PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
extern PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
extern PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
extern PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_element_array*/

#ifndef GL_APPLE_fence
#define GL_APPLE_fence 1
/* http://www.opengl.org/registry/specs/APPLE/fence.txt */
#define GL_DRAW_PIXELS_APPLE                     0x8A0A
#define GL_FENCE_APPLE                           0x8A0B
typedef void (GLAPIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences);
typedef void (GLAPIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
typedef void (GLAPIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
typedef void (GLAPIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences);
typedef GLboolean (GLAPIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence);
typedef void (GLAPIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (GLAPIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
extern PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
extern PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
extern PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
extern PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
extern PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
extern PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
extern PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_fence*/

#ifndef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 1
/* http://www.opengl.org/registry/specs/APPLE/float_pixels.txt */
#define GL_HALF_APPLE                            0x140B
#define GL_COLOR_FLOAT_APPLE                     0x8A0F
#define GL_RGBA_FLOAT32_APPLE                    0x8814
#define GL_RGB_FLOAT32_APPLE                     0x8815
#define GL_ALPHA_FLOAT32_APPLE                   0x8816
#define GL_INTENSITY_FLOAT32_APPLE               0x8817
#define GL_LUMINANCE_FLOAT32_APPLE               0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE         0x8819
#define GL_RGBA_FLOAT16_APPLE                    0x881A
#define GL_RGB_FLOAT16_APPLE                     0x881B
#define GL_ALPHA_FLOAT16_APPLE                   0x881C
#define GL_INTENSITY_FLOAT16_APPLE               0x881D
#define GL_LUMINANCE_FLOAT16_APPLE               0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE         0x881F
#endif /*GL_APPLE_float_pixels*/

#ifndef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 1
/* http://www.opengl.org/registry/specs/APPLE/flush_buffer_range.txt */
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE        0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE           0x8A13
typedef void (GLAPIENTRY * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
extern PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_flush_buffer_range*/

#ifndef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 1
/* http://www.opengl.org/registry/specs/APPLE/object_purgeable.txt */
#define GL_BUFFER_OBJECT_APPLE                   0x85B3
#define GL_RELEASED_APPLE                        0x8A19
#define GL_VOLATILE_APPLE                        0x8A1A
#define GL_RETAINED_APPLE                        0x8A1B
#define GL_UNDEFINED_APPLE                       0x8A1C
#define GL_PURGEABLE_APPLE                       0x8A1D
typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint* params);
typedef GLenum (GLAPIENTRY * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef GLenum (GLAPIENTRY * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
extern PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
extern PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_object_purgeable*/

#ifndef GL_APPLE_pixel_buffer
#define GL_APPLE_pixel_buffer 1
#define GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE       0x8A10
#endif /*GL_APPLE_pixel_buffer*/

#ifndef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 1
/* http://www.opengl.org/registry/specs/APPLE/rgb_422.txt */
#define GL_UNSIGNED_SHORT_8_8_APPLE              0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE          0x85BB
#define GL_RGB_422_APPLE                         0x8A1F
#define GL_RGB_RAW_422_APPLE                     0x8A51
#endif /*GL_APPLE_rgb_422*/

#ifndef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 1
/* http://www.opengl.org/registry/specs/APPLE/row_bytes.txt */
#define GL_PACK_ROW_BYTES_APPLE                  0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE                0x8A16
#endif /*GL_APPLE_row_bytes*/

#ifndef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 1
/* http://www.opengl.org/registry/specs/APPLE/specular_vector.txt */
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE     0x85B0
#endif /*GL_APPLE_specular_vector*/

#ifndef GL_APPLE_texture_range
#define GL_APPLE_texture_range 1
/* http://www.opengl.org/registry/specs/APPLE/texture_range.txt */
#define GL_TEXTURE_STORAGE_HINT_APPLE            0x85BC
#define GL_STORAGE_PRIVATE_APPLE                 0x85BD
#define GL_STORAGE_CACHED_APPLE                  0x85BE
#define GL_STORAGE_SHARED_APPLE                  0x85BF
#define GL_TEXTURE_RANGE_LENGTH_APPLE            0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE           0x85B8
typedef void (GLAPIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, void *pointer);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
extern PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_texture_range*/

#ifndef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 1
/* http://www.opengl.org/registry/specs/APPLE/transform_hint.txt */
#define GL_TRANSFORM_HINT_APPLE                  0x85B1
#endif /*GL_APPLE_transform_hint*/

#ifndef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 1
/* http://www.opengl.org/registry/specs/APPLE/vertex_array_object.txt */
#define GL_VERTEX_ARRAY_BINDING_APPLE            0x85B5
typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
extern PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
extern PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
extern PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_vertex_array_object*/

#ifndef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 1
/* http://www.opengl.org/registry/specs/APPLE/vertex_array_range.txt */
#define GL_VERTEX_ARRAY_RANGE_APPLE              0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE       0x851E
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE       0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE  0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE      0x8521
#define GL_STORAGE_CLIENT_APPLE                  0x85B4
#define GL_STORAGE_CACHED_APPLE                  0x85BE
#define GL_STORAGE_SHARED_APPLE                  0x85BF
typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
extern PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
extern PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_vertex_array_range*/

#ifndef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 1
/* http://www.opengl.org/registry/specs/APPLE/vertex_program_evaluators.txt */
#define GL_VERTEX_ATTRIB_MAP1_APPLE              0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE              0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE         0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE        0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE        0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE       0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE         0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE        0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE        0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE       0x8A09
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
extern PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
extern PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
extern PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
extern PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
extern PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
extern PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_APPLE_vertex_program_evaluators*/

#ifndef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 1
/* http://www.opengl.org/registry/specs/APPLE/ycbcr_422.txt */
#define GL_YCBCR_422_APPLE                       0x85B9
#endif /*GL_APPLE_ycbcr_422*/

#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 1
/* http://www.opengl.org/registry/specs/ARB/arrays_of_arrays.txt */
#endif /*GL_ARB_arrays_of_arrays*/

#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance 1
/* http://www.opengl.org/registry/specs/ARB/base_instance.txt */
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_base_instance*/

#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 1
/* http://www.opengl.org/registry/specs/ARB/bindless_texture.txt */
#define GL_UNSIGNED_INT64_ARB                    0x140F
typedef GLuint64 (GLAPIENTRY * PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);
typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT* params);
typedef GLboolean (GLAPIENTRY * PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);
typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values);
typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);
typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT* v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
extern PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
extern PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
extern PFNGLGETVERTEXATTRIBLUI64VARBPROC glGetVertexAttribLui64vARB;
extern PFNGLISIMAGEHANDLERESIDENTARBPROC glIsImageHandleResidentARB;
extern PFNGLISTEXTUREHANDLERESIDENTARBPROC glIsTextureHandleResidentARB;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
extern PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
extern PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glProgramUniformHandleui64ARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glProgramUniformHandleui64vARB;
extern PFNGLUNIFORMHANDLEUI64ARBPROC glUniformHandleui64ARB;
extern PFNGLUNIFORMHANDLEUI64VARBPROC glUniformHandleui64vARB;
extern PFNGLVERTEXATTRIBL1UI64ARBPROC glVertexAttribL1ui64ARB;
extern PFNGLVERTEXATTRIBL1UI64VARBPROC glVertexAttribL1ui64vARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_bindless_texture*/

#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 1
/* http://www.opengl.org/registry/specs/ARB/blend_func_extended.txt */
#define GL_SRC1_COLOR                            0x88F9
#define GL_ONE_MINUS_SRC1_COLOR                  0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA                  0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS          0x88FC
typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar * name);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
extern PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_blend_func_extended*/

#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 1
/* http://www.opengl.org/registry/specs/ARB/buffer_storage.txt */
#define GL_MAP_READ_BIT                          0x0001
#define GL_MAP_WRITE_BIT                         0x0002
#define GL_MAP_PERSISTENT_BIT                    0x00000040
#define GL_MAP_COHERENT_BIT                      0x00000080
#define GL_DYNAMIC_STORAGE_BIT                   0x0100
#define GL_CLIENT_STORAGE_BIT                    0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT      0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE              0x821F
#define GL_BUFFER_STORAGE_FLAGS                  0x8220
typedef void (GLAPIENTRY * PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBUFFERSTORAGEPROC glBufferStorage;
extern PFNGLNAMEDBUFFERSTORAGEEXTPROC glNamedBufferStorageEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_buffer_storage*/

#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/clear_buffer_object.txt */
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLEARBUFFERDATAPROC glClearBufferData;
extern PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_clear_buffer_object*/

#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture 1
/* http://www.opengl.org/registry/specs/ARB/clear_texture.txt */
#define GL_CLEAR_TEXTURE                         0x9365
typedef void (GLAPIENTRY * PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLEARTEXIMAGEPROC glClearTexImage;
extern PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_clear_texture*/

#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control 1
/* http://www.opengl.org/registry/specs/ARB/clip_control.txt */
#define GL_LOWER_LEFT                            0x8CA1
#define GL_UPPER_LEFT                            0x8CA2
#define GL_CLIP_ORIGIN                           0x935C
#define GL_CLIP_DEPTH_MODE                       0x935D
#define GL_NEGATIVE_ONE_TO_ONE                   0x935E
#define GL_ZERO_TO_ONE                           0x935F
typedef void (GLAPIENTRY * PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLIPCONTROLPROC glClipControl;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_clip_control*/

#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event 1
/* http://www.opengl.org/registry/specs/ARB/cl_event.txt */
#define GL_SYNC_CL_EVENT_ARB                     0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB            0x8241
typedef struct _cl_context *cl_context;
typedef struct _cl_event *cl_event;
typedef GLsync (GLAPIENTRY * PFNGLCREATESYNCFROMCLEVENTARBPROC) (cl_context context, cl_event event, GLbitfield flags);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_cl_event*/

#ifndef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 1
/* http://www.opengl.org/registry/specs/ARB/color_buffer_float.txt */
#define GL_RGBA_FLOAT_MODE_ARB                   0x8820
#define GL_CLAMP_VERTEX_COLOR_ARB                0x891A
#define GL_CLAMP_FRAGMENT_COLOR_ARB              0x891B
#define GL_CLAMP_READ_COLOR_ARB                  0x891C
#define GL_FIXED_ONLY_ARB                        0x891D
typedef void (GLAPIENTRY * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLAMPCOLORARBPROC glClampColorARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_color_buffer_float*/

#ifndef GL_ARB_compatibility
#define GL_ARB_compatibility 1
/* http://www.opengl.org/registry/specs/ARB/compatibility.txt */
#endif /*GL_ARB_compatibility*/

#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 1
/* http://www.opengl.org/registry/specs/ARB/compressed_texture_pixel_storage.txt */
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH         0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT        0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH         0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE          0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH           0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT          0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH           0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE            0x912E
#endif /*GL_ARB_compressed_texture_pixel_storage*/

#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader 1
/* http://www.opengl.org/registry/specs/ARB/compute_shader.txt */
#define GL_COMPUTE_SHADER_BIT                    0x00000020
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE        0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS        0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS    0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS           0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE               0x8267
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS    0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER              0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING      0x90EF
#define GL_COMPUTE_SHADER                        0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS            0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS       0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS            0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT          0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE           0x91BF
typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_compute_shader*/

#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 1
/* http://www.opengl.org/registry/specs/ARB/compute_variable_group_size.txt */
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB      0x91BF
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB   0x9345
typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glDispatchComputeGroupSizeARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_compute_variable_group_size*/

#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 1
/* http://www.opengl.org/registry/specs/ARB/conditional_render_inverted.txt */
#define GL_QUERY_WAIT_INVERTED                   0x8E17
#define GL_QUERY_NO_WAIT_INVERTED                0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED         0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED      0x8E1A
#endif /*GL_ARB_conditional_render_inverted*/

#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 1
/* http://www.opengl.org/registry/specs/ARB/conservative_depth.txt */
#endif /*GL_ARB_conservative_depth*/

#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 1
/* http://www.opengl.org/registry/specs/ARB/copy_buffer.txt */
#define GL_COPY_READ_BUFFER                      0x8F36
#define GL_COPY_WRITE_BUFFER                     0x8F37
typedef void (GLAPIENTRY * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_copy_buffer*/

#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image 1
/* http://www.opengl.org/registry/specs/ARB/copy_image.txt */
typedef void (GLAPIENTRY * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_copy_image*/

#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance 1
/* http://www.opengl.org/registry/specs/ARB/cull_distance.txt */
#define GL_MAX_CULL_DISTANCES                    0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES  0x82FA
#endif /*GL_ARB_cull_distance*/

#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output 1
/* http://www.opengl.org/registry/specs/ARB/debug_output.txt */
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB          0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB  0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_ARB           0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB         0x8245
#define GL_DEBUG_SOURCE_API_ARB                  0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB        0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB      0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB          0x8249
#define GL_DEBUG_SOURCE_APPLICATION_ARB          0x824A
#define GL_DEBUG_SOURCE_OTHER_ARB                0x824B
#define GL_DEBUG_TYPE_ERROR_ARB                  0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB    0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB     0x824E
#define GL_DEBUG_TYPE_PORTABILITY_ARB            0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_ARB            0x8250
#define GL_DEBUG_TYPE_OTHER_ARB                  0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB          0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB         0x9144
#define GL_DEBUG_LOGGED_MESSAGES_ARB             0x9145
#define GL_DEBUG_SEVERITY_HIGH_ARB               0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_ARB             0x9147
#define GL_DEBUG_SEVERITY_LOW_ARB                0x9148
typedef void (GLAPIENTRY *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
extern PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
extern PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_debug_output*/

#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 1
/* http://www.opengl.org/registry/specs/ARB/depth_buffer_float.txt */
#define GL_DEPTH_COMPONENT32F                    0x8CAC
#define GL_DEPTH32F_STENCIL8                     0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV        0x8DAD
#endif /*GL_ARB_depth_buffer_float*/

#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 1
/* http://www.opengl.org/registry/specs/ARB/depth_clamp.txt */
#define GL_DEPTH_CLAMP                           0x864F
#endif /*GL_ARB_depth_clamp*/

#ifndef GL_ARB_depth_texture
#define GL_ARB_depth_texture 1
/* http://www.opengl.org/registry/specs/ARB/depth_texture.txt */
#define GL_DEPTH_COMPONENT16_ARB                 0x81A5
#define GL_DEPTH_COMPONENT24_ARB                 0x81A6
#define GL_DEPTH_COMPONENT32_ARB                 0x81A7
#define GL_TEXTURE_DEPTH_SIZE_ARB                0x884A
#define GL_DEPTH_TEXTURE_MODE_ARB                0x884B
#endif /*GL_ARB_depth_texture*/

#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control 1
/* http://www.opengl.org/registry/specs/ARB/derivative_control.txt */
#endif /*GL_ARB_derivative_control*/

#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 1
/* http://www.opengl.org/registry/specs/ARB/direct_state_access.txt */
#define GL_TEXTURE_TARGET                        0x1006
#define GL_QUERY_TARGET                          0x82EA
typedef void (GLAPIENTRY * PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture);
typedef void (GLAPIENTRY * PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (GLAPIENTRY * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint* buffers);
typedef void (GLAPIENTRY * PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers);
typedef void (GLAPIENTRY * PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines);
typedef void (GLAPIENTRY * PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (GLAPIENTRY * PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint* samplers);
typedef void (GLAPIENTRY * PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint* textures);
typedef void (GLAPIENTRY * PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays);
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAPIENTRY * PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture);
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void** params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64* param);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
typedef void (GLAPIENTRY * PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access);
typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum mode);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum mode);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat* param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint* param);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef GLboolean (GLAPIENTRY * PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
extern PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
extern PFNGLCREATEBUFFERSPROC glCreateBuffers;
extern PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
extern PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
extern PFNGLCREATEQUERIESPROC glCreateQueries;
extern PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
extern PFNGLCREATESAMPLERSPROC glCreateSamplers;
extern PFNGLCREATETEXTURESPROC glCreateTextures;
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
extern PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
extern PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
extern PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
extern PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
extern PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
extern PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
extern PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
extern PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
extern PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
extern PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
extern PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
extern PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
extern PFNGLTEXTUREBUFFERPROC glTextureBuffer;
extern PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
extern PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
extern PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
extern PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
extern PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
extern PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
extern PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
extern PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
extern PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
extern PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
extern PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
extern PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
extern PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
extern PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_direct_state_access*/

#ifndef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 1
/* http://www.opengl.org/registry/specs/ARB/draw_buffers.txt */
#define GL_MAX_DRAW_BUFFERS_ARB                  0x8824
#define GL_DRAW_BUFFER0_ARB                      0x8825
#define GL_DRAW_BUFFER1_ARB                      0x8826
#define GL_DRAW_BUFFER2_ARB                      0x8827
#define GL_DRAW_BUFFER3_ARB                      0x8828
#define GL_DRAW_BUFFER4_ARB                      0x8829
#define GL_DRAW_BUFFER5_ARB                      0x882A
#define GL_DRAW_BUFFER6_ARB                      0x882B
#define GL_DRAW_BUFFER7_ARB                      0x882C
#define GL_DRAW_BUFFER8_ARB                      0x882D
#define GL_DRAW_BUFFER9_ARB                      0x882E
#define GL_DRAW_BUFFER10_ARB                     0x882F
#define GL_DRAW_BUFFER11_ARB                     0x8830
#define GL_DRAW_BUFFER12_ARB                     0x8831
#define GL_DRAW_BUFFER13_ARB                     0x8832
#define GL_DRAW_BUFFER14_ARB                     0x8833
#define GL_DRAW_BUFFER15_ARB                     0x8834
typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum* bufs);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_draw_buffers*/

#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 1
/* http://www.opengl.org/registry/specs/ARB/draw_buffers_blend.txt */
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAPIENTRY * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
extern PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
extern PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
extern PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_draw_buffers_blend*/

#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 1
/* http://www.opengl.org/registry/specs/ARB/draw_elements_base_vertex.txt */
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex);
typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_draw_elements_base_vertex*/

#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 1
/* http://www.opengl.org/registry/specs/ARB/draw_indirect.txt */
#define GL_DRAW_INDIRECT_BUFFER                  0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING          0x8F43
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
extern PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_draw_indirect*/

#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 1
/* http://www.opengl.org/registry/specs/ARB/draw_instanced.txt */
#endif /*GL_ARB_draw_instanced*/

#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 1
/* http://www.opengl.org/registry/specs/ARB/enhanced_layouts.txt */
#define GL_LOCATION_COMPONENT                    0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX       0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE      0x934C
#endif /*GL_ARB_enhanced_layouts*/

#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 1
/* http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt */
#define GL_FIXED                                 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE        0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT      0x8B9B
#define GL_RGB565                                0x8D62
#define GL_LOW_FLOAT                             0x8DF0
#define GL_MEDIUM_FLOAT                          0x8DF1
#define GL_HIGH_FLOAT                            0x8DF2
#define GL_LOW_INT                               0x8DF3
#define GL_MEDIUM_INT                            0x8DF4
#define GL_HIGH_INT                              0x8DF5
#define GL_SHADER_BINARY_FORMATS                 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS             0x8DF9
#define GL_SHADER_COMPILER                       0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS            0x8DFB
#define GL_MAX_VARYING_VECTORS                   0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS          0x8DFD
typedef int GLfixed;
typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFPROC) (GLclampf d);
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);
typedef void (GLAPIENTRY * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision);
typedef void (GLAPIENTRY * PFNGLRELEASESHADERCOMPILERPROC) (void);
typedef void (GLAPIENTRY * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLEARDEPTHFPROC glClearDepthf;
extern PFNGLDEPTHRANGEFPROC glDepthRangef;
extern PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
extern PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
extern PFNGLSHADERBINARYPROC glShaderBinary;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_ES2_compatibility*/

#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 1
/* http://www.opengl.org/registry/specs/ARB/ES3_1_compatibility.txt */
typedef void (GLAPIENTRY * PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_ES3_1_compatibility*/

#ifndef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 1
/* http://www.opengl.org/registry/specs/ARB/ES3_2_compatibility.txt */
#define GL_PRIMITIVE_BOUNDING_BOX_ARB            0x92BE
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB      0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
typedef void (GLAPIENTRY * PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_ES3_2_compatibility*/

#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 1
/* http://www.opengl.org/registry/specs/ARB/ES3_compatibility.txt */
#define GL_TEXTURE_IMMUTABLE_LEVELS              0x82DF
#define GL_PRIMITIVE_RESTART_FIXED_INDEX         0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE       0x8D6A
#define GL_MAX_ELEMENT_INDEX                     0x8D6B
#define GL_COMPRESSED_R11_EAC                    0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC             0x9271
#define GL_COMPRESSED_RG11_EAC                   0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC            0x9273
#define GL_COMPRESSED_RGB8_ETC2                  0x9274
#define GL_COMPRESSED_SRGB8_ETC2                 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC             0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC      0x9279
#endif /*GL_ARB_ES3_compatibility*/

#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 1
/* http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt */
#endif /*GL_ARB_explicit_attrib_location*/

#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 1
/* http://www.opengl.org/registry/specs/ARB/explicit_uniform_location.txt */
#define GL_MAX_UNIFORM_LOCATIONS                 0x826E
#endif /*GL_ARB_explicit_uniform_location*/

#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 1
/* http://www.opengl.org/registry/specs/ARB/fragment_coord_conventions.txt */
#endif /*GL_ARB_fragment_coord_conventions*/

#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 1
/* http://www.opengl.org/registry/specs/ARB/fragment_layer_viewport.txt */
#endif /*GL_ARB_fragment_layer_viewport*/

#ifndef GL_ARB_fragment_program
#define GL_ARB_fragment_program 1
/* http://www.opengl.org/registry/specs/ARB/fragment_program.txt */
#define GL_FRAGMENT_PROGRAM_ARB                  0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB          0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB          0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB          0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB   0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB   0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB   0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB      0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB      0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB      0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_MAX_TEXTURE_COORDS_ARB                0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB           0x8872
#endif /*GL_ARB_fragment_program*/

#ifndef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 1
/* http://www.opengl.org/registry/specs/ARB/fragment_program_shadow.txt */
#endif /*GL_ARB_fragment_program_shadow*/

#ifndef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 1
/* http://www.opengl.org/registry/specs/ARB/fragment_shader.txt */
#define GL_FRAGMENT_SHADER_ARB                   0x8B30
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB   0x8B49
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB   0x8B8B
#endif /*GL_ARB_fragment_shader*/

#ifndef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 1
/* http://www.opengl.org/registry/specs/ARB/fragment_shader_interlock.txt */
#endif /*GL_ARB_fragment_shader_interlock*/

#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 1
/* http://www.opengl.org/registry/specs/ARB/framebuffer_no_attachments.txt */
#define GL_FRAMEBUFFER_DEFAULT_WIDTH             0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT            0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS            0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES           0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH                 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT                0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS                0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES               0x9318
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_framebuffer_no_attachments*/

#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 1
/* http://www.opengl.org/registry/specs/ARB/framebuffer_object.txt */
#define GL_INVALID_FRAMEBUFFER_OPERATION         0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE       0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE     0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE      0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE     0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE     0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE   0x8217
#define GL_FRAMEBUFFER_DEFAULT                   0x8218
#define GL_FRAMEBUFFER_UNDEFINED                 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT              0x821A
#define GL_INDEX                                 0x8222
#define GL_MAX_RENDERBUFFER_SIZE                 0x84E8
#define GL_DEPTH_STENCIL                         0x84F9
#define GL_UNSIGNED_INT_24_8                     0x84FA
#define GL_DEPTH24_STENCIL8                      0x88F0
#define GL_TEXTURE_STENCIL_SIZE                  0x88F1
#define GL_UNSIGNED_NORMALIZED                   0x8C17
#define GL_SRGB                                  0x8C40
#define GL_DRAW_FRAMEBUFFER_BINDING              0x8CA6
#define GL_FRAMEBUFFER_BINDING                   0x8CA6
#define GL_RENDERBUFFER_BINDING                  0x8CA7
#define GL_READ_FRAMEBUFFER                      0x8CA8
#define GL_DRAW_FRAMEBUFFER                      0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING              0x8CAA
#define GL_RENDERBUFFER_SAMPLES                  0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE    0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME    0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL  0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER  0x8CD4
#define GL_FRAMEBUFFER_COMPLETE                  0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT     0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER    0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER    0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED               0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS                 0x8CDF
#define GL_COLOR_ATTACHMENT0                     0x8CE0
#define GL_COLOR_ATTACHMENT1                     0x8CE1
#define GL_COLOR_ATTACHMENT2                     0x8CE2
#define GL_COLOR_ATTACHMENT3                     0x8CE3
#define GL_COLOR_ATTACHMENT4                     0x8CE4
#define GL_COLOR_ATTACHMENT5                     0x8CE5
#define GL_COLOR_ATTACHMENT6                     0x8CE6
#define GL_COLOR_ATTACHMENT7                     0x8CE7
#define GL_COLOR_ATTACHMENT8                     0x8CE8
#define GL_COLOR_ATTACHMENT9                     0x8CE9
#define GL_COLOR_ATTACHMENT10                    0x8CEA
#define GL_COLOR_ATTACHMENT11                    0x8CEB
#define GL_COLOR_ATTACHMENT12                    0x8CEC
#define GL_COLOR_ATTACHMENT13                    0x8CED
#define GL_COLOR_ATTACHMENT14                    0x8CEE
#define GL_COLOR_ATTACHMENT15                    0x8CEF
#define GL_DEPTH_ATTACHMENT                      0x8D00
#define GL_STENCIL_ATTACHMENT                    0x8D20
#define GL_FRAMEBUFFER                           0x8D40
#define GL_RENDERBUFFER                          0x8D41
#define GL_RENDERBUFFER_WIDTH                    0x8D42
#define GL_RENDERBUFFER_HEIGHT                   0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT          0x8D44
#define GL_STENCIL_INDEX1                        0x8D46
#define GL_STENCIL_INDEX4                        0x8D47
#define GL_STENCIL_INDEX8                        0x8D48
#define GL_STENCIL_INDEX16                       0x8D49
#define GL_RENDERBUFFER_RED_SIZE                 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE               0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE                0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE               0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE               0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE             0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE    0x8D56
#define GL_MAX_SAMPLES                           0x8D57
typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint* framebuffers);
typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint* renderbuffers);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer);
typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers);
typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
extern PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
extern PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
extern PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
extern PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
extern PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
extern PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
extern PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
extern PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
extern PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
extern PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_framebuffer_object*/

#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 1
/* http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt */
#define GL_FRAMEBUFFER_SRGB                      0x8DB9
#endif /*GL_ARB_framebuffer_sRGB*/

#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 1
/* http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt */
#define GL_LINES_ADJACENCY_ARB                   0xA
#define GL_LINE_STRIP_ADJACENCY_ARB              0xB
#define GL_TRIANGLES_ADJACENCY_ARB               0xC
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB          0xD
#define GL_PROGRAM_POINT_SIZE_ARB                0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB  0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER  0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB    0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_GEOMETRY_SHADER_ARB                   0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB             0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB               0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB              0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB   0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB     0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB   0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB      0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
extern PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_geometry_shader4*/

#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 1
/* http://www.opengl.org/registry/specs/ARB/get_program_binary.txt */
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT       0x8257
#define GL_PROGRAM_BINARY_LENGTH                 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS            0x87FE
#define GL_PROGRAM_BINARY_FORMATS                0x87FF
typedef void (GLAPIENTRY * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary);
typedef void (GLAPIENTRY * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
extern PFNGLPROGRAMBINARYPROC glProgramBinary;
extern PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_get_program_binary*/

#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 1
/* http://www.opengl.org/registry/specs/ARB/get_texture_sub_image.txt */
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef void (GLAPIENTRY * PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
extern PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_get_texture_sub_image*/

#ifndef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 1
/* http://www.opengl.org/registry/specs/ARB/gl_spirv.txt */
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB       0x9551
#define GL_SPIR_V_BINARY_ARB                     0x9552
typedef void (GLAPIENTRY * PFNGLSPECIALIZESHADERARBPROC) (GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSPECIALIZESHADERARBPROC glSpecializeShaderARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_gl_spirv*/

#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 1
/* http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt */
#define GL_GEOMETRY_SHADER_INVOCATIONS           0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS       0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET     0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET     0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS    0x8E5D
#define GL_MAX_VERTEX_STREAMS                    0x8E71
#endif /*GL_ARB_gpu_shader5*/

#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 1
/* http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt */
#define GL_DOUBLE_MAT2                           0x8F46
#define GL_DOUBLE_MAT3                           0x8F47
#define GL_DOUBLE_MAT4                           0x8F48
#define GL_DOUBLE_MAT2x3                         0x8F49
#define GL_DOUBLE_MAT2x4                         0x8F4A
#define GL_DOUBLE_MAT3x2                         0x8F4B
#define GL_DOUBLE_MAT3x4                         0x8F4C
#define GL_DOUBLE_MAT4x2                         0x8F4D
#define GL_DOUBLE_MAT4x3                         0x8F4E
#define GL_DOUBLE_VEC2                           0x8FFC
#define GL_DOUBLE_VEC3                           0x8FFD
#define GL_DOUBLE_VEC4                           0x8FFE
typedef void (GLAPIENTRY * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
typedef void (GLAPIENTRY * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETUNIFORMDVPROC glGetUniformdv;
extern PFNGLUNIFORM1DPROC glUniform1d;
extern PFNGLUNIFORM1DVPROC glUniform1dv;
extern PFNGLUNIFORM2DPROC glUniform2d;
extern PFNGLUNIFORM2DVPROC glUniform2dv;
extern PFNGLUNIFORM3DPROC glUniform3d;
extern PFNGLUNIFORM3DVPROC glUniform3dv;
extern PFNGLUNIFORM4DPROC glUniform4d;
extern PFNGLUNIFORM4DVPROC glUniform4dv;
extern PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_gpu_shader_fp64*/

#ifndef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 1
/* http://www.opengl.org/registry/specs/ARB/gpu_shader_int64.txt */
#define GL_INT64_ARB                             0x140E
#define GL_UNSIGNED_INT64_ARB                    0x140F
#define GL_INT64_VEC2_ARB                        0x8FE9
#define GL_INT64_VEC3_ARB                        0x8FEA
#define GL_INT64_VEC4_ARB                        0x8FEB
#define GL_UNSIGNED_INT64_VEC2_ARB               0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB               0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB               0x8FF7
typedef void (GLAPIENTRY * PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x);
typedef void (GLAPIENTRY * PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y);
typedef void (GLAPIENTRY * PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (GLAPIENTRY * PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (GLAPIENTRY * PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETUNIFORMI64VARBPROC glGetUniformi64vARB;
extern PFNGLGETUNIFORMUI64VARBPROC glGetUniformui64vARB;
extern PFNGLGETNUNIFORMI64VARBPROC glGetnUniformi64vARB;
extern PFNGLGETNUNIFORMUI64VARBPROC glGetnUniformui64vARB;
extern PFNGLPROGRAMUNIFORM1I64ARBPROC glProgramUniform1i64ARB;
extern PFNGLPROGRAMUNIFORM1I64VARBPROC glProgramUniform1i64vARB;
extern PFNGLPROGRAMUNIFORM1UI64ARBPROC glProgramUniform1ui64ARB;
extern PFNGLPROGRAMUNIFORM1UI64VARBPROC glProgramUniform1ui64vARB;
extern PFNGLPROGRAMUNIFORM2I64ARBPROC glProgramUniform2i64ARB;
extern PFNGLPROGRAMUNIFORM2I64VARBPROC glProgramUniform2i64vARB;
extern PFNGLPROGRAMUNIFORM2UI64ARBPROC glProgramUniform2ui64ARB;
extern PFNGLPROGRAMUNIFORM2UI64VARBPROC glProgramUniform2ui64vARB;
extern PFNGLPROGRAMUNIFORM3I64ARBPROC glProgramUniform3i64ARB;
extern PFNGLPROGRAMUNIFORM3I64VARBPROC glProgramUniform3i64vARB;
extern PFNGLPROGRAMUNIFORM3UI64ARBPROC glProgramUniform3ui64ARB;
extern PFNGLPROGRAMUNIFORM3UI64VARBPROC glProgramUniform3ui64vARB;
extern PFNGLPROGRAMUNIFORM4I64ARBPROC glProgramUniform4i64ARB;
extern PFNGLPROGRAMUNIFORM4I64VARBPROC glProgramUniform4i64vARB;
extern PFNGLPROGRAMUNIFORM4UI64ARBPROC glProgramUniform4ui64ARB;
extern PFNGLPROGRAMUNIFORM4UI64VARBPROC glProgramUniform4ui64vARB;
extern PFNGLUNIFORM1I64ARBPROC glUniform1i64ARB;
extern PFNGLUNIFORM1I64VARBPROC glUniform1i64vARB;
extern PFNGLUNIFORM1UI64ARBPROC glUniform1ui64ARB;
extern PFNGLUNIFORM1UI64VARBPROC glUniform1ui64vARB;
extern PFNGLUNIFORM2I64ARBPROC glUniform2i64ARB;
extern PFNGLUNIFORM2I64VARBPROC glUniform2i64vARB;
extern PFNGLUNIFORM2UI64ARBPROC glUniform2ui64ARB;
extern PFNGLUNIFORM2UI64VARBPROC glUniform2ui64vARB;
extern PFNGLUNIFORM3I64ARBPROC glUniform3i64ARB;
extern PFNGLUNIFORM3I64VARBPROC glUniform3i64vARB;
extern PFNGLUNIFORM3UI64ARBPROC glUniform3ui64ARB;
extern PFNGLUNIFORM3UI64VARBPROC glUniform3ui64vARB;
extern PFNGLUNIFORM4I64ARBPROC glUniform4i64ARB;
extern PFNGLUNIFORM4I64VARBPROC glUniform4i64vARB;
extern PFNGLUNIFORM4UI64ARBPROC glUniform4ui64ARB;
extern PFNGLUNIFORM4UI64VARBPROC glUniform4ui64vARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_gpu_shader_int64*/

#ifndef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 1
/* http://www.opengl.org/registry/specs/ARB/half_float_pixel.txt */
#define GL_HALF_FLOAT_ARB                        0x140B
#endif /*GL_ARB_half_float_pixel*/

#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 1
/* http://www.opengl.org/registry/specs/ARB/half_float_vertex.txt */
#define GL_HALF_FLOAT                            0x140B
#endif /*GL_ARB_half_float_vertex*/

#ifndef GL_ARB_imaging
#define GL_ARB_imaging 1
#define GL_CONSTANT_COLOR                        0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR              0x8002
#define GL_CONSTANT_ALPHA                        0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA              0x8004
#define GL_BLEND_COLOR                           0x8005
#define GL_FUNC_ADD                              0x8006
#define GL_MIN                                   0x8007
#define GL_MAX                                   0x8008
#define GL_BLEND_EQUATION                        0x8009
#define GL_FUNC_SUBTRACT                         0x800A
#define GL_FUNC_REVERSE_SUBTRACT                 0x800B
#define GL_CONVOLUTION_1D                        0x8010
#define GL_CONVOLUTION_2D                        0x8011
#define GL_SEPARABLE_2D                          0x8012
#define GL_CONVOLUTION_BORDER_MODE               0x8013
#define GL_CONVOLUTION_FILTER_SCALE              0x8014
#define GL_CONVOLUTION_FILTER_BIAS               0x8015
#define GL_REDUCE                                0x8016
#define GL_CONVOLUTION_FORMAT                    0x8017
#define GL_CONVOLUTION_WIDTH                     0x8018
#define GL_CONVOLUTION_HEIGHT                    0x8019
#define GL_MAX_CONVOLUTION_WIDTH                 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT                0x801B
#define GL_POST_CONVOLUTION_RED_SCALE            0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE          0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE           0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE          0x801F
#define GL_POST_CONVOLUTION_RED_BIAS             0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS           0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS            0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS           0x8023
#define GL_HISTOGRAM                             0x8024
#define GL_PROXY_HISTOGRAM                       0x8025
#define GL_HISTOGRAM_WIDTH                       0x8026
#define GL_HISTOGRAM_FORMAT                      0x8027
#define GL_HISTOGRAM_RED_SIZE                    0x8028
#define GL_HISTOGRAM_GREEN_SIZE                  0x8029
#define GL_HISTOGRAM_BLUE_SIZE                   0x802A
#define GL_HISTOGRAM_ALPHA_SIZE                  0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE              0x802C
#define GL_HISTOGRAM_SINK                        0x802D
#define GL_MINMAX                                0x802E
#define GL_MINMAX_FORMAT                         0x802F
#define GL_MINMAX_SINK                           0x8030
#define GL_TABLE_TOO_LARGE                       0x8031
#define GL_COLOR_MATRIX                          0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH              0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH          0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE           0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE         0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE          0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE         0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS            0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS          0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS           0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS          0x80BB
#define GL_COLOR_TABLE                           0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE          0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE         0x80D2
#define GL_PROXY_COLOR_TABLE                     0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE    0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE   0x80D5
#define GL_COLOR_TABLE_SCALE                     0x80D6
#define GL_COLOR_TABLE_BIAS                      0x80D7
#define GL_COLOR_TABLE_FORMAT                    0x80D8
#define GL_COLOR_TABLE_WIDTH                     0x80D9
#define GL_COLOR_TABLE_RED_SIZE                  0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE                0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE                 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE                0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE            0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE            0x80DF
#define GL_IGNORE_BORDER                         0x8150
#define GL_CONSTANT_BORDER                       0x8151
#define GL_WRAP_BORDER                           0x8152
#define GL_REPLICATE_BORDER                      0x8153
#define GL_CONVOLUTION_BORDER_COLOR              0x8154
typedef void (GLAPIENTRY * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, void *table);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAPIENTRY * PFNGLRESETMINMAXPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, void *image);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (GLAPIENTRY * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum types, void *values);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORTABLEPROC glColorTable;
extern PFNGLCOLORSUBTABLEPROC glColorSubTable;
extern PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
extern PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
extern PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
extern PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
extern PFNGLGETCOLORTABLEPROC glGetColorTable;
extern PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
extern PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
extern PFNGLHISTOGRAMPROC glHistogram;
extern PFNGLRESETHISTOGRAMPROC glResetHistogram;
extern PFNGLGETHISTOGRAMPROC glGetHistogram;
extern PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
extern PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
extern PFNGLMINMAXPROC glMinmax;
extern PFNGLRESETMINMAXPROC glResetMinmax;
extern PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
extern PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
extern PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
extern PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
extern PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
extern PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
extern PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
extern PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
extern PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
extern PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
extern PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
extern PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
extern PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
extern PFNGLGETMINMAXPROC glGetMinmax;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_imaging*/

#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 1
/* http://www.opengl.org/registry/specs/ARB/indirect_parameters.txt */
#define GL_PARAMETER_BUFFER_ARB                  0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB          0x80EF
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glMultiDrawArraysIndirectCountARB;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glMultiDrawElementsIndirectCountARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_indirect_parameters*/

#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 1
/* http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt */
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB       0x88FE
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_instanced_arrays*/

#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 1
/* http://www.opengl.org/registry/specs/ARB/internalformat_query.txt */
#define GL_NUM_SAMPLE_COUNTS                     0x9380
typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_internalformat_query*/

#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 1
/* http://www.opengl.org/registry/specs/ARB/internalformat_query2.txt */
#define GL_INTERNALFORMAT_SUPPORTED              0x826F
#define GL_INTERNALFORMAT_PREFERRED              0x8270
#define GL_INTERNALFORMAT_RED_SIZE               0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE             0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE              0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE             0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE             0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE           0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE            0x8277
#define GL_INTERNALFORMAT_RED_TYPE               0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE             0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE              0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE             0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE             0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE           0x827D
#define GL_MAX_WIDTH                             0x827E
#define GL_MAX_HEIGHT                            0x827F
#define GL_MAX_DEPTH                             0x8280
#define GL_MAX_LAYERS                            0x8281
#define GL_MAX_COMBINED_DIMENSIONS               0x8282
#define GL_COLOR_COMPONENTS                      0x8283
#define GL_DEPTH_COMPONENTS                      0x8284
#define GL_STENCIL_COMPONENTS                    0x8285
#define GL_COLOR_RENDERABLE                      0x8286
#define GL_DEPTH_RENDERABLE                      0x8287
#define GL_STENCIL_RENDERABLE                    0x8288
#define GL_FRAMEBUFFER_RENDERABLE                0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED        0x828A
#define GL_FRAMEBUFFER_BLEND                     0x828B
#define GL_READ_PIXELS                           0x828C
#define GL_READ_PIXELS_FORMAT                    0x828D
#define GL_READ_PIXELS_TYPE                      0x828E
#define GL_TEXTURE_IMAGE_FORMAT                  0x828F
#define GL_TEXTURE_IMAGE_TYPE                    0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT              0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE                0x8292
#define GL_MIPMAP                                0x8293
#define GL_MANUAL_GENERATE_MIPMAP                0x8294
#define GL_AUTO_GENERATE_MIPMAP                  0x8295
#define GL_COLOR_ENCODING                        0x8296
#define GL_SRGB_READ                             0x8297
#define GL_SRGB_WRITE                            0x8298
#define GL_SRGB_DECODE_ARB                       0x8299
#define GL_FILTER                                0x829A
#define GL_VERTEX_TEXTURE                        0x829B
#define GL_TESS_CONTROL_TEXTURE                  0x829C
#define GL_TESS_EVALUATION_TEXTURE               0x829D
#define GL_GEOMETRY_TEXTURE                      0x829E
#define GL_FRAGMENT_TEXTURE                      0x829F
#define GL_COMPUTE_TEXTURE                       0x82A0
#define GL_TEXTURE_SHADOW                        0x82A1
#define GL_TEXTURE_GATHER                        0x82A2
#define GL_TEXTURE_GATHER_SHADOW                 0x82A3
#define GL_SHADER_IMAGE_LOAD                     0x82A4
#define GL_SHADER_IMAGE_STORE                    0x82A5
#define GL_SHADER_IMAGE_ATOMIC                   0x82A6
#define GL_IMAGE_TEXEL_SIZE                      0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS             0x82A8
#define GL_IMAGE_PIXEL_FORMAT                    0x82A9
#define GL_IMAGE_PIXEL_TYPE                      0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST   0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE  0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH        0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT       0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE         0x82B3
#define GL_CLEAR_BUFFER                          0x82B4
#define GL_TEXTURE_VIEW                          0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS              0x82B6
#define GL_FULL_SUPPORT                          0x82B7
#define GL_CAVEAT_SUPPORT                        0x82B8
#define GL_IMAGE_CLASS_4_X_32                    0x82B9
#define GL_IMAGE_CLASS_2_X_32                    0x82BA
#define GL_IMAGE_CLASS_1_X_32                    0x82BB
#define GL_IMAGE_CLASS_4_X_16                    0x82BC
#define GL_IMAGE_CLASS_2_X_16                    0x82BD
#define GL_IMAGE_CLASS_1_X_16                    0x82BE
#define GL_IMAGE_CLASS_4_X_8                     0x82BF
#define GL_IMAGE_CLASS_2_X_8                     0x82C0
#define GL_IMAGE_CLASS_1_X_8                     0x82C1
#define GL_IMAGE_CLASS_11_11_10                  0x82C2
#define GL_IMAGE_CLASS_10_10_10_2                0x82C3
#define GL_VIEW_CLASS_128_BITS                   0x82C4
#define GL_VIEW_CLASS_96_BITS                    0x82C5
#define GL_VIEW_CLASS_64_BITS                    0x82C6
#define GL_VIEW_CLASS_48_BITS                    0x82C7
#define GL_VIEW_CLASS_32_BITS                    0x82C8
#define GL_VIEW_CLASS_24_BITS                    0x82C9
#define GL_VIEW_CLASS_16_BITS                    0x82CA
#define GL_VIEW_CLASS_8_BITS                     0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB              0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA             0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA             0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA             0x82CF
#define GL_VIEW_CLASS_RGTC1_RED                  0x82D0
#define GL_VIEW_CLASS_RGTC2_RG                   0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM                 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT                 0x82D3
typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_internalformat_query2*/

#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 1
/* http://www.opengl.org/registry/specs/ARB/invalidate_subdata.txt */
typedef void (GLAPIENTRY * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAPIENTRY * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments);
typedef void (GLAPIENTRY * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
extern PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
extern PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_invalidate_subdata*/

#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 1
/* http://www.opengl.org/registry/specs/ARB/map_buffer_alignment.txt */
#define GL_MIN_MAP_BUFFER_ALIGNMENT              0x90BC
#endif /*GL_ARB_map_buffer_alignment*/

#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 1
/* http://www.opengl.org/registry/specs/ARB/map_buffer_range.txt */
#define GL_MAP_READ_BIT                          0x0001
#define GL_MAP_WRITE_BIT                         0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT              0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT             0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT                0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT                0x0020
typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void * (GLAPIENTRY * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
extern PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_map_buffer_range*/

#ifndef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 1
/* http://oss.sgi.com/projects/ogl-sample/registry/ARB/matrix_palette.txt */
#define GL_MATRIX_PALETTE_ARB                    0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB    0x8841
#define GL_MAX_PALETTE_MATRICES_ARB              0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB            0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB                0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB              0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB           0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB           0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB         0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB        0x8849
typedef void (GLAPIENTRY * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
typedef void (GLAPIENTRY * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, GLubyte *indices);
typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, GLushort *indices);
typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, GLuint *indices);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
extern PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
extern PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
extern PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
extern PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_matrix_palette*/

#ifndef GL_ARB_multisample
#define GL_ARB_multisample 1
/* http://www.opengl.org/registry/specs/ARB/multisample.txt */
#define GL_MULTISAMPLE_ARB                       0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB          0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_ARB               0x809F
#define GL_SAMPLE_COVERAGE_ARB                   0x80A0
#define GL_SAMPLE_BUFFERS_ARB                    0x80A8
#define GL_SAMPLES_ARB                           0x80A9
#define GL_SAMPLE_COVERAGE_VALUE_ARB             0x80AA
#define GL_SAMPLE_COVERAGE_INVERT_ARB            0x80AB
#define GL_MULTISAMPLE_BIT_ARB                   0x20000000
typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_multisample*/

#ifndef GL_ARB_multitexture
#define GL_ARB_multitexture 1
/* http://oss.sgi.com/projects/ogl-sample/registry/ARB/multitexture.txt */
#define GL_TEXTURE0_ARB                          0x84C0
#define GL_TEXTURE1_ARB                          0x84C1
#define GL_TEXTURE2_ARB                          0x84C2
#define GL_TEXTURE3_ARB                          0x84C3
#define GL_TEXTURE4_ARB                          0x84C4
#define GL_TEXTURE5_ARB                          0x84C5
#define GL_TEXTURE6_ARB                          0x84C6
#define GL_TEXTURE7_ARB                          0x84C7
#define GL_TEXTURE8_ARB                          0x84C8
#define GL_TEXTURE9_ARB                          0x84C9
#define GL_TEXTURE10_ARB                         0x84CA
#define GL_TEXTURE11_ARB                         0x84CB
#define GL_TEXTURE12_ARB                         0x84CC
#define GL_TEXTURE13_ARB                         0x84CD
#define GL_TEXTURE14_ARB                         0x84CE
#define GL_TEXTURE15_ARB                         0x84CF
#define GL_TEXTURE16_ARB                         0x84D0
#define GL_TEXTURE17_ARB                         0x84D1
#define GL_TEXTURE18_ARB                         0x84D2
#define GL_TEXTURE19_ARB                         0x84D3
#define GL_TEXTURE20_ARB                         0x84D4
#define GL_TEXTURE21_ARB                         0x84D5
#define GL_TEXTURE22_ARB                         0x84D6
#define GL_TEXTURE23_ARB                         0x84D7
#define GL_TEXTURE24_ARB                         0x84D8
#define GL_TEXTURE25_ARB                         0x84D9
#define GL_TEXTURE26_ARB                         0x84DA
#define GL_TEXTURE27_ARB                         0x84DB
#define GL_TEXTURE28_ARB                         0x84DC
#define GL_TEXTURE29_ARB                         0x84DD
#define GL_TEXTURE30_ARB                         0x84DE
#define GL_TEXTURE31_ARB                         0x84DF
#define GL_ACTIVE_TEXTURE_ARB                    0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE_ARB             0x84E1
#define GL_MAX_TEXTURE_UNITS_ARB                 0x84E2
typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
extern PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
extern PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
extern PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
extern PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
extern PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
extern PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
extern PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
extern PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
extern PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
extern PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
extern PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
extern PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
extern PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
extern PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
extern PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
extern PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
extern PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
extern PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
extern PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
extern PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
extern PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
extern PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
extern PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
extern PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
extern PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
extern PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
extern PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
extern PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
extern PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
extern PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
extern PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
extern PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
extern PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_multitexture*/

#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind 1
/* http://www.opengl.org/registry/specs/ARB/multi_bind.txt */
typedef void (GLAPIENTRY * PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures);
typedef void (GLAPIENTRY * PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint* samplers);
typedef void (GLAPIENTRY * PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures);
typedef void (GLAPIENTRY * PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
extern PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
extern PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
extern PFNGLBINDSAMPLERSPROC glBindSamplers;
extern PFNGLBINDTEXTURESPROC glBindTextures;
extern PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_multi_bind*/

#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 1
/* http://www.opengl.org/registry/specs/ARB/multi_draw_indirect.txt */
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_multi_draw_indirect*/

#ifndef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 1
/* http://www.opengl.org/registry/specs/ARB/occlusion_query.txt */
#define GL_QUERY_COUNTER_BITS_ARB                0x8864
#define GL_CURRENT_QUERY_ARB                     0x8865
#define GL_QUERY_RESULT_ARB                      0x8866
#define GL_QUERY_RESULT_AVAILABLE_ARB            0x8867
#define GL_SAMPLES_PASSED_ARB                    0x8914
typedef void (GLAPIENTRY * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLENDQUERYARBPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISQUERYARBPROC) (GLuint id);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINQUERYARBPROC glBeginQueryARB;
extern PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
extern PFNGLENDQUERYARBPROC glEndQueryARB;
extern PFNGLGENQUERIESARBPROC glGenQueriesARB;
extern PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
extern PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
extern PFNGLGETQUERYIVARBPROC glGetQueryivARB;
extern PFNGLISQUERYARBPROC glIsQueryARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_occlusion_query*/

#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 1
/* http://www.opengl.org/registry/specs/ARB/occlusion_query2.txt */
#define GL_ANY_SAMPLES_PASSED                    0x8C2F
#endif /*GL_ARB_occlusion_query2*/

#ifndef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 1
/* http://www.opengl.org/registry/specs/ARB/parallel_shader_compile.txt */
#define GL_MAX_SHADER_COMPILER_THREADS_ARB       0x91B0
#define GL_COMPLETION_STATUS_ARB                 0x91B1
typedef void (GLAPIENTRY * PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMAXSHADERCOMPILERTHREADSARBPROC glMaxShaderCompilerThreadsARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_parallel_shader_compile*/

#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 1
/* http://www.opengl.org/registry/specs/ARB/pipeline_statistics_query.txt */
#define GL_VERTICES_SUBMITTED_ARB                0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB              0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB         0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB       0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB       0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB        0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB         0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB        0x82F7
#define GL_GEOMETRY_SHADER_INVOCATIONS           0x887F
#endif /*GL_ARB_pipeline_statistics_query*/

#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/pixel_buffer_object.txt */
#define GL_PIXEL_PACK_BUFFER_ARB                 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB               0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB         0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB       0x88EF
#endif /*GL_ARB_pixel_buffer_object*/

#ifndef GL_ARB_point_parameters
#define GL_ARB_point_parameters 1
/* http://www.opengl.org/registry/specs/ARB/point_parameters.txt */
#define GL_POINT_SIZE_MIN_ARB                    0x8126
#define GL_POINT_SIZE_MAX_ARB                    0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB         0x8128
#define GL_POINT_DISTANCE_ATTENUATION_ARB        0x8129
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
extern PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_point_parameters*/

#ifndef GL_ARB_point_sprite
#define GL_ARB_point_sprite 1
/* http://www.opengl.org/registry/specs/ARB/point_sprite.txt */
#define GL_POINT_SPRITE_ARB                      0x8861
#define GL_COORD_REPLACE_ARB                     0x8862
#endif /*GL_ARB_point_sprite*/

#ifndef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 1
/* http://www.opengl.org/registry/specs/ARB/post_depth_coverage.txt */
#endif /*GL_ARB_post_depth_coverage*/

#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 1
/* http://www.opengl.org/registry/specs/ARB/program_interface_query.txt */
#define GL_UNIFORM                               0x92E1
#define GL_UNIFORM_BLOCK                         0x92E2
#define GL_PROGRAM_INPUT                         0x92E3
#define GL_PROGRAM_OUTPUT                        0x92E4
#define GL_BUFFER_VARIABLE                       0x92E5
#define GL_SHADER_STORAGE_BLOCK                  0x92E6
#define GL_IS_PER_PATCH                          0x92E7
#define GL_VERTEX_SUBROUTINE                     0x92E8
#define GL_TESS_CONTROL_SUBROUTINE               0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE            0x92EA
#define GL_GEOMETRY_SUBROUTINE                   0x92EB
#define GL_FRAGMENT_SUBROUTINE                   0x92EC
#define GL_COMPUTE_SUBROUTINE                    0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM             0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM       0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM    0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM           0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM           0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM            0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING            0x92F4
#define GL_ACTIVE_RESOURCES                      0x92F5
#define GL_MAX_NAME_LENGTH                       0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES              0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES        0x92F8
#define GL_NAME_LENGTH                           0x92F9
#define GL_TYPE                                  0x92FA
#define GL_ARRAY_SIZE                            0x92FB
#define GL_OFFSET                                0x92FC
#define GL_BLOCK_INDEX                           0x92FD
#define GL_ARRAY_STRIDE                          0x92FE
#define GL_MATRIX_STRIDE                         0x92FF
#define GL_IS_ROW_MAJOR                          0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX           0x9301
#define GL_BUFFER_BINDING                        0x9302
#define GL_BUFFER_DATA_SIZE                      0x9303
#define GL_NUM_ACTIVE_VARIABLES                  0x9304
#define GL_ACTIVE_VARIABLES                      0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER           0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER     0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER  0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER         0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER         0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER          0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE                  0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE                0x930D
#define GL_LOCATION                              0x930E
#define GL_LOCATION_INDEX                        0x930F
typedef void (GLAPIENTRY * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint* params);
typedef GLuint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef GLint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef GLint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
extern PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
extern PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_program_interface_query*/

#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 1
/* http://www.opengl.org/registry/specs/ARB/provoking_vertex.txt */
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION               0x8E4D
#define GL_LAST_VERTEX_CONVENTION                0x8E4E
#define GL_PROVOKING_VERTEX                      0x8E4F
typedef void (GLAPIENTRY * PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_provoking_vertex*/

#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/query_buffer_object.txt */
#define GL_QUERY_BUFFER_BARRIER_BIT              0x00008000
#define GL_QUERY_BUFFER                          0x9192
#define GL_QUERY_BUFFER_BINDING                  0x9193
#define GL_QUERY_RESULT_NO_WAIT                  0x9194
#endif /*GL_ARB_query_buffer_object*/

#ifndef GL_ARB_robustness
#define GL_ARB_robustness 1
/* http://www.opengl.org/registry/specs/ARB/robustness.txt */
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB    0x00000004
#define GL_LOSE_CONTEXT_ON_RESET_ARB             0x8252
#define GL_GUILTY_CONTEXT_RESET_ARB              0x8253
#define GL_INNOCENT_CONTEXT_RESET_ARB            0x8254
#define GL_UNKNOWN_CONTEXT_RESET_ARB             0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_ARB       0x8256
#define GL_NO_RESET_NOTIFICATION_ARB             0x8261
typedef GLenum (GLAPIENTRY * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void (GLAPIENTRY * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
typedef void (GLAPIENTRY * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void* img);
typedef void (GLAPIENTRY * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
typedef void (GLAPIENTRY * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (GLAPIENTRY * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
typedef void (GLAPIENTRY * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
typedef void (GLAPIENTRY * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint* v);
typedef void (GLAPIENTRY * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat* values);
typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint* values);
typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort* values);
typedef void (GLAPIENTRY * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte* pattern);
typedef void (GLAPIENTRY * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span);
typedef void (GLAPIENTRY * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void (GLAPIENTRY * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
extern PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
extern PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
extern PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
extern PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
extern PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
extern PFNGLGETNMAPIVARBPROC glGetnMapivARB;
extern PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
extern PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
extern PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
extern PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
extern PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
extern PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
extern PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
extern PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
extern PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
extern PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
extern PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
extern PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_robustness*/

#ifndef GL_ARB_robustness_application_isolation
#define GL_ARB_robustness_application_isolation 1
/* http://www.opengl.org/registry/specs/ARB/robustness_isolation.txt */
#endif /*GL_ARB_robustness_application_isolation*/

#ifndef GL_ARB_robustness_share_group_isolation
#define GL_ARB_robustness_share_group_isolation 1
/* http://www.opengl.org/registry/specs/ARB/robustness_isolation.txt */
#endif /*GL_ARB_robustness_share_group_isolation*/

#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 1
/* http://www.opengl.org/registry/specs/ARB/robust_buffer_access_behavior.txt */
#endif /*GL_ARB_robust_buffer_access_behavior*/

#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 1
/* http://www.opengl.org/registry/specs/ARB/sampler_objects.txt */
#define GL_SAMPLER_BINDING                       0x8919
typedef void (GLAPIENTRY * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
typedef void (GLAPIENTRY * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint * samplers);
typedef void (GLAPIENTRY * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint* samplers);
typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISSAMPLERPROC) (GLuint sampler);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDSAMPLERPROC glBindSampler;
extern PFNGLDELETESAMPLERSPROC glDeleteSamplers;
extern PFNGLGENSAMPLERSPROC glGenSamplers;
extern PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
extern PFNGLISSAMPLERPROC glIsSampler;
extern PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
extern PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sampler_objects*/

#ifndef GL_ARB_sample_locations
#define GL_ARB_sample_locations 1
/* http://www.opengl.org/registry/specs/ARB/sample_locations.txt */
#define GL_SAMPLE_LOCATION_ARB                   0x8E50
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB     0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB  0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB      0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glFramebufferSampleLocationsfvARB;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glNamedFramebufferSampleLocationsfvARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sample_locations*/

#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading 1
/* http://www.opengl.org/registry/specs/ARB/sample_shading.txt */
#define GL_SAMPLE_SHADING_ARB                    0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB          0x8C37
typedef void (GLAPIENTRY * PFNGLMINSAMPLESHADINGARBPROC) (GLclampf value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sample_shading*/

#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 1
/* http://www.opengl.org/registry/specs/ARB/seamless_cubemap_per_texture.txt */
#define GL_TEXTURE_CUBE_MAP_SEAMLESS             0x884F
#endif /*GL_ARB_seamless_cubemap_per_texture*/

#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 1
/* http://www.opengl.org/registry/specs/ARB/seamless_cube_map.txt */
#define GL_TEXTURE_CUBE_MAP_SEAMLESS             0x884F
#endif /*GL_ARB_seamless_cube_map*/

#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 1
/* http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt */
#define GL_VERTEX_SHADER_BIT                     0x00000001
#define GL_FRAGMENT_SHADER_BIT                   0x00000002
#define GL_GEOMETRY_SHADER_BIT                   0x00000004
#define GL_TESS_CONTROL_SHADER_BIT               0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT            0x00000010
#define GL_PROGRAM_SEPARABLE                     0x8258
#define GL_ACTIVE_PROGRAM                        0x8259
#define GL_PROGRAM_PIPELINE_BINDING              0x825A
#define GL_ALL_SHADER_BITS                       0xFFFFFFFF
typedef void (GLAPIENTRY * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
typedef void (GLAPIENTRY * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar * const * strings);
typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint* pipelines);
typedef void (GLAPIENTRY * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint x, GLuint y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
extern PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
extern PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
extern PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
extern PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
extern PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
extern PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
extern PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
extern PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_separate_shader_objects*/

#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 1
/* http://www.opengl.org/registry/specs/ARB/shader_atomic_counters.txt */
#define GL_ATOMIC_COUNTER_BUFFER                 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING         0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START           0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE            0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE       0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS     0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS   0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS   0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS   0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS            0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS      0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS   0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS          0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS          0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS          0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE        0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS         0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX   0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER           0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS    0x92DC
typedef void (GLAPIENTRY * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shader_atomic_counters*/

#ifndef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 1
/* http://www.opengl.org/registry/specs/ARB/shader_atomic_counter_ops.txt */
#endif /*GL_ARB_shader_atomic_counter_ops*/

#ifndef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 1
/* http://www.opengl.org/registry/specs/ARB/shader_ballot.txt */
#endif /*GL_ARB_shader_ballot*/

#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 1
/* http://www.opengl.org/registry/specs/ARB/shader_bit_encoding.txt */
#endif /*GL_ARB_shader_bit_encoding*/

#ifndef GL_ARB_shader_clock
#define GL_ARB_shader_clock 1
/* http://www.opengl.org/registry/specs/ARB/shader_clock.txt */
#endif /*GL_ARB_shader_clock*/

#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 1
/* http://www.opengl.org/registry/specs/ARB/shader_draw_parameters.txt */
#endif /*GL_ARB_shader_draw_parameters*/

#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 1
/* http://www.opengl.org/registry/specs/ARB/shader_group_vote.txt */
#endif /*GL_ARB_shader_group_vote*/

#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 1
/* http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt */
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT       0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT             0x00000002
#define GL_UNIFORM_BARRIER_BIT                   0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT             0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT       0x00000020
#define GL_COMMAND_BARRIER_BIT                   0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT              0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT            0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT             0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT               0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT        0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT            0x00001000
#define GL_MAX_IMAGE_UNITS                       0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME                    0x8F3A
#define GL_IMAGE_BINDING_LEVEL                   0x8F3B
#define GL_IMAGE_BINDING_LAYERED                 0x8F3C
#define GL_IMAGE_BINDING_LAYER                   0x8F3D
#define GL_IMAGE_BINDING_ACCESS                  0x8F3E
#define GL_IMAGE_1D                              0x904C
#define GL_IMAGE_2D                              0x904D
#define GL_IMAGE_3D                              0x904E
#define GL_IMAGE_2D_RECT                         0x904F
#define GL_IMAGE_CUBE                            0x9050
#define GL_IMAGE_BUFFER                          0x9051
#define GL_IMAGE_1D_ARRAY                        0x9052
#define GL_IMAGE_2D_ARRAY                        0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY                  0x9054
#define GL_IMAGE_2D_MULTISAMPLE                  0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY            0x9056
#define GL_INT_IMAGE_1D                          0x9057
#define GL_INT_IMAGE_2D                          0x9058
#define GL_INT_IMAGE_3D                          0x9059
#define GL_INT_IMAGE_2D_RECT                     0x905A
#define GL_INT_IMAGE_CUBE                        0x905B
#define GL_INT_IMAGE_BUFFER                      0x905C
#define GL_INT_IMAGE_1D_ARRAY                    0x905D
#define GL_INT_IMAGE_2D_ARRAY                    0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY              0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE              0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY        0x9061
#define GL_UNSIGNED_INT_IMAGE_1D                 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D                 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D                 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT            0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE               0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER             0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY           0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY           0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY     0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE     0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES                     0x906D
#define GL_IMAGE_BINDING_FORMAT                  0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE       0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE    0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS   0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS             0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS       0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS    0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS           0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS           0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS           0x90CF
#define GL_ALL_BARRIER_BITS                      0xFFFFFFFF
typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (GLAPIENTRY * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
extern PFNGLMEMORYBARRIERPROC glMemoryBarrier;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shader_image_load_store*/

#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 1
/* http://www.opengl.org/registry/specs/ARB/shader_image_size.txt */
#endif /*GL_ARB_shader_image_size*/

#ifndef GL_ARB_shader_objects
#define GL_ARB_shader_objects 1
/* http://www.opengl.org/registry/specs/ARB/shader_objects.txt */
#define GL_PROGRAM_OBJECT_ARB                    0x8B40
#define GL_SHADER_OBJECT_ARB                     0x8B48
#define GL_OBJECT_TYPE_ARB                       0x8B4E
#define GL_OBJECT_SUBTYPE_ARB                    0x8B4F
#define GL_FLOAT_VEC2_ARB                        0x8B50
#define GL_FLOAT_VEC3_ARB                        0x8B51
#define GL_FLOAT_VEC4_ARB                        0x8B52
#define GL_INT_VEC2_ARB                          0x8B53
#define GL_INT_VEC3_ARB                          0x8B54
#define GL_INT_VEC4_ARB                          0x8B55
#define GL_BOOL_ARB                              0x8B56
#define GL_BOOL_VEC2_ARB                         0x8B57
#define GL_BOOL_VEC3_ARB                         0x8B58
#define GL_BOOL_VEC4_ARB                         0x8B59
#define GL_FLOAT_MAT2_ARB                        0x8B5A
#define GL_FLOAT_MAT3_ARB                        0x8B5B
#define GL_FLOAT_MAT4_ARB                        0x8B5C
#define GL_SAMPLER_1D_ARB                        0x8B5D
#define GL_SAMPLER_2D_ARB                        0x8B5E
#define GL_SAMPLER_3D_ARB                        0x8B5F
#define GL_SAMPLER_CUBE_ARB                      0x8B60
#define GL_SAMPLER_1D_SHADOW_ARB                 0x8B61
#define GL_SAMPLER_2D_SHADOW_ARB                 0x8B62
#define GL_SAMPLER_2D_RECT_ARB                   0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB            0x8B64
#define GL_OBJECT_DELETE_STATUS_ARB              0x8B80
#define GL_OBJECT_COMPILE_STATUS_ARB             0x8B81
#define GL_OBJECT_LINK_STATUS_ARB                0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB            0x8B83
#define GL_OBJECT_INFO_LOG_LENGTH_ARB            0x8B84
#define GL_OBJECT_ATTACHED_OBJECTS_ARB           0x8B85
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB            0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB  0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB       0x8B88
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef void (GLAPIENTRY * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAPIENTRY * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
typedef GLhandleARB (GLAPIENTRY * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
typedef GLhandleARB (GLAPIENTRY * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
typedef void (GLAPIENTRY * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
typedef void (GLAPIENTRY * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
typedef void (GLAPIENTRY * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj);
typedef GLhandleARB (GLAPIENTRY * PFNGLGETHANDLEARBPROC) (GLenum pname);
typedef void (GLAPIENTRY * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog);
typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source);
typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint* params);
typedef void (GLAPIENTRY * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
typedef void (GLAPIENTRY * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length);
typedef void (GLAPIENTRY * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
extern PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
extern PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
extern PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
extern PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
extern PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
extern PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
extern PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
extern PFNGLGETHANDLEARBPROC glGetHandleARB;
extern PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
extern PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
extern PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
extern PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
extern PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
extern PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
extern PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
extern PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
extern PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
extern PFNGLUNIFORM1FARBPROC glUniform1fARB;
extern PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
extern PFNGLUNIFORM1IARBPROC glUniform1iARB;
extern PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
extern PFNGLUNIFORM2FARBPROC glUniform2fARB;
extern PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
extern PFNGLUNIFORM2IARBPROC glUniform2iARB;
extern PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
extern PFNGLUNIFORM3FARBPROC glUniform3fARB;
extern PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
extern PFNGLUNIFORM3IARBPROC glUniform3iARB;
extern PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
extern PFNGLUNIFORM4FARBPROC glUniform4fARB;
extern PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
extern PFNGLUNIFORM4IARBPROC glUniform4iARB;
extern PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
extern PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
extern PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
extern PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
extern PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
extern PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shader_objects*/

#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision 1
/* http://www.opengl.org/registry/specs/ARB/shader_precision.txt */
#endif /*GL_ARB_shader_precision*/

#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 1
/* http://www.opengl.org/registry/specs/ARB/shader_stencil_export.txt */
#endif /*GL_ARB_shader_stencil_export*/

#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/shader_storage_buffer_object.txt */
#define GL_SHADER_STORAGE_BARRIER_BIT            0x2000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES  0x8F39
#define GL_SHADER_STORAGE_BUFFER                 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING         0x90D3
#define GL_SHADER_STORAGE_BUFFER_START           0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE            0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS      0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS    0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS    0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS     0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS    0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS    0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE         0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
typedef void (GLAPIENTRY * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shader_storage_buffer_object*/

#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 1
/* http://www.opengl.org/registry/specs/ARB/shader_subroutine.txt */
#define GL_ACTIVE_SUBROUTINES                    0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS            0x8DE6
#define GL_MAX_SUBROUTINES                       0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS      0x8DE8
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS   0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH          0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH  0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES            0x8E4A
#define GL_COMPATIBLE_SUBROUTINES                0x8E4B
typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint* values);
typedef GLuint (GLAPIENTRY * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar* name);
typedef GLint (GLAPIENTRY * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint* params);
typedef void (GLAPIENTRY * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint* indices);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
extern PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
extern PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
extern PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shader_subroutine*/

#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 1
/* http://www.opengl.org/registry/specs/ARB/shader_texture_image_samples.txt */
#endif /*GL_ARB_shader_texture_image_samples*/

#ifndef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 1
/* http://www.opengl.org/registry/specs/ARB/shader_texture_lod.txt */
#endif /*GL_ARB_shader_texture_lod*/

#ifndef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 1
/* http://www.opengl.org/registry/specs/ARB/shader_viewport_layer_array.txt */
#endif /*GL_ARB_shader_viewport_layer_array*/

#ifndef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 1
/* http://www.opengl.org/registry/specs/ARB/shading_language_100.txt */
#define GL_SHADING_LANGUAGE_VERSION_ARB          0x8B8C
#endif /*GL_ARB_shading_language_100*/

#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 1
/* http://www.opengl.org/registry/specs/ARB/shading_language_420pack.txt */
#endif /*GL_ARB_shading_language_420pack*/

#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 1
/* http://www.opengl.org/registry/specs/ARB/shading_language_include.txt */
#define GL_SHADER_INCLUDE_ARB                    0x8DAE
#define GL_NAMED_STRING_LENGTH_ARB               0x8DE9
#define GL_NAMED_STRING_TYPE_ARB                 0x8DEA
typedef void (GLAPIENTRY * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length);
typedef void (GLAPIENTRY * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (GLAPIENTRY * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar* name, GLenum pname, GLint *params);
typedef GLboolean (GLAPIENTRY * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name);
typedef void (GLAPIENTRY * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
extern PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
extern PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
extern PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
extern PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_shading_language_include*/

#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 1
/* http://www.opengl.org/registry/specs/ARB/shading_language_packing.txt */
#endif /*GL_ARB_shading_language_packing*/

#ifndef GL_ARB_shadow
#define GL_ARB_shadow 1
/* http://www.opengl.org/registry/specs/ARB/shadow.txt */
#define GL_TEXTURE_COMPARE_MODE_ARB              0x884C
#define GL_TEXTURE_COMPARE_FUNC_ARB              0x884D
#define GL_COMPARE_R_TO_TEXTURE_ARB              0x884E
#endif /*GL_ARB_shadow*/

#ifndef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 1
/* http://www.opengl.org/registry/specs/ARB/shadow_ambient.txt */
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB        0x80BF
#endif /*GL_ARB_shadow_ambient*/

#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 1
/* http://www.opengl.org/registry/specs/ARB/sparse_buffer.txt */
#define GL_SPARSE_STORAGE_BIT_ARB                0x0400
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB           0x82F8
typedef void (GLAPIENTRY * PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBUFFERPAGECOMMITMENTARBPROC glBufferPageCommitmentARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sparse_buffer*/

#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 1
/* http://www.opengl.org/registry/specs/ARB/sparse_texture.txt */
#define GL_VIRTUAL_PAGE_SIZE_X_ARB               0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB               0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB               0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB           0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB        0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB   0x919A
#define GL_TEXTURE_SPARSE_ARB                    0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB           0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB            0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB                 0x91AA
typedef void (GLAPIENTRY * PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAPIENTRY * PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXPAGECOMMITMENTARBPROC glTexPageCommitmentARB;
extern PFNGLTEXTUREPAGECOMMITMENTEXTPROC glTexturePageCommitmentEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sparse_texture*/

#ifndef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 1
/* http://www.opengl.org/registry/specs/ARB/sparse_texture2.txt */
#endif /*GL_ARB_sparse_texture2*/

#ifndef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 1
/* http://www.opengl.org/registry/specs/ARB/sparse_texture_clamp.txt */
#endif /*GL_ARB_sparse_texture_clamp*/

#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 1
/* http://www.opengl.org/registry/specs/ARB/stencil_texturing.txt */
#define GL_DEPTH_STENCIL_TEXTURE_MODE            0x90EA
#endif /*GL_ARB_stencil_texturing*/

#ifndef GL_ARB_sync
#define GL_ARB_sync 1
/* http://www.opengl.org/registry/specs/ARB/sync.txt */
#define GL_TIMEOUT_IGNORED                       0xFFFFFFFFFFFFFFFFull
#define GL_SYNC_FLUSH_COMMANDS_BIT               0x00000001
#define GL_MAX_SERVER_WAIT_TIMEOUT               0x9111
#define GL_OBJECT_TYPE                           0x9112
#define GL_SYNC_CONDITION                        0x9113
#define GL_SYNC_STATUS                           0x9114
#define GL_SYNC_FLAGS                            0x9115
#define GL_SYNC_FENCE                            0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE            0x9117
#define GL_UNSIGNALED                            0x9118
#define GL_SIGNALED                              0x9119
#define GL_ALREADY_SIGNALED                      0x911A
#define GL_TIMEOUT_EXPIRED                       0x911B
#define GL_CONDITION_SATISFIED                   0x911C
#define GL_WAIT_FAILED                           0x911D
typedef GLenum (GLAPIENTRY * PFNGLCLIENTWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout);
typedef void (GLAPIENTRY * PFNGLDELETESYNCPROC) (GLsync GLsync);
typedef GLsync (GLAPIENTRY * PFNGLFENCESYNCPROC) (GLenum condition,GLbitfield flags);
typedef void (GLAPIENTRY * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETSYNCIVPROC) (GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values);
typedef GLboolean (GLAPIENTRY * PFNGLISSYNCPROC) (GLsync GLsync);
typedef void (GLAPIENTRY * PFNGLWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
extern PFNGLDELETESYNCPROC glDeleteSync;
extern PFNGLFENCESYNCPROC glFenceSync;
extern PFNGLGETINTEGER64VPROC glGetInteger64v;
extern PFNGLGETSYNCIVPROC glGetSynciv;
extern PFNGLISSYNCPROC glIsSync;
extern PFNGLWAITSYNCPROC glWaitSync;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_sync*/

#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 1
/* http://www.opengl.org/registry/specs/ARB/tessellation_shader.txt */
#define GL_PATCHES                               0xE
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS     0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS  0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_PATCH_VERTICES                        0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL             0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL             0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES          0x8E75
#define GL_TESS_GEN_MODE                         0x8E76
#define GL_TESS_GEN_SPACING                      0x8E77
#define GL_TESS_GEN_VERTEX_ORDER                 0x8E78
#define GL_TESS_GEN_POINT_MODE                   0x8E79
#define GL_ISOLINES                              0x8E7A
#define GL_FRACTIONAL_ODD                        0x8E7B
#define GL_FRACTIONAL_EVEN                       0x8E7C
#define GL_MAX_PATCH_VERTICES                    0x8E7D
#define GL_MAX_TESS_GEN_LEVEL                    0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS   0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS  0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS    0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS             0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_TESS_EVALUATION_SHADER                0x8E87
#define GL_TESS_CONTROL_SHADER                   0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS       0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS    0x8E8A
typedef void (GLAPIENTRY * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat* values);
typedef void (GLAPIENTRY * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
extern PFNGLPATCHPARAMETERIPROC glPatchParameteri;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_tessellation_shader*/

#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 1
/* http://www.opengl.org/registry/specs/ARB/texture_barrier.txt */
typedef void (GLAPIENTRY * PFNGLTEXTUREBARRIERPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTUREBARRIERPROC glTextureBarrier;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_barrier*/

#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 1
/* http://www.opengl.org/registry/specs/ARB/texture_border_clamp.txt */
#define GL_CLAMP_TO_BORDER_ARB                   0x812D
#endif /*GL_ARB_texture_border_clamp*/

#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/texture_buffer_object.txt */
#define GL_TEXTURE_BUFFER_ARB                    0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB           0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_ARB            0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB             0x8C2E
typedef void (GLAPIENTRY * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXBUFFERARBPROC glTexBufferARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_buffer_object*/

#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 1
/* http://www.opengl.org/registry/specs/ARB/texture_buffer_object_rgb32.txt */
#endif /*GL_ARB_texture_buffer_object_rgb32*/

#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 1
/* http://www.opengl.org/registry/specs/ARB/texture_buffer_range.txt */
#define GL_TEXTURE_BUFFER_OFFSET                 0x919D
#define GL_TEXTURE_BUFFER_SIZE                   0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT       0x919F
typedef void (GLAPIENTRY * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
extern PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_buffer_range*/

#ifndef GL_ARB_texture_compression
#define GL_ARB_texture_compression 1
/* http://www.opengl.org/registry/specs/ARB/texture_compression.txt */
#define GL_COMPRESSED_ALPHA_ARB                  0x84E9
#define GL_COMPRESSED_LUMINANCE_ARB              0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB        0x84EB
#define GL_COMPRESSED_INTENSITY_ARB              0x84EC
#define GL_COMPRESSED_RGB_ARB                    0x84ED
#define GL_COMPRESSED_RGBA_ARB                   0x84EE
#define GL_TEXTURE_COMPRESSION_HINT_ARB          0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB     0x86A0
#define GL_TEXTURE_COMPRESSED_ARB                0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB    0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB        0x86A3
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, void *img);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
extern PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_compression*/

#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 1
/* http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt */
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB        0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB  0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB  0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#endif /*GL_ARB_texture_compression_bptc*/

#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 1
/* http://www.opengl.org/registry/specs/ARB/texture_compression_rgtc.txt */
#define GL_COMPRESSED_RED_RGTC1                  0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1           0x8DBC
#define GL_COMPRESSED_RG_RGTC2                   0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2            0x8DBE
#endif /*GL_ARB_texture_compression_rgtc*/

#ifndef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 1
/* http://www.opengl.org/registry/specs/ARB/texture_cube_map.txt */
#define GL_NORMAL_MAP_ARB                        0x8511
#define GL_REFLECTION_MAP_ARB                    0x8512
#define GL_TEXTURE_CUBE_MAP_ARB                  0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB          0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB       0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB       0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB       0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB       0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB       0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB       0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB            0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB         0x851C
#endif /*GL_ARB_texture_cube_map*/

#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 1
/* http://www.opengl.org/registry/specs/ARB/texture_cube_map_array.txt */
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB            0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB    0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB      0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB            0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB     0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB        0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#endif /*GL_ARB_texture_cube_map_array*/

#ifndef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 1
/* http://www.opengl.org/registry/specs/ARB/texture_env_add.txt */
#endif /*GL_ARB_texture_env_add*/

#ifndef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 1
/* http://www.opengl.org/registry/specs/ARB/texture_env_combine.txt */
#define GL_SUBTRACT_ARB                          0x84E7
#define GL_COMBINE_ARB                           0x8570
#define GL_COMBINE_RGB_ARB                       0x8571
#define GL_COMBINE_ALPHA_ARB                     0x8572
#define GL_RGB_SCALE_ARB                         0x8573
#define GL_ADD_SIGNED_ARB                        0x8574
#define GL_INTERPOLATE_ARB                       0x8575
#define GL_CONSTANT_ARB                          0x8576
#define GL_PRIMARY_COLOR_ARB                     0x8577
#define GL_PREVIOUS_ARB                          0x8578
#define GL_SOURCE0_RGB_ARB                       0x8580
#define GL_SOURCE1_RGB_ARB                       0x8581
#define GL_SOURCE2_RGB_ARB                       0x8582
#define GL_SOURCE0_ALPHA_ARB                     0x8588
#define GL_SOURCE1_ALPHA_ARB                     0x8589
#define GL_SOURCE2_ALPHA_ARB                     0x858A
#define GL_OPERAND0_RGB_ARB                      0x8590
#define GL_OPERAND1_RGB_ARB                      0x8591
#define GL_OPERAND2_RGB_ARB                      0x8592
#define GL_OPERAND0_ALPHA_ARB                    0x8598
#define GL_OPERAND1_ALPHA_ARB                    0x8599
#define GL_OPERAND2_ALPHA_ARB                    0x859A
#endif /*GL_ARB_texture_env_combine*/

#ifndef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 1
/* http://www.opengl.org/registry/specs/ARB/texture_env_crossbar.txt */
#endif /*GL_ARB_texture_env_crossbar*/

#ifndef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 1
/* http://www.opengl.org/registry/specs/ARB/texture_env_dot3.txt */
#define GL_DOT3_RGB_ARB                          0x86AE
#define GL_DOT3_RGBA_ARB                         0x86AF
#endif /*GL_ARB_texture_env_dot3*/

#ifndef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 1
/* http://www.opengl.org/registry/specs/ARB/texture_filter_minmax.txt */
#define GL_TEXTURE_REDUCTION_MODE_ARB            0x9366
#define GL_WEIGHTED_AVERAGE_ARB                  0x9367
#endif /*GL_ARB_texture_filter_minmax*/

#ifndef GL_ARB_texture_float
#define GL_ARB_texture_float 1
/* http://www.opengl.org/registry/specs/ARB/texture_float.txt */
#define GL_RGBA32F_ARB                           0x8814
#define GL_RGB32F_ARB                            0x8815
#define GL_ALPHA32F_ARB                          0x8816
#define GL_INTENSITY32F_ARB                      0x8817
#define GL_LUMINANCE32F_ARB                      0x8818
#define GL_LUMINANCE_ALPHA32F_ARB                0x8819
#define GL_RGBA16F_ARB                           0x881A
#define GL_RGB16F_ARB                            0x881B
#define GL_ALPHA16F_ARB                          0x881C
#define GL_INTENSITY16F_ARB                      0x881D
#define GL_LUMINANCE16F_ARB                      0x881E
#define GL_LUMINANCE_ALPHA16F_ARB                0x881F
#define GL_TEXTURE_RED_TYPE_ARB                  0x8C10
#define GL_TEXTURE_GREEN_TYPE_ARB                0x8C11
#define GL_TEXTURE_BLUE_TYPE_ARB                 0x8C12
#define GL_TEXTURE_ALPHA_TYPE_ARB                0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE_ARB            0x8C14
#define GL_TEXTURE_INTENSITY_TYPE_ARB            0x8C15
#define GL_TEXTURE_DEPTH_TYPE_ARB                0x8C16
#define GL_UNSIGNED_NORMALIZED_ARB               0x8C17
#endif /*GL_ARB_texture_float*/

#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather 1
/* http://www.opengl.org/registry/specs/ARB/texture_gather.txt */
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#endif /*GL_ARB_texture_gather*/

#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 1
/* http://www.opengl.org/registry/specs/ARB/texture_mirrored_repeat.txt */
#define GL_MIRRORED_REPEAT_ARB                   0x8370
#endif /*GL_ARB_texture_mirrored_repeat*/

#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 1
/* http://www.opengl.org/registry/specs/ARB/texture_mirror_clamp_to_edge.txt */
#define GL_MIRROR_CLAMP_TO_EDGE                  0x8743
#endif /*GL_ARB_texture_mirror_clamp_to_edge*/

#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 1
/* http://www.opengl.org/registry/specs/ARB/texture_multisample.txt */
#define GL_SAMPLE_POSITION                       0x8E50
#define GL_SAMPLE_MASK                           0x8E51
#define GL_SAMPLE_MASK_VALUE                     0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS                 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE                0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE          0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY          0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY    0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE        0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY  0x9105
#define GL_TEXTURE_SAMPLES                       0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS        0x9107
#define GL_SAMPLER_2D_MULTISAMPLE                0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE            0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE   0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY          0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY      0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES             0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES             0x910F
#define GL_MAX_INTEGER_SAMPLES                   0x9110
typedef void (GLAPIENTRY * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat* val);
typedef void (GLAPIENTRY * PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);
typedef void (GLAPIENTRY * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
extern PFNGLSAMPLEMASKIPROC glSampleMaski;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_multisample*/

#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 1
/* http://www.opengl.org/registry/specs/ARB/texture_non_power_of_two.txt */
#endif /*GL_ARB_texture_non_power_of_two*/

#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 1
/* http://www.opengl.org/registry/specs/ARB/texture_query_levels.txt */
#endif /*GL_ARB_texture_query_levels*/

#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 1
/* http://www.opengl.org/registry/specs/ARB/texture_query_lod.txt */
#endif /*GL_ARB_texture_query_lod*/

#ifndef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 1
/* http://www.opengl.org/registry/specs/ARB/texture_rectangle.txt */
#define GL_TEXTURE_RECTANGLE_ARB                 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_ARB         0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_ARB           0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB        0x84F8
#define GL_SAMPLER_2D_RECT_ARB                   0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB            0x8B64
#endif /*GL_ARB_texture_rectangle*/

#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg 1
/* http://www.opengl.org/registry/specs/ARB/texture_rg.txt */
#define GL_COMPRESSED_RED                        0x8225
#define GL_COMPRESSED_RG                         0x8226
#define GL_RG                                    0x8227
#define GL_RG_INTEGER                            0x8228
#define GL_R8                                    0x8229
#define GL_R16                                   0x822A
#define GL_RG8                                   0x822B
#define GL_RG16                                  0x822C
#define GL_R16F                                  0x822D
#define GL_R32F                                  0x822E
#define GL_RG16F                                 0x822F
#define GL_RG32F                                 0x8230
#define GL_R8I                                   0x8231
#define GL_R8UI                                  0x8232
#define GL_R16I                                  0x8233
#define GL_R16UI                                 0x8234
#define GL_R32I                                  0x8235
#define GL_R32UI                                 0x8236
#define GL_RG8I                                  0x8237
#define GL_RG8UI                                 0x8238
#define GL_RG16I                                 0x8239
#define GL_RG16UI                                0x823A
#define GL_RG32I                                 0x823B
#define GL_RG32UI                                0x823C
#endif /*GL_ARB_texture_rg*/

#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 1
/* http://www.opengl.org/registry/specs/ARB/texture_rgb10_a2ui.txt */
#define GL_RGB10_A2UI                            0x906F
#endif /*GL_ARB_texture_rgb10_a2ui*/

#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 1
/* http://www.opengl.org/registry/specs/ARB/texture_stencil8.txt */
#define GL_STENCIL_INDEX                         0x1901
#define GL_STENCIL_INDEX8                        0x8D48
#endif /*GL_ARB_texture_stencil8*/

#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage 1
/* http://www.opengl.org/registry/specs/ARB/texture_storage.txt */
#define GL_TEXTURE_IMMUTABLE_FORMAT              0x912F
typedef void (GLAPIENTRY * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAPIENTRY * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXSTORAGE1DPROC glTexStorage1D;
extern PFNGLTEXSTORAGE2DPROC glTexStorage2D;
extern PFNGLTEXSTORAGE3DPROC glTexStorage3D;
extern PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
extern PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
extern PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_storage*/

#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 1
/* http://www.opengl.org/registry/specs/ARB/texture_storage_multisample.txt */
typedef void (GLAPIENTRY * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_storage_multisample*/

#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 1
/* http://www.opengl.org/registry/specs/ARB/texture_swizzle.txt */
#define GL_TEXTURE_SWIZZLE_R                     0x8E42
#define GL_TEXTURE_SWIZZLE_G                     0x8E43
#define GL_TEXTURE_SWIZZLE_B                     0x8E44
#define GL_TEXTURE_SWIZZLE_A                     0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA                  0x8E46
#endif /*GL_ARB_texture_swizzle*/

#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view 1
/* http://www.opengl.org/registry/specs/ARB/texture_view.txt */
#define GL_TEXTURE_VIEW_MIN_LEVEL                0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS               0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER                0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS               0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS              0x82DF
typedef void (GLAPIENTRY * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTUREVIEWPROC glTextureView;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_texture_view*/

#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query 1
/* http://www.opengl.org/registry/specs/ARB/timer_query.txt */
#define GL_TIME_ELAPSED                          0x88BF
#define GL_TIMESTAMP                             0x8E28
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64* params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64* params);
typedef void (GLAPIENTRY * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
extern PFNGLQUERYCOUNTERPROC glQueryCounter;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_timer_query*/

#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 1
/* http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt */
#define GL_TRANSFORM_FEEDBACK                    0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED      0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE      0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING            0x8E25
typedef void (GLAPIENTRY * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
typedef void (GLAPIENTRY * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids);
typedef GLboolean (GLAPIENTRY * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
typedef void (GLAPIENTRY * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
extern PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
extern PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_transform_feedback2*/

#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 1
/* http://www.opengl.org/registry/specs/ARB/transform_feedback3.txt */
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS        0x8E70
#define GL_MAX_VERTEX_STREAMS                    0x8E71
typedef void (GLAPIENTRY * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
typedef void (GLAPIENTRY * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
typedef void (GLAPIENTRY * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
extern PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
extern PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_transform_feedback3*/

#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 1
/* http://www.opengl.org/registry/specs/ARB/transform_feedback_instanced.txt */
typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_transform_feedback_instanced*/

#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 1
/* http://www.opengl.org/registry/specs/ARB/transform_feedback_overflow_query.txt */
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB       0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#endif /*GL_ARB_transform_feedback_overflow_query*/

#ifndef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 1
/* http://www.opengl.org/registry/specs/ARB/transpose_matrix.txt */
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB        0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB       0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB          0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX_ARB            0x84E6
typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
extern PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
extern PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
extern PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_transpose_matrix*/

#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt */
#define GL_INVALID_INDEX                         0xFFFFFFFFu
#define GL_UNIFORM_BUFFER                        0x8A11
#define GL_UNIFORM_BUFFER_BINDING                0x8A28
#define GL_UNIFORM_BUFFER_START                  0x8A29
#define GL_UNIFORM_BUFFER_SIZE                   0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS             0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS           0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS           0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS           0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS           0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE                0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT       0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH  0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS                 0x8A36
#define GL_UNIFORM_TYPE                          0x8A37
#define GL_UNIFORM_SIZE                          0x8A38
#define GL_UNIFORM_NAME_LENGTH                   0x8A39
#define GL_UNIFORM_BLOCK_INDEX                   0x8A3A
#define GL_UNIFORM_OFFSET                        0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE                  0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE                 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR                  0x8A3E
#define GL_UNIFORM_BLOCK_BINDING                 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE               0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH             0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS         0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES  0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint* data);
typedef GLuint (GLAPIENTRY * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar* uniformBlockName);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices);
typedef void (GLAPIENTRY * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDBUFFERBASEPROC glBindBufferBase;
extern PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
extern PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
extern PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
extern PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
extern PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
extern PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_uniform_buffer_object*/

#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 1
/* http://www.opengl.org/registry/specs/ARB/vertex_array_bgra.txt */
#define GL_BGRA                                  0x80E1
#endif /*GL_ARB_vertex_array_bgra*/

#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 1
/* http://www.opengl.org/registry/specs/ARB/vertex_array_object.txt */
#define GL_VERTEX_ARRAY_BINDING                  0x85B5
typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYPROC) (GLuint array);
typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint* arrays);
typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays);
typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYPROC) (GLuint array);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
extern PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
extern PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
extern PFNGLISVERTEXARRAYPROC glIsVertexArray;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_array_object*/

#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 1
/* http://www.opengl.org/registry/specs/ARB/vertex_attrib_64bit.txt */
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
extern PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_attrib_64bit*/

#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 1
/* http://www.opengl.org/registry/specs/ARB/vertex_attrib_binding.txt */
#define GL_VERTEX_ATTRIB_BINDING                 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET         0x82D5
#define GL_VERTEX_BINDING_DIVISOR                0x82D6
#define GL_VERTEX_BINDING_OFFSET                 0x82D7
#define GL_VERTEX_BINDING_STRIDE                 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET     0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS            0x82DA
#define GL_VERTEX_BINDING_BUFFER                 0x8F4F
typedef void (GLAPIENTRY * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPIENTRY * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
extern PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
extern PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
extern PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
extern PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
extern PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
extern PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_attrib_binding*/

#ifndef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 1
/* http://oss.sgi.com/projects/ogl-sample/registry/ARB/vertex_blend.txt */
#define GL_MAX_VERTEX_UNITS_ARB                  0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB               0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB                  0x86A6
#define GL_VERTEX_BLEND_ARB                      0x86A7
#define GL_CURRENT_WEIGHT_ARB                    0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB                 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB               0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB                 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB              0x86AC
#define GL_WEIGHT_ARRAY_ARB                      0x86AD
#define GL_MODELVIEW0_ARB                        0x1700
#define GL_MODELVIEW1_ARB                        0x850A
#define GL_MODELVIEW2_ARB                        0x8722
#define GL_MODELVIEW3_ARB                        0x8723
#define GL_MODELVIEW4_ARB                        0x8724
#define GL_MODELVIEW5_ARB                        0x8725
#define GL_MODELVIEW6_ARB                        0x8726
#define GL_MODELVIEW7_ARB                        0x8727
#define GL_MODELVIEW8_ARB                        0x8728
#define GL_MODELVIEW9_ARB                        0x8729
#define GL_MODELVIEW10_ARB                       0x872A
#define GL_MODELVIEW11_ARB                       0x872B
#define GL_MODELVIEW12_ARB                       0x872C
#define GL_MODELVIEW13_ARB                       0x872D
#define GL_MODELVIEW14_ARB                       0x872E
#define GL_MODELVIEW15_ARB                       0x872F
#define GL_MODELVIEW16_ARB                       0x8730
#define GL_MODELVIEW17_ARB                       0x8731
#define GL_MODELVIEW18_ARB                       0x8732
#define GL_MODELVIEW19_ARB                       0x8733
#define GL_MODELVIEW20_ARB                       0x8734
#define GL_MODELVIEW21_ARB                       0x8735
#define GL_MODELVIEW22_ARB                       0x8736
#define GL_MODELVIEW23_ARB                       0x8737
#define GL_MODELVIEW24_ARB                       0x8738
#define GL_MODELVIEW25_ARB                       0x8739
#define GL_MODELVIEW26_ARB                       0x873A
#define GL_MODELVIEW27_ARB                       0x873B
#define GL_MODELVIEW28_ARB                       0x873C
#define GL_MODELVIEW29_ARB                       0x873D
#define GL_MODELVIEW30_ARB                       0x873E
#define GL_MODELVIEW31_ARB                       0x873F
typedef void (GLAPIENTRY * PFNGLWEIGHTBVARBPROC) (GLint size, GLbyte *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTSVARBPROC) (GLint size, GLshort *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTIVARBPROC) (GLint size, GLint *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTFVARBPROC) (GLint size, GLfloat *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTDVARBPROC) (GLint size, GLdouble *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTUBVARBPROC) (GLint size, GLubyte *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTUSVARBPROC) (GLint size, GLushort *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTUIVARBPROC) (GLint size, GLuint *weights);
typedef void (GLAPIENTRY * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXBLENDARBPROC) (GLint count);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLWEIGHTBVARBPROC glWeightbvARB;
extern PFNGLWEIGHTSVARBPROC glWeightsvARB;
extern PFNGLWEIGHTIVARBPROC glWeightivARB;
extern PFNGLWEIGHTFVARBPROC glWeightfvARB;
extern PFNGLWEIGHTDVARBPROC glWeightdvARB;
extern PFNGLWEIGHTUBVARBPROC glWeightubvARB;
extern PFNGLWEIGHTUSVARBPROC glWeightusvARB;
extern PFNGLWEIGHTUIVARBPROC glWeightuivARB;
extern PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
extern PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_blend*/

#ifndef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 1
/* http://www.opengl.org/registry/specs/ARB/vertex_buffer_object.txt */
#define GL_BUFFER_SIZE_ARB                       0x8764
#define GL_BUFFER_USAGE_ARB                      0x8765
#define GL_ARRAY_BUFFER_ARB                      0x8892
#define GL_ELEMENT_ARRAY_BUFFER_ARB              0x8893
#define GL_ARRAY_BUFFER_BINDING_ARB              0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB      0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB       0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB       0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB        0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB        0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB    0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB       0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_READ_ONLY_ARB                         0x88B8
#define GL_WRITE_ONLY_ARB                        0x88B9
#define GL_READ_WRITE_ARB                        0x88BA
#define GL_BUFFER_ACCESS_ARB                     0x88BB
#define GL_BUFFER_MAPPED_ARB                     0x88BC
#define GL_BUFFER_MAP_POINTER_ARB                0x88BD
#define GL_STREAM_DRAW_ARB                       0x88E0
#define GL_STREAM_READ_ARB                       0x88E1
#define GL_STREAM_COPY_ARB                       0x88E2
#define GL_STATIC_DRAW_ARB                       0x88E4
#define GL_STATIC_READ_ARB                       0x88E5
#define GL_STATIC_COPY_ARB                       0x88E6
#define GL_DYNAMIC_DRAW_ARB                      0x88E8
#define GL_DYNAMIC_READ_ARB                      0x88E9
#define GL_DYNAMIC_COPY_ARB                      0x88EA
typedef ptrdiff_t GLsizeiptrARB;
typedef ptrdiff_t GLintptrARB;
typedef void (GLAPIENTRY * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint* buffers);
typedef void (GLAPIENTRY * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint* buffers);
typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void** params);
typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERARBPROC) (GLuint buffer);
typedef void * (GLAPIENTRY * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDBUFFERARBPROC glBindBufferARB;
extern PFNGLBUFFERDATAARBPROC glBufferDataARB;
extern PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
extern PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
extern PFNGLGENBUFFERSARBPROC glGenBuffersARB;
extern PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
extern PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
extern PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
extern PFNGLISBUFFERARBPROC glIsBufferARB;
extern PFNGLMAPBUFFERARBPROC glMapBufferARB;
extern PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_buffer_object*/

#ifndef GL_ARB_vertex_program
#define GL_ARB_vertex_program 1
/* http://www.opengl.org/registry/specs/ARB/vertex_program.txt */
#define GL_COLOR_SUM_ARB                         0x8458
#define GL_VERTEX_PROGRAM_ARB                    0x8620
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB       0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB          0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB        0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB          0x8625
#define GL_CURRENT_VERTEX_ATTRIB_ARB             0x8626
#define GL_PROGRAM_LENGTH_ARB                    0x8627
#define GL_PROGRAM_STRING_ARB                    0x8628
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB    0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB              0x862F
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB        0x8640
#define GL_CURRENT_MATRIX_ARB                    0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB         0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB           0x8643
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB       0x8645
#define GL_PROGRAM_ERROR_POSITION_ARB            0x864B
#define GL_PROGRAM_BINDING_ARB                   0x8677
#define GL_MAX_VERTEX_ATTRIBS_ARB                0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB    0x886A
#define GL_PROGRAM_ERROR_STRING_ARB              0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB              0x8875
#define GL_PROGRAM_FORMAT_ARB                    0x8876
#define GL_PROGRAM_INSTRUCTIONS_ARB              0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB          0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB       0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB   0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB               0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB           0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB        0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB    0x88A7
#define GL_PROGRAM_PARAMETERS_ARB                0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB            0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB         0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB     0x88AB
#define GL_PROGRAM_ATTRIBS_ARB                   0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB               0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB            0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB        0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB         0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB     0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB  0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB      0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB        0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB       0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB          0x88B7
#define GL_MATRIX0_ARB                           0x88C0
#define GL_MATRIX1_ARB                           0x88C1
#define GL_MATRIX2_ARB                           0x88C2
#define GL_MATRIX3_ARB                           0x88C3
#define GL_MATRIX4_ARB                           0x88C4
#define GL_MATRIX5_ARB                           0x88C5
#define GL_MATRIX6_ARB                           0x88C6
#define GL_MATRIX7_ARB                           0x88C7
#define GL_MATRIX8_ARB                           0x88C8
#define GL_MATRIX9_ARB                           0x88C9
#define GL_MATRIX10_ARB                          0x88CA
#define GL_MATRIX11_ARB                          0x88CB
#define GL_MATRIX12_ARB                          0x88CC
#define GL_MATRIX13_ARB                          0x88CD
#define GL_MATRIX14_ARB                          0x88CE
#define GL_MATRIX15_ARB                          0x88CF
#define GL_MATRIX16_ARB                          0x88D0
#define GL_MATRIX17_ARB                          0x88D1
#define GL_MATRIX18_ARB                          0x88D2
#define GL_MATRIX19_ARB                          0x88D3
#define GL_MATRIX20_ARB                          0x88D4
#define GL_MATRIX21_ARB                          0x88D5
#define GL_MATRIX22_ARB                          0x88D6
#define GL_MATRIX23_ARB                          0x88D7
#define GL_MATRIX24_ARB                          0x88D8
#define GL_MATRIX25_ARB                          0x88D9
#define GL_MATRIX26_ARB                          0x88DA
#define GL_MATRIX27_ARB                          0x88DB
#define GL_MATRIX28_ARB                          0x88DC
#define GL_MATRIX29_ARB                          0x88DD
#define GL_MATRIX30_ARB                          0x88DE
#define GL_MATRIX31_ARB                          0x88DF
typedef void (GLAPIENTRY * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint* programs);
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (GLAPIENTRY * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint* programs);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void** pointer);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDPROGRAMARBPROC glBindProgramARB;
extern PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
extern PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
extern PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
extern PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
extern PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
extern PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
extern PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
extern PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
extern PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
extern PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
extern PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
extern PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
extern PFNGLISPROGRAMARBPROC glIsProgramARB;
extern PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
extern PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
extern PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
extern PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
extern PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
extern PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
extern PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
extern PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
extern PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
extern PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
extern PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
extern PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
extern PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
extern PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
extern PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
extern PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
extern PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
extern PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
extern PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
extern PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
extern PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
extern PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
extern PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
extern PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
extern PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
extern PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
extern PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
extern PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
extern PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
extern PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
extern PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
extern PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
extern PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
extern PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
extern PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
extern PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
extern PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
extern PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
extern PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
extern PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
extern PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
extern PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
extern PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
extern PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
extern PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
extern PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_program*/

#ifndef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 1
/* http://www.opengl.org/registry/specs/ARB/vertex_shader.txt */
#define GL_VERTEX_SHADER_ARB                     0x8B31
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB     0x8B4A
#define GL_MAX_VARYING_FLOATS_ARB                0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB    0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB  0x8B4D
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB          0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB* name);
typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
extern PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
extern PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_shader*/

#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
/* http://www.opengl.org/registry/specs/ARB/vertex_type_10f_11f_11f_rev.txt */
#define GL_UNSIGNED_INT_10F_11F_11F_REV          0x8C3B
#endif /*GL_ARB_vertex_type_10f_11f_11f_rev*/

#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 1
/* http://www.opengl.org/registry/specs/ARB/vertex_type_2_10_10_10_rev.txt */
#define GL_UNSIGNED_INT_2_10_10_10_REV           0x8368
#define GL_INT_2_10_10_10_REV                    0x8D9F
typedef void (GLAPIENTRY * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (GLAPIENTRY * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint* color);
typedef void (GLAPIENTRY * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
typedef void (GLAPIENTRY * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint* color);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint* color);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
typedef void (GLAPIENTRY * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint* coords);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
typedef void (GLAPIENTRY * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORP3UIPROC glColorP3ui;
extern PFNGLCOLORP3UIVPROC glColorP3uiv;
extern PFNGLCOLORP4UIPROC glColorP4ui;
extern PFNGLCOLORP4UIVPROC glColorP4uiv;
extern PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
extern PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
extern PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
extern PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
extern PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
extern PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
extern PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
extern PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
extern PFNGLNORMALP3UIPROC glNormalP3ui;
extern PFNGLNORMALP3UIVPROC glNormalP3uiv;
extern PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
extern PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
extern PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
extern PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
extern PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
extern PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
extern PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
extern PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
extern PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
extern PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
extern PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
extern PFNGLVERTEXP2UIPROC glVertexP2ui;
extern PFNGLVERTEXP2UIVPROC glVertexP2uiv;
extern PFNGLVERTEXP3UIPROC glVertexP3ui;
extern PFNGLVERTEXP3UIVPROC glVertexP3uiv;
extern PFNGLVERTEXP4UIPROC glVertexP4ui;
extern PFNGLVERTEXP4UIVPROC glVertexP4uiv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_vertex_type_2_10_10_10_rev*/

#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array 1
/* http://www.opengl.org/registry/specs/ARB/viewport_array.txt */
#define GL_DEPTH_RANGE                           0x0B70
#define GL_VIEWPORT                              0x0BA2
#define GL_SCISSOR_BOX                           0x0C10
#define GL_SCISSOR_TEST                          0x0C11
#define GL_MAX_VIEWPORTS                         0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS                0x825C
#define GL_VIEWPORT_BOUNDS_RANGE                 0x825D
#define GL_LAYER_PROVOKING_VERTEX                0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX       0x825F
#define GL_UNDEFINED_VERTEX                      0x8260
#define GL_FIRST_VERTEX_CONVENTION               0x8E4D
#define GL_LAST_VERTEX_CONVENTION                0x8E4E
#define GL_PROVOKING_VERTEX                      0x8E4F
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd * v);
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f);
typedef void (GLAPIENTRY * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble* data);
typedef void (GLAPIENTRY * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat* data);
typedef void (GLAPIENTRY * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint * v);
typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint * v);
typedef void (GLAPIENTRY * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat * v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
extern PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
extern PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
extern PFNGLGETFLOATI_VPROC glGetFloati_v;
extern PFNGLSCISSORARRAYVPROC glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
extern PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_viewport_array*/

#ifndef GL_ARB_window_pos
#define GL_ARB_window_pos 1
/* http://www.opengl.org/registry/specs/ARB/window_pos.txt */
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVARBPROC) (const GLint* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVARBPROC) (const GLshort* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVARBPROC) (const GLint* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVARBPROC) (const GLshort* p);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
extern PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
extern PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
extern PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
extern PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
extern PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
extern PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
extern PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
extern PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
extern PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
extern PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
extern PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
extern PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
extern PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
extern PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
extern PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ARB_window_pos*/

#ifndef GL_ATIX_point_sprites
#define GL_ATIX_point_sprites 1
/* http://www.ati.com/developer/atiopengl.pdf */
#define GL_TEXTURE_POINT_MODE_ATIX               0x60B0
#define GL_TEXTURE_POINT_ONE_COORD_ATIX          0x60B1
#define GL_TEXTURE_POINT_SPRITE_ATIX             0x60B2
#define GL_POINT_SPRITE_CULL_MODE_ATIX           0x60B3
#define GL_POINT_SPRITE_CULL_CENTER_ATIX         0x60B4
#define GL_POINT_SPRITE_CULL_CLIP_ATIX           0x60B5
#endif /*GL_ATIX_point_sprites*/

#ifndef GL_ATIX_texture_env_combine3
#define GL_ATIX_texture_env_combine3 1
/* http://www.ati.com/developer/atiopengl.pdf */
#define GL_MODULATE_ADD_ATIX                     0x8744
#define GL_MODULATE_SIGNED_ADD_ATIX              0x8745
#define GL_MODULATE_SUBTRACT_ATIX                0x8746
#endif /*GL_ATIX_texture_env_combine3*/

#ifndef GL_ATIX_texture_env_route
#define GL_ATIX_texture_env_route 1
/* http://www.ati.com/developer/sdk/RadeonSDK/Html/Info/ATIX_texture_env_route.txt */
#define GL_SECONDARY_COLOR_ATIX                  0x8747
#define GL_TEXTURE_OUTPUT_RGB_ATIX               0x8748
#define GL_TEXTURE_OUTPUT_ALPHA_ATIX             0x8749
#endif /*GL_ATIX_texture_env_route*/

#ifndef GL_ATIX_vertex_shader_output_point_size
#define GL_ATIX_vertex_shader_output_point_size 1
/* http://www.ati.com/developer/atiopengl.pdf */
#define GL_OUTPUT_POINT_SIZE_ATIX                0x610E
#endif /*GL_ATIX_vertex_shader_output_point_size*/

#ifndef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 1
/* http://www.opengl.org/registry/specs/ATI/draw_buffers.txt */
#define GL_MAX_DRAW_BUFFERS_ATI                  0x8824
#define GL_DRAW_BUFFER0_ATI                      0x8825
#define GL_DRAW_BUFFER1_ATI                      0x8826
#define GL_DRAW_BUFFER2_ATI                      0x8827
#define GL_DRAW_BUFFER3_ATI                      0x8828
#define GL_DRAW_BUFFER4_ATI                      0x8829
#define GL_DRAW_BUFFER5_ATI                      0x882A
#define GL_DRAW_BUFFER6_ATI                      0x882B
#define GL_DRAW_BUFFER7_ATI                      0x882C
#define GL_DRAW_BUFFER8_ATI                      0x882D
#define GL_DRAW_BUFFER9_ATI                      0x882E
#define GL_DRAW_BUFFER10_ATI                     0x882F
#define GL_DRAW_BUFFER11_ATI                     0x8830
#define GL_DRAW_BUFFER12_ATI                     0x8831
#define GL_DRAW_BUFFER13_ATI                     0x8832
#define GL_DRAW_BUFFER14_ATI                     0x8833
#define GL_DRAW_BUFFER15_ATI                     0x8834
typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum* bufs);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_draw_buffers*/

#ifndef GL_ATI_element_array
#define GL_ATI_element_array 1
/* http://www.opengl.org/registry/specs/ATI/element_array.txt */
#define GL_ELEMENT_ARRAY_ATI                     0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI                0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI             0x876A
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
extern PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
extern PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_element_array*/

#ifndef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 1
/* http://oss.sgi.com/projects/ogl-sample/registry/ATI/envmap_bumpmap.txt */
#define GL_BUMP_ROT_MATRIX_ATI                   0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI              0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI                0x8777
#define GL_BUMP_TEX_UNITS_ATI                    0x8778
#define GL_DUDV_ATI                              0x8779
#define GL_DU8DV8_ATI                            0x877A
#define GL_BUMP_ENVMAP_ATI                       0x877B
#define GL_BUMP_TARGET_ATI                       0x877C
typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
extern PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
extern PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
extern PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_envmap_bumpmap*/

#ifndef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 1
/* http://www.opengl.org/registry/specs/ATI/fragment_shader.txt */
#define GL_2X_BIT_ATI                            0x00000001
#define GL_RED_BIT_ATI                           0x00000001
#define GL_4X_BIT_ATI                            0x00000002
#define GL_COMP_BIT_ATI                          0x00000002
#define GL_GREEN_BIT_ATI                         0x00000002
#define GL_8X_BIT_ATI                            0x00000004
#define GL_BLUE_BIT_ATI                          0x00000004
#define GL_NEGATE_BIT_ATI                        0x00000004
#define GL_BIAS_BIT_ATI                          0x00000008
#define GL_HALF_BIT_ATI                          0x00000008
#define GL_QUARTER_BIT_ATI                       0x00000010
#define GL_EIGHTH_BIT_ATI                        0x00000020
#define GL_SATURATE_BIT_ATI                      0x00000040
#define GL_FRAGMENT_SHADER_ATI                   0x8920
#define GL_REG_0_ATI                             0x8921
#define GL_REG_1_ATI                             0x8922
#define GL_REG_2_ATI                             0x8923
#define GL_REG_3_ATI                             0x8924
#define GL_REG_4_ATI                             0x8925
#define GL_REG_5_ATI                             0x8926
#define GL_CON_0_ATI                             0x8941
#define GL_CON_1_ATI                             0x8942
#define GL_CON_2_ATI                             0x8943
#define GL_CON_3_ATI                             0x8944
#define GL_CON_4_ATI                             0x8945
#define GL_CON_5_ATI                             0x8946
#define GL_CON_6_ATI                             0x8947
#define GL_CON_7_ATI                             0x8948
#define GL_MOV_ATI                               0x8961
#define GL_ADD_ATI                               0x8963
#define GL_MUL_ATI                               0x8964
#define GL_SUB_ATI                               0x8965
#define GL_DOT3_ATI                              0x8966
#define GL_DOT4_ATI                              0x8967
#define GL_MAD_ATI                               0x8968
#define GL_LERP_ATI                              0x8969
#define GL_CND_ATI                               0x896A
#define GL_CND0_ATI                              0x896B
#define GL_DOT2_ADD_ATI                          0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI            0x896D
#define GL_SWIZZLE_STR_ATI                       0x8976
#define GL_SWIZZLE_STQ_ATI                       0x8977
#define GL_SWIZZLE_STR_DR_ATI                    0x8978
#define GL_SWIZZLE_STQ_DQ_ATI                    0x8979
#define GL_NUM_FRAGMENT_REGISTERS_ATI            0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI            0x896F
#define GL_NUM_PASSES_ATI                        0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI         0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI            0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI           0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI               0x8975
#define GL_SWIZZLE_STRQ_ATI                      0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI                   0x897B
typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (GLAPIENTRY * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
typedef void (GLAPIENTRY * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (GLAPIENTRY * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLENDFRAGMENTSHADERATIPROC) (void);
typedef GLuint (GLAPIENTRY * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
typedef void (GLAPIENTRY * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
typedef void (GLAPIENTRY * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
typedef void (GLAPIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
extern PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
extern PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
extern PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
extern PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
extern PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
extern PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
extern PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
extern PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
extern PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
extern PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
extern PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
extern PFNGLSAMPLEMAPATIPROC glSampleMapATI;
extern PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_fragment_shader*/

#ifndef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 1
/* http://www.opengl.org/registry/specs/ATI/map_object_buffer.txt */
typedef void * (GLAPIENTRY * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
extern PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_map_object_buffer*/

#ifndef GL_ATI_meminfo
#define GL_ATI_meminfo 1
/* http://www.opengl.org/registry/specs/ATI/meminfo.txt */
#define GL_VBO_FREE_MEMORY_ATI                   0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI               0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI          0x87FD
#endif /*GL_ATI_meminfo*/

#ifndef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 1
/* http://www.opengl.org/registry/specs/ATI/pn_triangles.txt */
#define GL_PN_TRIANGLES_ATI                      0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI           0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI          0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI    0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI    0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI     0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI   0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
typedef void (GLAPIENTRY * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
extern PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_pn_triangles*/

#ifndef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 1
/* http://www.opengl.org/registry/specs/ATI/separate_stencil.txt */
#define GL_STENCIL_BACK_FUNC_ATI                 0x8800
#define GL_STENCIL_BACK_FAIL_ATI                 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI      0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI      0x8803
typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
extern PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_separate_stencil*/

#ifndef GL_ATI_shader_texture_lod
#define GL_ATI_shader_texture_lod 1
#endif /*GL_ATI_shader_texture_lod*/

#ifndef GL_ATI_texture_compression_3dc
#define GL_ATI_texture_compression_3dc 1
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI    0x8837
#endif /*GL_ATI_texture_compression_3dc*/

#ifndef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 1
/* http://www.opengl.org/registry/specs/ATI/texture_env_combine3.txt */
#define GL_MODULATE_ADD_ATI                      0x8744
#define GL_MODULATE_SIGNED_ADD_ATI               0x8745
#define GL_MODULATE_SUBTRACT_ATI                 0x8746
#endif /*GL_ATI_texture_env_combine3*/

#ifndef GL_ATI_texture_float
#define GL_ATI_texture_float 1
/* http://www.opengl.org/registry/specs/ATI/texture_float.txt */
#define GL_RGBA_FLOAT32_ATI                      0x8814
#define GL_RGB_FLOAT32_ATI                       0x8815
#define GL_ALPHA_FLOAT32_ATI                     0x8816
#define GL_INTENSITY_FLOAT32_ATI                 0x8817
#define GL_LUMINANCE_FLOAT32_ATI                 0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI           0x8819
#define GL_RGBA_FLOAT16_ATI                      0x881A
#define GL_RGB_FLOAT16_ATI                       0x881B
#define GL_ALPHA_FLOAT16_ATI                     0x881C
#define GL_INTENSITY_FLOAT16_ATI                 0x881D
#define GL_LUMINANCE_FLOAT16_ATI                 0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI           0x881F
#endif /*GL_ATI_texture_float*/

#ifndef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 1
/* http://www.opengl.org/registry/specs/ATI/texture_mirror_once.txt */
#define GL_MIRROR_CLAMP_ATI                      0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_ATI              0x8743
#endif /*GL_ATI_texture_mirror_once*/

#ifndef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 1
/* http://www.opengl.org/registry/specs/ATI/text_fragment_shader.txt */
#define GL_TEXT_FRAGMENT_SHADER_ATI              0x8200
#endif /*GL_ATI_text_fragment_shader*/

#ifndef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 1
/* http://www.opengl.org/registry/specs/ATI/vertex_array_object.txt */
#define GL_STATIC_ATI                            0x8760
#define GL_DYNAMIC_ATI                           0x8761
#define GL_PRESERVE_ATI                          0x8762
#define GL_DISCARD_ATI                           0x8763
#define GL_OBJECT_BUFFER_SIZE_ATI                0x8764
#define GL_OBJECT_BUFFER_USAGE_ATI               0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI               0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI               0x8767
typedef void (GLAPIENTRY * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (GLAPIENTRY * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
typedef GLuint (GLAPIENTRY * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage);
typedef void (GLAPIENTRY * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
typedef void (GLAPIENTRY * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
extern PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
extern PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
extern PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
extern PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
extern PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
extern PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
extern PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
extern PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
extern PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
extern PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
extern PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_vertex_array_object*/

#ifndef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 1
/* http://www.opengl.org/registry/specs/ATI/vertex_attrib_array_object.txt */
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
extern PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
extern PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_vertex_attrib_array_object*/

#ifndef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 1
/* http://www.opengl.org/registry/specs/ATI/vertex_streams.txt */
#define GL_MAX_VERTEX_STREAMS_ATI                0x876B
#define GL_VERTEX_SOURCE_ATI                     0x876C
#define GL_VERTEX_STREAM0_ATI                    0x876D
#define GL_VERTEX_STREAM1_ATI                    0x876E
#define GL_VERTEX_STREAM2_ATI                    0x876F
#define GL_VERTEX_STREAM3_ATI                    0x8770
#define GL_VERTEX_STREAM4_ATI                    0x8771
#define GL_VERTEX_STREAM5_ATI                    0x8772
#define GL_VERTEX_STREAM6_ATI                    0x8773
#define GL_VERTEX_STREAM7_ATI                    0x8774
typedef void (GLAPIENTRY * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte x, GLbyte y, GLbyte z);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
extern PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
extern PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
extern PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
extern PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
extern PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
extern PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
extern PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
extern PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
extern PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
extern PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
extern PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
extern PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
extern PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
extern PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
extern PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
extern PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
extern PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
extern PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
extern PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
extern PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
extern PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
extern PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
extern PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
extern PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
extern PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
extern PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
extern PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
extern PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
extern PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
extern PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
extern PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
extern PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
extern PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
extern PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
extern PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
extern PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
extern PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
extern PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
extern PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
extern PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
extern PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
extern PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
extern PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
extern PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_ATI_vertex_streams*/

#ifndef GL_EGL_KHR_context_flush_control
#define GL_EGL_KHR_context_flush_control 1
/* http://www.opengl.org/registry/specs/KHR/context_flush_control.txt */
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR 0x0000
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_KHR      0x2097
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x2098
#define GL_CONTEXT_RELEASE_BEHAVIOR              0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH        0x82FC
#endif /*GL_EGL_KHR_context_flush_control*/

#ifndef GL_EGL_NV_robustness_video_memory_purge
#define GL_EGL_NV_robustness_video_memory_purge 1
/* http://www.opengl.org/registry/specs/NV/robustness_video_memory_purge.txt */
#define GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x334C
#define GL_PURGED_CONTEXT_RESET_NV               0x92BB
#endif /*GL_EGL_NV_robustness_video_memory_purge*/

#ifndef GL_EXT_422_pixels
#define GL_EXT_422_pixels 1
/* http://www.opengl.org/registry/specs/EXT/422_pixels.txt */
#define GL_422_EXT                               0x80CC
#define GL_422_REV_EXT                           0x80CD
#define GL_422_AVERAGE_EXT                       0x80CE
#define GL_422_REV_AVERAGE_EXT                   0x80CF
#endif /*GL_EXT_422_pixels*/

#ifndef GL_EXT_abgr
#define GL_EXT_abgr 1
/* http://www.opengl.org/registry/specs/EXT/abgr.txt */
#define GL_ABGR_EXT                              0x8000
#endif /*GL_EXT_abgr*/

#ifndef GL_EXT_bgra
#define GL_EXT_bgra 1
/* http://www.opengl.org/registry/specs/EXT/bgra.txt */
#define GL_BGR_EXT                               0x80E0
#define GL_BGRA_EXT                              0x80E1
#endif /*GL_EXT_bgra*/

#ifndef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_bindable_uniform.txt */
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT      0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT    0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT    0x8DE4
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT         0x8DED
#define GL_UNIFORM_BUFFER_BINDING_EXT            0x8DEF
#define GL_UNIFORM_BUFFER_EXT                    0x8DEE
typedef void (GLAPIENTRY * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
typedef GLintptr (GLAPIENTRY * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
extern PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
extern PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_bindable_uniform*/

#ifndef GL_EXT_blend_color
#define GL_EXT_blend_color 1
/* http://www.opengl.org/registry/specs/EXT/blend_color.txt */
#define GL_CONSTANT_COLOR_EXT                    0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT          0x8002
#define GL_CONSTANT_ALPHA_EXT                    0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT          0x8004
#define GL_BLEND_COLOR_EXT                       0x8005
typedef void (GLAPIENTRY * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_blend_color*/

#ifndef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 1
/* http://www.opengl.org/registry/specs/EXT/blend_equation_separate.txt */
#define GL_BLEND_EQUATION_RGB_EXT                0x8009
#define GL_BLEND_EQUATION_ALPHA_EXT              0x883D
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_blend_equation_separate*/

#ifndef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 1
/* http://www.opengl.org/registry/specs/EXT/blend_func_separate.txt */
#define GL_BLEND_DST_RGB_EXT                     0x80C8
#define GL_BLEND_SRC_RGB_EXT                     0x80C9
#define GL_BLEND_DST_ALPHA_EXT                   0x80CA
#define GL_BLEND_SRC_ALPHA_EXT                   0x80CB
typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_blend_func_separate*/

#ifndef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 1
/* http://www.opengl.org/registry/specs/EXT/blend_logic_op.txt */
#endif /*GL_EXT_blend_logic_op*/

#ifndef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 1
/* http://www.opengl.org/registry/specs/EXT/blend_minmax.txt */
#define GL_FUNC_ADD_EXT                          0x8006
#define GL_MIN_EXT                               0x8007
#define GL_MAX_EXT                               0x8008
#define GL_BLEND_EQUATION_EXT                    0x8009
typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_blend_minmax*/

#ifndef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 1
/* http://www.opengl.org/registry/specs/EXT/blend_subtract.txt */
#define GL_FUNC_SUBTRACT_EXT                     0x800A
#define GL_FUNC_REVERSE_SUBTRACT_EXT             0x800B
#endif /*GL_EXT_blend_subtract*/

#ifndef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 1
/* http://download.nvidia.com/developer/GLSL/GLSL%20Release%20Notes%20for%20Release%2060.pdf */
#define GL_CG_VERTEX_SHADER_EXT                  0x890E
#define GL_CG_FRAGMENT_SHADER_EXT                0x890F
#endif /*GL_EXT_Cg_shader*/

#ifndef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 1
/* http://www.opengl.org/registry/specs/EXT/clip_volume_hint.txt */
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT         0x80F0
#endif /*GL_EXT_clip_volume_hint*/

#ifndef GL_EXT_cmyka
#define GL_EXT_cmyka 1
/* http://www.opengl.org/registry/specs/EXT/cmyka.txt */
#define GL_CMYK_EXT                              0x800C
#define GL_CMYKA_EXT                             0x800D
#define GL_PACK_CMYK_HINT_EXT                    0x800E
#define GL_UNPACK_CMYK_HINT_EXT                  0x800F
#endif /*GL_EXT_cmyka*/

#ifndef GL_EXT_color_subtable
#define GL_EXT_color_subtable 1
/* http://www.opengl.org/registry/specs/EXT/color_subtable.txt */
typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
extern PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_color_subtable*/

#ifndef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 1
/* http://www.opengl.org/registry/specs/EXT/compiled_vertex_array.txt */
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT          0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT          0x81A9
typedef void (GLAPIENTRY * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
typedef void (GLAPIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
extern PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_compiled_vertex_array*/

#ifndef GL_EXT_convolution
#define GL_EXT_convolution 1
/* http://www.opengl.org/registry/specs/EXT/convolution.txt */
#define GL_CONVOLUTION_1D_EXT                    0x8010
#define GL_CONVOLUTION_2D_EXT                    0x8011
#define GL_SEPARABLE_2D_EXT                      0x8012
#define GL_CONVOLUTION_BORDER_MODE_EXT           0x8013
#define GL_CONVOLUTION_FILTER_SCALE_EXT          0x8014
#define GL_CONVOLUTION_FILTER_BIAS_EXT           0x8015
#define GL_REDUCE_EXT                            0x8016
#define GL_CONVOLUTION_FORMAT_EXT                0x8017
#define GL_CONVOLUTION_WIDTH_EXT                 0x8018
#define GL_CONVOLUTION_HEIGHT_EXT                0x8019
#define GL_MAX_CONVOLUTION_WIDTH_EXT             0x801A
#define GL_MAX_CONVOLUTION_HEIGHT_EXT            0x801B
#define GL_POST_CONVOLUTION_RED_SCALE_EXT        0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT      0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT       0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT      0x801F
#define GL_POST_CONVOLUTION_RED_BIAS_EXT         0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT       0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT        0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT       0x8023
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
extern PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
extern PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
extern PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
extern PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
extern PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
extern PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
extern PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
extern PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
extern PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
extern PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
extern PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
extern PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_convolution*/

#ifndef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 1
/* http://www.opengl.org/registry/specs/EXT/coordinate_frame.txt */
#define GL_TANGENT_ARRAY_EXT                     0x8439
#define GL_BINORMAL_ARRAY_EXT                    0x843A
#define GL_CURRENT_TANGENT_EXT                   0x843B
#define GL_CURRENT_BINORMAL_EXT                  0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT                0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT              0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT               0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT             0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT             0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT            0x8443
#define GL_MAP1_TANGENT_EXT                      0x8444
#define GL_MAP2_TANGENT_EXT                      0x8445
#define GL_MAP1_BINORMAL_EXT                     0x8446
#define GL_MAP2_BINORMAL_EXT                     0x8447
typedef void (GLAPIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer);
typedef void (GLAPIENTRY * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
extern PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_coordinate_frame*/

#ifndef GL_EXT_copy_texture
#define GL_EXT_copy_texture 1
/* http://www.opengl.org/registry/specs/EXT/copy_texture.txt */
typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
extern PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_copy_texture*/

#ifndef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 1
/* http://www.opengl.org/registry/specs/EXT/cull_vertex.txt */
#define GL_CULL_VERTEX_EXT                       0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT          0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT       0x81AC
typedef void (GLAPIENTRY * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
extern PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_cull_vertex*/

#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label 1
/* http://www.opengl.org/registry/specs/EXT/EXT_debug_label.txt */
#define GL_PROGRAM_PIPELINE_OBJECT_EXT           0x8A4F
#define GL_PROGRAM_OBJECT_EXT                    0x8B40
#define GL_SHADER_OBJECT_EXT                     0x8B48
#define GL_BUFFER_OBJECT_EXT                     0x9151
#define GL_QUERY_OBJECT_EXT                      0x9153
#define GL_VERTEX_ARRAY_OBJECT_EXT               0x9154
typedef void (GLAPIENTRY * PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (GLAPIENTRY * PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar* label);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETOBJECTLABELEXTPROC glGetObjectLabelEXT;
extern PFNGLLABELOBJECTEXTPROC glLabelObjectEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_debug_label*/

#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker 1
/* http://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_marker.txt */
typedef void (GLAPIENTRY * PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar* marker);
typedef void (GLAPIENTRY * PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar* marker);
typedef void (GLAPIENTRY * PFNGLPOPGROUPMARKEREXTPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLINSERTEVENTMARKEREXTPROC glInsertEventMarkerEXT;
extern PFNGLPUSHGROUPMARKEREXTPROC glPushGroupMarkerEXT;
extern PFNGLPOPGROUPMARKEREXTPROC glPopGroupMarkerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_debug_marker*/

#ifndef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_EXT_depth_bounds_test.txt */
#define GL_DEPTH_BOUNDS_TEST_EXT                 0x8890
#define GL_DEPTH_BOUNDS_EXT                      0x8891
typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_depth_bounds_test*/

#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 1
/* http://www.opengl.org/registry/specs/EXT/direct_state_access.txt */
#define GL_PROGRAM_MATRIX_EXT                    0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT          0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT        0x8E2F
/* void glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor) */
typedef void (GLAPIENTRY * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
typedef GLenum (GLAPIENTRY * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
typedef void (GLAPIENTRY * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (GLAPIENTRY * PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (GLAPIENTRY * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (GLAPIENTRY * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
typedef void (GLAPIENTRY * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, void *img);
typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, void *img);
typedef void (GLAPIENTRY * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void** params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);
typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void** params);
typedef void (GLAPIENTRY * PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void** params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint* param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void** param);
typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void** param);
typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAPIENTRY * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum matrixMode);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULTDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULTFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXORTHOEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
typedef void (GLAPIENTRY * PFNGLMATRIXPOPEXTPROC) (GLenum matrixMode);
typedef void (GLAPIENTRY * PFNGLMATRIXPUSHEXTPROC) (GLenum matrixMode);
typedef void (GLAPIENTRY * PFNGLMATRIXROTATEDEXTPROC) (GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLMATRIXROTATEFEXTPROC) (GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLMATRIXSCALEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLMATRIXSCALEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* param);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* param);
typedef void (GLAPIENTRY * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (GLAPIENTRY * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint* params);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat* param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* param);
typedef void (GLAPIENTRY * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef GLboolean (GLAPIENTRY * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
extern PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
extern PFNGLDISABLECLIENTSTATEIEXTPROC glDisableClientStateiEXT;
extern PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glDisableVertexArrayAttribEXT;
extern PFNGLDISABLEVERTEXARRAYEXTPROC glDisableVertexArrayEXT;
extern PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
extern PFNGLENABLECLIENTSTATEIEXTPROC glEnableClientStateiEXT;
extern PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glEnableVertexArrayAttribEXT;
extern PFNGLENABLEVERTEXARRAYEXTPROC glEnableVertexArrayEXT;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
extern PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
extern PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
extern PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
extern PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
extern PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
extern PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
extern PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
extern PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
extern PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
extern PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
extern PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
extern PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
extern PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
extern PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
extern PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
extern PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
extern PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
extern PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
extern PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
extern PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
extern PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
extern PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
extern PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
extern PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
extern PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
extern PFNGLGETPOINTERI_VEXTPROC glGetPointeri_vEXT;
extern PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
extern PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
extern PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
extern PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
extern PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
extern PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
extern PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
extern PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glGetVertexArrayIntegeri_vEXT;
extern PFNGLGETVERTEXARRAYINTEGERVEXTPROC glGetVertexArrayIntegervEXT;
extern PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glGetVertexArrayPointeri_vEXT;
extern PFNGLGETVERTEXARRAYPOINTERVEXTPROC glGetVertexArrayPointervEXT;
extern PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
extern PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
extern PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
extern PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
extern PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
extern PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
extern PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
extern PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
extern PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
extern PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
extern PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
extern PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
extern PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
extern PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
extern PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
extern PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
extern PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
extern PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
extern PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
extern PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
extern PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
extern PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
extern PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
extern PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
extern PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
extern PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
extern PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
extern PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
extern PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
extern PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
extern PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
extern PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
extern PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
extern PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
extern PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
extern PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
extern PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
extern PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
extern PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
extern PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
extern PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
extern PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
extern PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
extern PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
extern PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
extern PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
extern PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
extern PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
extern PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
extern PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
extern PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
extern PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
extern PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
extern PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
extern PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
extern PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
extern PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
extern PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
extern PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
extern PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
extern PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
extern PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
extern PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
extern PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
extern PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
extern PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
extern PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
extern PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
extern PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
extern PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
extern PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
extern PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
extern PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
extern PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
extern PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
extern PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
extern PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
extern PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
extern PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
extern PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
extern PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
extern PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
extern PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
extern PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
extern PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
extern PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
extern PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
extern PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
extern PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
extern PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
extern PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glVertexArrayColorOffsetEXT;
extern PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glVertexArrayEdgeFlagOffsetEXT;
extern PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glVertexArrayFogCoordOffsetEXT;
extern PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glVertexArrayIndexOffsetEXT;
extern PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glVertexArrayMultiTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glVertexArrayNormalOffsetEXT;
extern PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glVertexArraySecondaryColorOffsetEXT;
extern PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glVertexArrayTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glVertexArrayVertexAttribIOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glVertexArrayVertexAttribOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glVertexArrayVertexOffsetEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_direct_state_access*/

#ifndef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 1
/* http://www.opengl.org/registry/specs/EXT/draw_buffers2.txt */
typedef void (GLAPIENTRY * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAPIENTRY * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (GLAPIENTRY * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (GLAPIENTRY * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum value, GLuint index, GLboolean* data);
typedef void (GLAPIENTRY * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum value, GLuint index, GLint* data);
typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
extern PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
extern PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
extern PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
extern PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
extern PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_draw_buffers2*/

#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_draw_instanced.txt */
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
extern PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_draw_instanced*/

#ifndef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 1
/* http://oss.sgi.com/projects/ogl-sample/registry/EXT/draw_range_elements.txt */
#define GL_MAX_ELEMENTS_VERTICES_EXT             0x80E8
#define GL_MAX_ELEMENTS_INDICES_EXT              0x80E9
typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_draw_range_elements*/

#ifndef GL_EXT_fog_coord
#define GL_EXT_fog_coord 1
/* http://oss.sgi.com/projects/ogl-sample/registry/EXT/fog_coord.txt */
#define GL_FOG_COORDINATE_SOURCE_EXT             0x8450
#define GL_FOG_COORDINATE_EXT                    0x8451
#define GL_FRAGMENT_DEPTH_EXT                    0x8452
#define GL_CURRENT_FOG_COORDINATE_EXT            0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT         0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT       0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT      0x8456
#define GL_FOG_COORDINATE_ARRAY_EXT              0x8457
typedef void (GLAPIENTRY * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
extern PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
extern PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
extern PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
extern PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_fog_coord*/

#ifndef GL_EXT_fragment_lighting
#define GL_EXT_fragment_lighting 1
/* http://www.opengl.org/registry/specs/EXT/fragment_lighting.txt */
#define GL_FRAGMENT_LIGHTING_EXT                 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_EXT           0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT      0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_EXT               0x8404
#define GL_MAX_ACTIVE_LIGHTS_EXT                 0x8405
#define GL_CURRENT_RASTER_NORMAL_EXT             0x8406
#define GL_LIGHT_ENV_MODE_EXT                    0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT     0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT      0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT 0x840B
#define GL_FRAGMENT_LIGHT0_EXT                   0x840C
#define GL_FRAGMENT_LIGHT7_EXT                   0x8413
typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALEXTPROC) (GLenum face, GLenum mode);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFEXTPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVEXTPROC) (GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIEXTPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVEXTPROC) (GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFEXTPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIEXTPROC) (GLenum light, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFEXTPROC) (GLenum face, GLenum pname, const GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIEXTPROC) (GLenum face, GLenum pname, const GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLLIGHTENVIEXTPROC) (GLenum pname, GLint param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAGMENTCOLORMATERIALEXTPROC glFragmentColorMaterialEXT;
extern PFNGLFRAGMENTLIGHTMODELFEXTPROC glFragmentLightModelfEXT;
extern PFNGLFRAGMENTLIGHTMODELFVEXTPROC glFragmentLightModelfvEXT;
extern PFNGLFRAGMENTLIGHTMODELIEXTPROC glFragmentLightModeliEXT;
extern PFNGLFRAGMENTLIGHTMODELIVEXTPROC glFragmentLightModelivEXT;
extern PFNGLFRAGMENTLIGHTFEXTPROC glFragmentLightfEXT;
extern PFNGLFRAGMENTLIGHTFVEXTPROC glFragmentLightfvEXT;
extern PFNGLFRAGMENTLIGHTIEXTPROC glFragmentLightiEXT;
extern PFNGLFRAGMENTLIGHTIVEXTPROC glFragmentLightivEXT;
extern PFNGLFRAGMENTMATERIALFEXTPROC glFragmentMaterialfEXT;
extern PFNGLFRAGMENTMATERIALFVEXTPROC glFragmentMaterialfvEXT;
extern PFNGLFRAGMENTMATERIALIEXTPROC glFragmentMaterialiEXT;
extern PFNGLFRAGMENTMATERIALIVEXTPROC glFragmentMaterialivEXT;
extern PFNGLGETFRAGMENTLIGHTFVEXTPROC glGetFragmentLightfvEXT;
extern PFNGLGETFRAGMENTLIGHTIVEXTPROC glGetFragmentLightivEXT;
extern PFNGLGETFRAGMENTMATERIALFVEXTPROC glGetFragmentMaterialfvEXT;
extern PFNGLGETFRAGMENTMATERIALIVEXTPROC glGetFragmentMaterialivEXT;
extern PFNGLLIGHTENVIEXTPROC glLightEnviEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_fragment_lighting*/

#ifndef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 1
/* http://www.opengl.org/registry/specs/EXT/framebuffer_blit.txt */
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT          0x8CA6
#define GL_READ_FRAMEBUFFER_EXT                  0x8CA8
#define GL_DRAW_FRAMEBUFFER_EXT                  0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING_EXT          0x8CAA
typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_framebuffer_blit*/

#ifndef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 1
/* http://www.opengl.org/registry/specs/EXT/framebuffer_multisample.txt */
#define GL_RENDERBUFFER_SAMPLES_EXT              0x8CAB
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_MAX_SAMPLES_EXT                       0x8D57
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_MAX_SAMPLES_EXT                       0x8D57
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_framebuffer_multisample*/

#ifndef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 1
/* http://www.opengl.org/registry/specs/EXT/framebuffer_multisample_blit_scaled.txt */
#define GL_SCALED_RESOLVE_FASTEST_EXT            0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT             0x90BB
#endif /*GL_EXT_framebuffer_multisample_blit_scaled*/

#ifndef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 1
/* http://www.opengl.org/registry/specs/EXT/framebuffer_object.txt */
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT     0x0506
#define GL_MAX_RENDERBUFFER_SIZE_EXT             0x84E8
#define GL_FRAMEBUFFER_BINDING_EXT               0x8CA6
#define GL_RENDERBUFFER_BINDING_EXT              0x8CA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE_EXT              0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT    0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT           0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS_EXT             0x8CDF
#define GL_COLOR_ATTACHMENT0_EXT                 0x8CE0
#define GL_COLOR_ATTACHMENT1_EXT                 0x8CE1
#define GL_COLOR_ATTACHMENT2_EXT                 0x8CE2
#define GL_COLOR_ATTACHMENT3_EXT                 0x8CE3
#define GL_COLOR_ATTACHMENT4_EXT                 0x8CE4
#define GL_COLOR_ATTACHMENT5_EXT                 0x8CE5
#define GL_COLOR_ATTACHMENT6_EXT                 0x8CE6
#define GL_COLOR_ATTACHMENT7_EXT                 0x8CE7
#define GL_COLOR_ATTACHMENT8_EXT                 0x8CE8
#define GL_COLOR_ATTACHMENT9_EXT                 0x8CE9
#define GL_COLOR_ATTACHMENT10_EXT                0x8CEA
#define GL_COLOR_ATTACHMENT11_EXT                0x8CEB
#define GL_COLOR_ATTACHMENT12_EXT                0x8CEC
#define GL_COLOR_ATTACHMENT13_EXT                0x8CED
#define GL_COLOR_ATTACHMENT14_EXT                0x8CEE
#define GL_COLOR_ATTACHMENT15_EXT                0x8CEF
#define GL_DEPTH_ATTACHMENT_EXT                  0x8D00
#define GL_STENCIL_ATTACHMENT_EXT                0x8D20
#define GL_FRAMEBUFFER_EXT                       0x8D40
#define GL_RENDERBUFFER_EXT                      0x8D41
#define GL_RENDERBUFFER_WIDTH_EXT                0x8D42
#define GL_RENDERBUFFER_HEIGHT_EXT               0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT      0x8D44
#define GL_STENCIL_INDEX1_EXT                    0x8D46
#define GL_STENCIL_INDEX4_EXT                    0x8D47
#define GL_STENCIL_INDEX8_EXT                    0x8D48
#define GL_STENCIL_INDEX16_EXT                   0x8D49
#define GL_RENDERBUFFER_RED_SIZE_EXT             0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_EXT           0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_EXT            0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT           0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT           0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT         0x8D55
typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint* framebuffers);
typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint* renderbuffers);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint* framebuffers);
typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
extern PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
extern PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
extern PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
extern PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
extern PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
extern PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
extern PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
extern PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
extern PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
extern PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
extern PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
extern PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
extern PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
extern PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_framebuffer_object*/

#ifndef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_framebuffer_sRGB.txt */
#define GL_FRAMEBUFFER_SRGB_EXT                  0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT          0x8DBA
#endif /*GL_EXT_framebuffer_sRGB*/

#ifndef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_geometry_shader4.txt */
#define GL_GEOMETRY_SHADER_EXT                   0x8DD9
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT   0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT     0x8DDE
#define GL_MAX_VARYING_COMPONENTS_EXT            0x8B4B
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT   0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT      0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_GEOMETRY_VERTICES_OUT_EXT             0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_EXT               0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_EXT              0x8DDC
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT  0x8C29
#define GL_LINES_ADJACENCY_EXT                   0xA
#define GL_LINE_STRIP_ADJACENCY_EXT              0xB
#define GL_TRIANGLES_ADJACENCY_EXT               0xC
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT          0xD
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT    0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_PROGRAM_POINT_SIZE_EXT                0x8642
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
extern PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
extern PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_geometry_shader4*/

#ifndef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_gpu_program_parameters.txt */
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
extern PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_gpu_program_parameters*/

#ifndef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_gpu_shader4.txt */
#define GL_SAMPLER_1D_ARRAY_EXT                  0x8DC0
#define GL_SAMPLER_2D_ARRAY_EXT                  0x8DC1
#define GL_SAMPLER_BUFFER_EXT                    0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT           0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT           0x8DC4
#define GL_SAMPLER_CUBE_SHADOW_EXT               0x8DC5
#define GL_UNSIGNED_INT_VEC2_EXT                 0x8DC6
#define GL_UNSIGNED_INT_VEC3_EXT                 0x8DC7
#define GL_UNSIGNED_INT_VEC4_EXT                 0x8DC8
#define GL_INT_SAMPLER_1D_EXT                    0x8DC9
#define GL_INT_SAMPLER_2D_EXT                    0x8DCA
#define GL_INT_SAMPLER_3D_EXT                    0x8DCB
#define GL_INT_SAMPLER_CUBE_EXT                  0x8DCC
#define GL_INT_SAMPLER_2D_RECT_EXT               0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY_EXT              0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY_EXT              0x8DCF
#define GL_INT_SAMPLER_BUFFER_EXT                0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT           0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT           0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT           0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT         0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT      0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT     0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT     0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT       0x8DD8
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT       0x88FD
typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
extern PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
extern PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
extern PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
extern PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
extern PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
extern PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
extern PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
extern PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
extern PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
extern PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
extern PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
extern PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
extern PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
extern PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
extern PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
extern PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
extern PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
extern PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
extern PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
extern PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
extern PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
extern PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
extern PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
extern PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
extern PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
extern PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
extern PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
extern PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
extern PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
extern PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
extern PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
extern PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
extern PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_gpu_shader4*/

#ifndef GL_EXT_histogram
#define GL_EXT_histogram 1
/* http://www.opengl.org/registry/specs/EXT/histogram.txt */
#define GL_HISTOGRAM_EXT                         0x8024
#define GL_PROXY_HISTOGRAM_EXT                   0x8025
#define GL_HISTOGRAM_WIDTH_EXT                   0x8026
#define GL_HISTOGRAM_FORMAT_EXT                  0x8027
#define GL_HISTOGRAM_RED_SIZE_EXT                0x8028
#define GL_HISTOGRAM_GREEN_SIZE_EXT              0x8029
#define GL_HISTOGRAM_BLUE_SIZE_EXT               0x802A
#define GL_HISTOGRAM_ALPHA_SIZE_EXT              0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT          0x802C
#define GL_HISTOGRAM_SINK_EXT                    0x802D
#define GL_MINMAX_EXT                            0x802E
#define GL_MINMAX_FORMAT_EXT                     0x802F
#define GL_MINMAX_SINK_EXT                       0x8030
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAPIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
extern PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
extern PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
extern PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
extern PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
extern PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
extern PFNGLHISTOGRAMEXTPROC glHistogramEXT;
extern PFNGLMINMAXEXTPROC glMinmaxEXT;
extern PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
extern PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_histogram*/

#ifndef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 1
/* http://www.opengl.org/registry/specs/EXT/index_array_formats.txt */
#endif /*GL_EXT_index_array_formats*/

#ifndef GL_EXT_index_func
#define GL_EXT_index_func 1
/* http://www.opengl.org/registry/specs/EXT/index_func.txt */
typedef void (GLAPIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLfloat ref);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_index_func*/

#ifndef GL_EXT_index_material
#define GL_EXT_index_material 1
/* http://www.opengl.org/registry/specs/EXT/index_material.txt */
typedef void (GLAPIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_index_material*/

#ifndef GL_EXT_index_texture
#define GL_EXT_index_texture 1
/* http://www.opengl.org/registry/specs/EXT/index_texture.txt */
#endif /*GL_EXT_index_texture*/

#ifndef GL_EXT_light_texture
#define GL_EXT_light_texture 1
/* http://www.opengl.org/registry/specs/EXT/light_texture.txt */
#define GL_FRAGMENT_MATERIAL_EXT                 0x8349
#define GL_FRAGMENT_NORMAL_EXT                   0x834A
#define GL_FRAGMENT_COLOR_EXT                    0x834C
#define GL_ATTENUATION_EXT                       0x834D
#define GL_SHADOW_ATTENUATION_EXT                0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT          0x834F
#define GL_TEXTURE_LIGHT_EXT                     0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT             0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT        0x8352
typedef void (GLAPIENTRY * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
typedef void (GLAPIENTRY * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
typedef void (GLAPIENTRY * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
extern PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
extern PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_light_texture*/

#ifndef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 1
/* http://www.opengl.org/registry/specs/EXT/misc_attribute.txt */
#endif /*GL_EXT_misc_attribute*/

#ifndef GL_EXT_multisample
#define GL_EXT_multisample 1
/* http://www.opengl.org/registry/specs/EXT/wgl_multisample.txt */
#define GL_MULTISAMPLE_EXT                       0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_EXT              0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_EXT               0x809F
#define GL_SAMPLE_MASK_EXT                       0x80A0
#define GL_1PASS_EXT                             0x80A1
#define GL_2PASS_0_EXT                           0x80A2
#define GL_2PASS_1_EXT                           0x80A3
#define GL_4PASS_0_EXT                           0x80A4
#define GL_4PASS_1_EXT                           0x80A5
#define GL_4PASS_2_EXT                           0x80A6
#define GL_4PASS_3_EXT                           0x80A7
#define GL_SAMPLE_BUFFERS_EXT                    0x80A8
#define GL_SAMPLES_EXT                           0x80A9
#define GL_SAMPLE_MASK_VALUE_EXT                 0x80AA
#define GL_SAMPLE_MASK_INVERT_EXT                0x80AB
#define GL_SAMPLE_PATTERN_EXT                    0x80AC
#define GL_MULTISAMPLE_BIT_EXT                   0x20000000
typedef void (GLAPIENTRY * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
extern PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_multisample*/

#ifndef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 1
/* http://www.opengl.org/registry/specs/EXT/multi_draw_arrays.txt */
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
extern PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_multi_draw_arrays*/

#ifndef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 1
/* http://www.opengl.org/registry/specs/EXT/packed_depth_stencil.txt */
#define GL_DEPTH_STENCIL_EXT                     0x84F9
#define GL_UNSIGNED_INT_24_8_EXT                 0x84FA
#define GL_DEPTH24_STENCIL8_EXT                  0x88F0
#define GL_TEXTURE_STENCIL_SIZE_EXT              0x88F1
#endif /*GL_EXT_packed_depth_stencil*/

#ifndef GL_EXT_packed_float
#define GL_EXT_packed_float 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_packed_float.txt */
#define GL_R11F_G11F_B10F_EXT                    0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT      0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT            0x8C3C
#endif /*GL_EXT_packed_float*/

#ifndef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 1
/* http://www.opengl.org/registry/specs/EXT/packed_pixels.txt */
#define GL_UNSIGNED_BYTE_3_3_2_EXT               0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT            0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT            0x8034
#define GL_UNSIGNED_INT_8_8_8_8_EXT              0x8035
#define GL_UNSIGNED_INT_10_10_10_2_EXT           0x8036
#endif /*GL_EXT_packed_pixels*/

#ifndef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 1
/* http://www.opengl.org/registry/specs/EXT/paletted_texture.txt */
#define GL_TEXTURE_1D                            0x0DE0
#define GL_TEXTURE_2D                            0x0DE1
#define GL_PROXY_TEXTURE_1D                      0x8063
#define GL_PROXY_TEXTURE_2D                      0x8064
#define GL_COLOR_TABLE_FORMAT_EXT                0x80D8
#define GL_COLOR_TABLE_WIDTH_EXT                 0x80D9
#define GL_COLOR_TABLE_RED_SIZE_EXT              0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE_EXT            0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE_EXT             0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE_EXT            0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT        0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT        0x80DF
#define GL_COLOR_INDEX1_EXT                      0x80E2
#define GL_COLOR_INDEX2_EXT                      0x80E3
#define GL_COLOR_INDEX4_EXT                      0x80E4
#define GL_COLOR_INDEX8_EXT                      0x80E5
#define GL_COLOR_INDEX12_EXT                     0x80E6
#define GL_COLOR_INDEX16_EXT                     0x80E7
#define GL_TEXTURE_INDEX_SIZE_EXT                0x80ED
#define GL_TEXTURE_CUBE_MAP_ARB                  0x8513
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB            0x851B
typedef void (GLAPIENTRY * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *data);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORTABLEEXTPROC glColorTableEXT;
extern PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
extern PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
extern PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_paletted_texture*/

#ifndef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_EXT_pixel_buffer_object.txt */
#define GL_PIXEL_PACK_BUFFER_EXT                 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_EXT               0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT         0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT       0x88EF
#endif /*GL_EXT_pixel_buffer_object*/

#ifndef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 1
/* http://www.opengl.org/registry/specs/EXT/pixel_transform.txt */
#define GL_PIXEL_TRANSFORM_2D_EXT                0x8330
#define GL_PIXEL_MAG_FILTER_EXT                  0x8331
#define GL_PIXEL_MIN_FILTER_EXT                  0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT                0x8333
#define GL_CUBIC_EXT                             0x8334
#define GL_AVERAGE_EXT                           0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT    0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT         0x8338
typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, const GLfloat param);
typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, const GLint param);
typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
extern PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
extern PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
extern PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
extern PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
extern PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_pixel_transform*/

#ifndef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 1
/* http://www.opengl.org/registry/specs/EXT/pixel_transform_color_table.txt */
#endif /*GL_EXT_pixel_transform_color_table*/

#ifndef GL_EXT_point_parameters
#define GL_EXT_point_parameters 1
/* http://www.opengl.org/registry/specs/EXT/point_parameters.txt */
#define GL_POINT_SIZE_MIN_EXT                    0x8126
#define GL_POINT_SIZE_MAX_EXT                    0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT         0x8128
#define GL_DISTANCE_ATTENUATION_EXT              0x8129
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
extern PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_point_parameters*/

#ifndef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 1
/* http://www.opengl.org/registry/specs/EXT/polygon_offset.txt */
#define GL_POLYGON_OFFSET_EXT                    0x8037
#define GL_POLYGON_OFFSET_FACTOR_EXT             0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT               0x8039
typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_polygon_offset*/

#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 1
/* http://www.opengl.org/registry/specs/EXT/polygon_offset_clamp.txt */
#define GL_POLYGON_OFFSET_CLAMP_EXT              0x8E1B
typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPOLYGONOFFSETCLAMPEXTPROC glPolygonOffsetClampEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_polygon_offset_clamp*/

#ifndef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 1
/* http://www.opengl.org/registry/specs/EXT/post_depth_coverage.txt */
#endif /*GL_EXT_post_depth_coverage*/

#ifndef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 1
/* http://www.opengl.org/registry/specs/EXT/provoking_vertex.txt */
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION_EXT           0x8E4D
#define GL_LAST_VERTEX_CONVENTION_EXT            0x8E4E
#define GL_PROVOKING_VERTEX_EXT                  0x8E4F
typedef void (GLAPIENTRY * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_provoking_vertex*/

#ifndef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 1
/* http://www.opengl.org/registry/specs/NV/framebuffer_mixed_samples.txt */
#define GL_COLOR_SAMPLES_NV                      0x8E20
#define GL_RASTER_MULTISAMPLE_EXT                0x9327
#define GL_RASTER_SAMPLES_EXT                    0x9328
#define GL_MAX_RASTER_SAMPLES_EXT                0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT     0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT          0x932C
#define GL_DEPTH_SAMPLES_NV                      0x932D
#define GL_STENCIL_SAMPLES_NV                    0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV      0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV    0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV          0x9331
#define GL_COVERAGE_MODULATION_NV                0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV     0x9333
typedef void (GLAPIENTRY * PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components);
typedef void (GLAPIENTRY * PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat* v);
typedef void (GLAPIENTRY * PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOVERAGEMODULATIONNVPROC glCoverageModulationNV;
extern PFNGLCOVERAGEMODULATIONTABLENVPROC glCoverageModulationTableNV;
extern PFNGLGETCOVERAGEMODULATIONTABLENVPROC glGetCoverageModulationTableNV;
extern PFNGLRASTERSAMPLESEXTPROC glRasterSamplesEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_raster_multisample*/

#ifndef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 1
/* http://www.opengl.org/registry/specs/EXT/rescale_normal.txt */
#define GL_RESCALE_NORMAL_EXT                    0x803A
#endif /*GL_EXT_rescale_normal*/

#ifndef GL_EXT_scene_marker
#define GL_EXT_scene_marker 1
/* http://www.opengl.org/registry/specs/EXT/scene_marker.txt */
typedef void (GLAPIENTRY * PFNGLBEGINSCENEEXTPROC) (void);
typedef void (GLAPIENTRY * PFNGLENDSCENEEXTPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINSCENEEXTPROC glBeginSceneEXT;
extern PFNGLENDSCENEEXTPROC glEndSceneEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_scene_marker*/

#ifndef GL_EXT_secondary_color
#define GL_EXT_secondary_color 1
/* http://oss.sgi.com/projects/ogl-sample/registry/EXT/secondary_color.txt */
#define GL_COLOR_SUM_EXT                         0x8458
#define GL_CURRENT_SECONDARY_COLOR_EXT           0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT        0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT        0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT      0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT     0x845D
#define GL_SECONDARY_COLOR_ARRAY_EXT             0x845E
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
extern PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
extern PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
extern PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
extern PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
extern PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
extern PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
extern PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
extern PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
extern PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
extern PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
extern PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
extern PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
extern PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
extern PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
extern PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
extern PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_secondary_color*/

#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 1
/* http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt */
#define GL_ACTIVE_PROGRAM_EXT                    0x8B8D
typedef void (GLAPIENTRY * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar* string);
typedef void (GLAPIENTRY * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
extern PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
extern PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_separate_shader_objects*/

#ifndef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 1
/* http://www.opengl.org/registry/specs/EXT/separate_specular_color.txt */
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT         0x81F8
#define GL_SINGLE_COLOR_EXT                      0x81F9
#define GL_SEPARATE_SPECULAR_COLOR_EXT           0x81FA
#endif /*GL_EXT_separate_specular_color*/

#ifndef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 1
/* http://www.opengl.org/registry/specs/EXT/shader_image_load_formatted.txt */
#endif /*GL_EXT_shader_image_load_formatted*/

#ifndef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 1
/* http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt */
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT   0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT         0x00000002
#define GL_UNIFORM_BARRIER_BIT_EXT               0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT         0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT   0x00000020
#define GL_COMMAND_BARRIER_BIT_EXT               0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT          0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT        0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT         0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT           0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT    0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT        0x00001000
#define GL_MAX_IMAGE_UNITS_EXT                   0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_IMAGE_BINDING_NAME_EXT                0x8F3A
#define GL_IMAGE_BINDING_LEVEL_EXT               0x8F3B
#define GL_IMAGE_BINDING_LAYERED_EXT             0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT               0x8F3D
#define GL_IMAGE_BINDING_ACCESS_EXT              0x8F3E
#define GL_IMAGE_1D_EXT                          0x904C
#define GL_IMAGE_2D_EXT                          0x904D
#define GL_IMAGE_3D_EXT                          0x904E
#define GL_IMAGE_2D_RECT_EXT                     0x904F
#define GL_IMAGE_CUBE_EXT                        0x9050
#define GL_IMAGE_BUFFER_EXT                      0x9051
#define GL_IMAGE_1D_ARRAY_EXT                    0x9052
#define GL_IMAGE_2D_ARRAY_EXT                    0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT              0x9054
#define GL_IMAGE_2D_MULTISAMPLE_EXT              0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT        0x9056
#define GL_INT_IMAGE_1D_EXT                      0x9057
#define GL_INT_IMAGE_2D_EXT                      0x9058
#define GL_INT_IMAGE_3D_EXT                      0x9059
#define GL_INT_IMAGE_2D_RECT_EXT                 0x905A
#define GL_INT_IMAGE_CUBE_EXT                    0x905B
#define GL_INT_IMAGE_BUFFER_EXT                  0x905C
#define GL_INT_IMAGE_1D_ARRAY_EXT                0x905D
#define GL_INT_IMAGE_2D_ARRAY_EXT                0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT          0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT          0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT    0x9061
#define GL_UNSIGNED_INT_IMAGE_1D_EXT             0x9062
#define GL_UNSIGNED_INT_IMAGE_2D_EXT             0x9063
#define GL_UNSIGNED_INT_IMAGE_3D_EXT             0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT        0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT           0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT         0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT       0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT       0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES_EXT                 0x906D
#define GL_IMAGE_BINDING_FORMAT_EXT              0x906E
#define GL_ALL_BARRIER_BITS_EXT                  0xFFFFFFFF
typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (GLAPIENTRY * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
extern PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_shader_image_load_store*/

#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 1
/* http://www.opengl.org/registry/specs/EXT/shader_integer_mix.txt */
#endif /*GL_EXT_shader_integer_mix*/

#ifndef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 1
/* http://www.opengl.org/registry/specs/EXT/shadow_funcs.txt */
#endif /*GL_EXT_shadow_funcs*/

#ifndef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 1
/* http://www.opengl.org/registry/specs/EXT/shared_texture_palette.txt */
#define GL_SHARED_TEXTURE_PALETTE_EXT            0x81FB
#endif /*GL_EXT_shared_texture_palette*/

#ifndef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 1
/* http://www.opengl.org/registry/specs/EXT/sparse_texture2.txt */
#endif /*GL_EXT_sparse_texture2*/

#ifndef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 1
/* http://www.opengl.org/registry/specs/EXT/stencil_clear_tag.txt */
#define GL_STENCIL_TAG_BITS_EXT                  0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT           0x88F3
#endif /*GL_EXT_stencil_clear_tag*/

#ifndef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 1
/* http://www.opengl.org/registry/specs/EXT/stencil_two_side.txt */
#define GL_STENCIL_TEST_TWO_SIDE_EXT             0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT               0x8911
typedef void (GLAPIENTRY * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_stencil_two_side*/

#ifndef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 1
/* http://www.opengl.org/registry/specs/EXT/stencil_wrap.txt */
#define GL_INCR_WRAP_EXT                         0x8507
#define GL_DECR_WRAP_EXT                         0x8508
#endif /*GL_EXT_stencil_wrap*/

#ifndef GL_EXT_subtexture
#define GL_EXT_subtexture 1
/* http://www.opengl.org/registry/specs/EXT/subtexture.txt */
typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
extern PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
extern PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_subtexture*/

#ifndef GL_EXT_texture
#define GL_EXT_texture 1
/* http://www.opengl.org/registry/specs/EXT/texture.txt */
#define GL_ALPHA4_EXT                            0x803B
#define GL_ALPHA8_EXT                            0x803C
#define GL_ALPHA12_EXT                           0x803D
#define GL_ALPHA16_EXT                           0x803E
#define GL_LUMINANCE4_EXT                        0x803F
#define GL_LUMINANCE8_EXT                        0x8040
#define GL_LUMINANCE12_EXT                       0x8041
#define GL_LUMINANCE16_EXT                       0x8042
#define GL_LUMINANCE4_ALPHA4_EXT                 0x8043
#define GL_LUMINANCE6_ALPHA2_EXT                 0x8044
#define GL_LUMINANCE8_ALPHA8_EXT                 0x8045
#define GL_LUMINANCE12_ALPHA4_EXT                0x8046
#define GL_LUMINANCE12_ALPHA12_EXT               0x8047
#define GL_LUMINANCE16_ALPHA16_EXT               0x8048
#define GL_INTENSITY_EXT                         0x8049
#define GL_INTENSITY4_EXT                        0x804A
#define GL_INTENSITY8_EXT                        0x804B
#define GL_INTENSITY12_EXT                       0x804C
#define GL_INTENSITY16_EXT                       0x804D
#define GL_RGB2_EXT                              0x804E
#define GL_RGB4_EXT                              0x804F
#define GL_RGB5_EXT                              0x8050
#define GL_RGB8_EXT                              0x8051
#define GL_RGB10_EXT                             0x8052
#define GL_RGB12_EXT                             0x8053
#define GL_RGB16_EXT                             0x8054
#define GL_RGBA2_EXT                             0x8055
#define GL_RGBA4_EXT                             0x8056
#define GL_RGB5_A1_EXT                           0x8057
#define GL_RGBA8_EXT                             0x8058
#define GL_RGB10_A2_EXT                          0x8059
#define GL_RGBA12_EXT                            0x805A
#define GL_RGBA16_EXT                            0x805B
#define GL_TEXTURE_RED_SIZE_EXT                  0x805C
#define GL_TEXTURE_GREEN_SIZE_EXT                0x805D
#define GL_TEXTURE_BLUE_SIZE_EXT                 0x805E
#define GL_TEXTURE_ALPHA_SIZE_EXT                0x805F
#define GL_TEXTURE_LUMINANCE_SIZE_EXT            0x8060
#define GL_TEXTURE_INTENSITY_SIZE_EXT            0x8061
#define GL_REPLACE_EXT                           0x8062
#define GL_PROXY_TEXTURE_1D_EXT                  0x8063
#define GL_PROXY_TEXTURE_2D_EXT                  0x8064
#endif /*GL_EXT_texture*/

#ifndef GL_EXT_texture3D
#define GL_EXT_texture3D 1
/* http://www.opengl.org/registry/specs/EXT/texture3D.txt */
#define GL_PACK_SKIP_IMAGES_EXT                  0x806B
#define GL_PACK_IMAGE_HEIGHT_EXT                 0x806C
#define GL_UNPACK_SKIP_IMAGES_EXT                0x806D
#define GL_UNPACK_IMAGE_HEIGHT_EXT               0x806E
#define GL_TEXTURE_3D_EXT                        0x806F
#define GL_PROXY_TEXTURE_3D_EXT                  0x8070
#define GL_TEXTURE_DEPTH_EXT                     0x8071
#define GL_TEXTURE_WRAP_R_EXT                    0x8072
#define GL_MAX_3D_TEXTURE_SIZE_EXT               0x8073
typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture3D*/

#ifndef GL_EXT_texture_array
#define GL_EXT_texture_array 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_array.txt */
#define GL_TEXTURE_1D_ARRAY_EXT                  0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT            0x8C19
#define GL_TEXTURE_2D_ARRAY_EXT                  0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT            0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT          0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT          0x8C1D
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT          0x88FF
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT      0x884E
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture_array*/

#ifndef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_buffer_object.txt */
#define GL_TEXTURE_BUFFER_EXT                    0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT           0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_EXT            0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_EXT             0x8C2E
typedef void (GLAPIENTRY * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture_buffer_object*/

#ifndef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 1
/* http://www.opengl.org/registry/specs/EXT/texture_compression_dxt1.txt */
#endif /*GL_EXT_texture_compression_dxt1*/

#ifndef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_compression_latc.txt */
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT        0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT  0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#endif /*GL_EXT_texture_compression_latc*/

#ifndef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_compression_rgtc.txt */
#define GL_COMPRESSED_RED_RGTC1_EXT              0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT       0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT        0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#endif /*GL_EXT_texture_compression_rgtc*/

#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 1
/* http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt */
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT          0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT         0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT         0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT         0x83F3
#endif /*GL_EXT_texture_compression_s3tc*/

#ifndef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_EXT_texture_cube_map.txt */
#define GL_NORMAL_MAP_EXT                        0x8511
#define GL_REFLECTION_MAP_EXT                    0x8512
#define GL_TEXTURE_CUBE_MAP_EXT                  0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT          0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT       0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT       0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT       0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT       0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT       0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT       0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT            0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT         0x851C
#endif /*GL_EXT_texture_cube_map*/

#ifndef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 1
/* http://www.opengl.org/developers/documentation/Version1.2/1.2specs/texture_edge_clamp.txt */
#define GL_CLAMP_TO_EDGE_EXT                     0x812F
#endif /*GL_EXT_texture_edge_clamp*/

#ifndef GL_EXT_texture_env
#define GL_EXT_texture_env 1
/* http://www.opengl.org/registry/specs/EXT/texture_env.txt */
#endif /*GL_EXT_texture_env*/

#ifndef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 1
/* http://www.opengl.org/registry/specs/EXT/texture_env_add.txt */
#endif /*GL_EXT_texture_env_add*/

#ifndef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 1
/* http://www.opengl.org/registry/specs/EXT/texture_env_combine.txt */
#define GL_COMBINE_EXT                           0x8570
#define GL_COMBINE_RGB_EXT                       0x8571
#define GL_COMBINE_ALPHA_EXT                     0x8572
#define GL_RGB_SCALE_EXT                         0x8573
#define GL_ADD_SIGNED_EXT                        0x8574
#define GL_INTERPOLATE_EXT                       0x8575
#define GL_CONSTANT_EXT                          0x8576
#define GL_PRIMARY_COLOR_EXT                     0x8577
#define GL_PREVIOUS_EXT                          0x8578
#define GL_SOURCE0_RGB_EXT                       0x8580
#define GL_SOURCE1_RGB_EXT                       0x8581
#define GL_SOURCE2_RGB_EXT                       0x8582
#define GL_SOURCE0_ALPHA_EXT                     0x8588
#define GL_SOURCE1_ALPHA_EXT                     0x8589
#define GL_SOURCE2_ALPHA_EXT                     0x858A
#define GL_OPERAND0_RGB_EXT                      0x8590
#define GL_OPERAND1_RGB_EXT                      0x8591
#define GL_OPERAND2_RGB_EXT                      0x8592
#define GL_OPERAND0_ALPHA_EXT                    0x8598
#define GL_OPERAND1_ALPHA_EXT                    0x8599
#define GL_OPERAND2_ALPHA_EXT                    0x859A
#endif /*GL_EXT_texture_env_combine*/

#ifndef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 1
/* http://www.opengl.org/registry/specs/EXT/texture_env_dot3.txt */
#define GL_DOT3_RGB_EXT                          0x8740
#define GL_DOT3_RGBA_EXT                         0x8741
#endif /*GL_EXT_texture_env_dot3*/

#ifndef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 1
/* http://www.opengl.org/registry/specs/EXT/texture_filter_anisotropic.txt */
#define GL_TEXTURE_MAX_ANISOTROPY_EXT            0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT        0x84FF
#endif /*GL_EXT_texture_filter_anisotropic*/

#ifndef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 1
/* http://www.opengl.org/registry/specs/EXT/texture_filter_minmax.txt */
#define GL_TEXTURE_REDUCTION_MODE_EXT            0x9366
#define GL_WEIGHTED_AVERAGE_EXT                  0x9367
#endif /*GL_EXT_texture_filter_minmax*/

#ifndef GL_EXT_texture_integer
#define GL_EXT_texture_integer 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_integer.txt */
#define GL_RGBA32UI_EXT                          0x8D70
#define GL_RGB32UI_EXT                           0x8D71
#define GL_ALPHA32UI_EXT                         0x8D72
#define GL_INTENSITY32UI_EXT                     0x8D73
#define GL_LUMINANCE32UI_EXT                     0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT               0x8D75
#define GL_RGBA16UI_EXT                          0x8D76
#define GL_RGB16UI_EXT                           0x8D77
#define GL_ALPHA16UI_EXT                         0x8D78
#define GL_INTENSITY16UI_EXT                     0x8D79
#define GL_LUMINANCE16UI_EXT                     0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT               0x8D7B
#define GL_RGBA8UI_EXT                           0x8D7C
#define GL_RGB8UI_EXT                            0x8D7D
#define GL_ALPHA8UI_EXT                          0x8D7E
#define GL_INTENSITY8UI_EXT                      0x8D7F
#define GL_LUMINANCE8UI_EXT                      0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT                0x8D81
#define GL_RGBA32I_EXT                           0x8D82
#define GL_RGB32I_EXT                            0x8D83
#define GL_ALPHA32I_EXT                          0x8D84
#define GL_INTENSITY32I_EXT                      0x8D85
#define GL_LUMINANCE32I_EXT                      0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT                0x8D87
#define GL_RGBA16I_EXT                           0x8D88
#define GL_RGB16I_EXT                            0x8D89
#define GL_ALPHA16I_EXT                          0x8D8A
#define GL_INTENSITY16I_EXT                      0x8D8B
#define GL_LUMINANCE16I_EXT                      0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT                0x8D8D
#define GL_RGBA8I_EXT                            0x8D8E
#define GL_RGB8I_EXT                             0x8D8F
#define GL_ALPHA8I_EXT                           0x8D90
#define GL_INTENSITY8I_EXT                       0x8D91
#define GL_LUMINANCE8I_EXT                       0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT                 0x8D93
#define GL_RED_INTEGER_EXT                       0x8D94
#define GL_GREEN_INTEGER_EXT                     0x8D95
#define GL_BLUE_INTEGER_EXT                      0x8D96
#define GL_ALPHA_INTEGER_EXT                     0x8D97
#define GL_RGB_INTEGER_EXT                       0x8D98
#define GL_RGBA_INTEGER_EXT                      0x8D99
#define GL_BGR_INTEGER_EXT                       0x8D9A
#define GL_BGRA_INTEGER_EXT                      0x8D9B
#define GL_LUMINANCE_INTEGER_EXT                 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT           0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT                 0x8D9E
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void (GLAPIENTRY * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAPIENTRY * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
extern PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
extern PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
extern PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
extern PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
extern PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture_integer*/

#ifndef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 1
/* http://www.opengl.org/registry/specs/EXT/texture_lod_bias.txt */
#define GL_MAX_TEXTURE_LOD_BIAS_EXT              0x84FD
#define GL_TEXTURE_FILTER_CONTROL_EXT            0x8500
#define GL_TEXTURE_LOD_BIAS_EXT                  0x8501
#endif /*GL_EXT_texture_lod_bias*/

#ifndef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 1
/* http://www.opengl.org/registry/specs/EXT/texture_mirror_clamp.txt */
#define GL_MIRROR_CLAMP_EXT                      0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_EXT              0x8743
#define GL_MIRROR_CLAMP_TO_BORDER_EXT            0x8912
#endif /*GL_EXT_texture_mirror_clamp*/

#ifndef GL_EXT_texture_object
#define GL_EXT_texture_object 1
/* http://www.opengl.org/registry/specs/EXT/texture_object.txt */
#define GL_TEXTURE_PRIORITY_EXT                  0x8066
#define GL_TEXTURE_RESIDENT_EXT                  0x8067
#define GL_TEXTURE_1D_BINDING_EXT                0x8068
#define GL_TEXTURE_2D_BINDING_EXT                0x8069
#define GL_TEXTURE_3D_BINDING_EXT                0x806A
typedef GLboolean (GLAPIENTRY * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint* textures, GLboolean* residences);
typedef void (GLAPIENTRY * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
typedef void (GLAPIENTRY * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint* textures);
typedef void (GLAPIENTRY * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint* textures);
typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREEXTPROC) (GLuint texture);
typedef void (GLAPIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint* textures, const GLclampf* priorities);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
extern PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
extern PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
extern PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
extern PFNGLISTEXTUREEXTPROC glIsTextureEXT;
extern PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture_object*/

#ifndef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 1
/* http://www.opengl.org/registry/specs/EXT/texture_perturb_normal.txt */
#define GL_PERTURB_EXT                           0x85AE
#define GL_TEXTURE_NORMAL_EXT                    0x85AF
typedef void (GLAPIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_texture_perturb_normal*/

#ifndef GL_EXT_texture_rectangle
#define GL_EXT_texture_rectangle 1
/* http://developer.apple.com/opengl/extensions/ext_texture_rectangle.html */
#define GL_TEXTURE_RECTANGLE_EXT                 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_EXT         0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_EXT           0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT        0x84F8
#endif /*GL_EXT_texture_rectangle*/

#ifndef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_texture_shared_exponent.txt */
#define GL_RGB9_E5_EXT                           0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT          0x8C3E
#define GL_TEXTURE_SHARED_SIZE_EXT               0x8C3F
#endif /*GL_EXT_texture_shared_exponent*/

#ifndef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 1
/* http://www.opengl.org/registry/specs/EXT/texture_snorm.txt */
#define GL_RED_SNORM                             0x8F90
#define GL_RG_SNORM                              0x8F91
#define GL_RGB_SNORM                             0x8F92
#define GL_RGBA_SNORM                            0x8F93
#define GL_R8_SNORM                              0x8F94
#define GL_RG8_SNORM                             0x8F95
#define GL_RGB8_SNORM                            0x8F96
#define GL_RGBA8_SNORM                           0x8F97
#define GL_R16_SNORM                             0x8F98
#define GL_RG16_SNORM                            0x8F99
#define GL_RGB16_SNORM                           0x8F9A
#define GL_RGBA16_SNORM                          0x8F9B
#define GL_SIGNED_NORMALIZED                     0x8F9C
#define GL_ALPHA_SNORM                           0x9010
#define GL_LUMINANCE_SNORM                       0x9011
#define GL_LUMINANCE_ALPHA_SNORM                 0x9012
#define GL_INTENSITY_SNORM                       0x9013
#define GL_ALPHA8_SNORM                          0x9014
#define GL_LUMINANCE8_SNORM                      0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM               0x9016
#define GL_INTENSITY8_SNORM                      0x9017
#define GL_ALPHA16_SNORM                         0x9018
#define GL_LUMINANCE16_SNORM                     0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM             0x901A
#define GL_INTENSITY16_SNORM                     0x901B
#endif /*GL_EXT_texture_snorm*/

#ifndef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 1
/* http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt */
#define GL_SRGB_EXT                              0x8C40
#define GL_SRGB8_EXT                             0x8C41
#define GL_SRGB_ALPHA_EXT                        0x8C42
#define GL_SRGB8_ALPHA8_EXT                      0x8C43
#define GL_SLUMINANCE_ALPHA_EXT                  0x8C44
#define GL_SLUMINANCE8_ALPHA8_EXT                0x8C45
#define GL_SLUMINANCE_EXT                        0x8C46
#define GL_SLUMINANCE8_EXT                       0x8C47
#define GL_COMPRESSED_SRGB_EXT                   0x8C48
#define GL_COMPRESSED_SRGB_ALPHA_EXT             0x8C49
#define GL_COMPRESSED_SLUMINANCE_EXT             0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT       0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT         0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT   0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT   0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT   0x8C4F
#endif /*GL_EXT_texture_sRGB*/

#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 1
/* http://www.opengl.org/registry/specs/EXT/texture_sRGB_decode.txt */
#define GL_TEXTURE_SRGB_DECODE_EXT               0x8A48
#define GL_DECODE_EXT                            0x8A49
#define GL_SKIP_DECODE_EXT                       0x8A4A
#endif /*GL_EXT_texture_sRGB_decode*/

#ifndef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 1
/* http://www.opengl.org/registry/specs/EXT/texture_swizzle.txt */
#define GL_TEXTURE_SWIZZLE_R_EXT                 0x8E42
#define GL_TEXTURE_SWIZZLE_G_EXT                 0x8E43
#define GL_TEXTURE_SWIZZLE_B_EXT                 0x8E44
#define GL_TEXTURE_SWIZZLE_A_EXT                 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA_EXT              0x8E46
#endif /*GL_EXT_texture_swizzle*/

#ifndef GL_EXT_timer_query
#define GL_EXT_timer_query 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_EXT_timer_query.txt */
#define GL_TIME_ELAPSED_EXT                      0x88BF
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
extern PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_timer_query*/

#ifndef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 1
/* http://www.opengl.org/registry/specs/EXT/transform_feedback.txt */
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT    0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT       0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT   0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT    0x8C85
#define GL_PRIMITIVES_GENERATED_EXT              0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_RASTERIZER_DISCARD_EXT                0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_INTERLEAVED_ATTRIBS_EXT               0x8C8C
#define GL_SEPARATE_ATTRIBS_EXT                  0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT         0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar * const* varyings, GLenum bufferMode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
extern PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
extern PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
extern PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
extern PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
extern PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_transform_feedback*/

#ifndef GL_EXT_vertex_array
#define GL_EXT_vertex_array 1
/* http://www.opengl.org/registry/specs/EXT/vertex_array.txt */
#define GL_DOUBLE_EXT                            0x140A
#define GL_VERTEX_ARRAY_EXT                      0x8074
#define GL_NORMAL_ARRAY_EXT                      0x8075
#define GL_COLOR_ARRAY_EXT                       0x8076
#define GL_INDEX_ARRAY_EXT                       0x8077
#define GL_TEXTURE_COORD_ARRAY_EXT               0x8078
#define GL_EDGE_FLAG_ARRAY_EXT                   0x8079
#define GL_VERTEX_ARRAY_SIZE_EXT                 0x807A
#define GL_VERTEX_ARRAY_TYPE_EXT                 0x807B
#define GL_VERTEX_ARRAY_STRIDE_EXT               0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT                0x807D
#define GL_NORMAL_ARRAY_TYPE_EXT                 0x807E
#define GL_NORMAL_ARRAY_STRIDE_EXT               0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT                0x8080
#define GL_COLOR_ARRAY_SIZE_EXT                  0x8081
#define GL_COLOR_ARRAY_TYPE_EXT                  0x8082
#define GL_COLOR_ARRAY_STRIDE_EXT                0x8083
#define GL_COLOR_ARRAY_COUNT_EXT                 0x8084
#define GL_INDEX_ARRAY_TYPE_EXT                  0x8085
#define GL_INDEX_ARRAY_STRIDE_EXT                0x8086
#define GL_INDEX_ARRAY_COUNT_EXT                 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT          0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT          0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT        0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT         0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT            0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT             0x808D
#define GL_VERTEX_ARRAY_POINTER_EXT              0x808E
#define GL_NORMAL_ARRAY_POINTER_EXT              0x808F
#define GL_COLOR_ARRAY_POINTER_EXT               0x8090
#define GL_INDEX_ARRAY_POINTER_EXT               0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT       0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT           0x8093
typedef void (GLAPIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);
typedef void (GLAPIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (GLAPIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean* pointer);
typedef void (GLAPIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (GLAPIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
extern PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
extern PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
extern PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
extern PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
extern PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
extern PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
extern PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_vertex_array*/

#ifndef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 1
/* http://www.opengl.org/registry/specs/EXT/vertex_array_bgra.txt */
#define GL_BGRA                                  0x80E1
#endif /*GL_EXT_vertex_array_bgra*/

#ifndef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 1
/* http://www.opengl.org/registry/specs/EXT/vertex_attrib_64bit.txt */
#define GL_DOUBLE_MAT2_EXT                       0x8F46
#define GL_DOUBLE_MAT3_EXT                       0x8F47
#define GL_DOUBLE_MAT4_EXT                       0x8F48
#define GL_DOUBLE_MAT2x3_EXT                     0x8F49
#define GL_DOUBLE_MAT2x4_EXT                     0x8F4A
#define GL_DOUBLE_MAT3x2_EXT                     0x8F4B
#define GL_DOUBLE_MAT3x4_EXT                     0x8F4C
#define GL_DOUBLE_MAT4x2_EXT                     0x8F4D
#define GL_DOUBLE_MAT4x3_EXT                     0x8F4E
#define GL_DOUBLE_VEC2_EXT                       0x8FFC
#define GL_DOUBLE_VEC3_EXT                       0x8FFD
#define GL_DOUBLE_VEC4_EXT                       0x8FFE
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
extern PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
extern PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
extern PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
extern PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
extern PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
extern PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
extern PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
extern PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_vertex_attrib_64bit*/

#ifndef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 1
/* http://oss.sgi.com/projects/ogl-sample/registry/EXT/vertex_shader.txt */
#define GL_VERTEX_SHADER_EXT                     0x8780
#define GL_VERTEX_SHADER_BINDING_EXT             0x8781
#define GL_OP_INDEX_EXT                          0x8782
#define GL_OP_NEGATE_EXT                         0x8783
#define GL_OP_DOT3_EXT                           0x8784
#define GL_OP_DOT4_EXT                           0x8785
#define GL_OP_MUL_EXT                            0x8786
#define GL_OP_ADD_EXT                            0x8787
#define GL_OP_MADD_EXT                           0x8788
#define GL_OP_FRAC_EXT                           0x8789
#define GL_OP_MAX_EXT                            0x878A
#define GL_OP_MIN_EXT                            0x878B
#define GL_OP_SET_GE_EXT                         0x878C
#define GL_OP_SET_LT_EXT                         0x878D
#define GL_OP_CLAMP_EXT                          0x878E
#define GL_OP_FLOOR_EXT                          0x878F
#define GL_OP_ROUND_EXT                          0x8790
#define GL_OP_EXP_BASE_2_EXT                     0x8791
#define GL_OP_LOG_BASE_2_EXT                     0x8792
#define GL_OP_POWER_EXT                          0x8793
#define GL_OP_RECIP_EXT                          0x8794
#define GL_OP_RECIP_SQRT_EXT                     0x8795
#define GL_OP_SUB_EXT                            0x8796
#define GL_OP_CROSS_PRODUCT_EXT                  0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT                0x8798
#define GL_OP_MOV_EXT                            0x8799
#define GL_OUTPUT_VERTEX_EXT                     0x879A
#define GL_OUTPUT_COLOR0_EXT                     0x879B
#define GL_OUTPUT_COLOR1_EXT                     0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT             0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT             0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT             0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT             0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT             0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT             0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT             0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT             0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT             0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT             0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT            0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT            0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT            0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT            0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT            0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT            0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT            0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT            0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT            0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT            0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT            0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT            0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT            0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT            0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT            0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT            0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT            0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT            0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT            0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT            0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT            0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT            0x87BC
#define GL_OUTPUT_FOG_EXT                        0x87BD
#define GL_SCALAR_EXT                            0x87BE
#define GL_VECTOR_EXT                            0x87BF
#define GL_MATRIX_EXT                            0x87C0
#define GL_VARIANT_EXT                           0x87C1
#define GL_INVARIANT_EXT                         0x87C2
#define GL_LOCAL_CONSTANT_EXT                    0x87C3
#define GL_LOCAL_EXT                             0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT    0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT        0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT      0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT          0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT        0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT            0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT          0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT     0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT              0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT           0x87D4
#define GL_X_EXT                                 0x87D5
#define GL_Y_EXT                                 0x87D6
#define GL_Z_EXT                                 0x87D7
#define GL_W_EXT                                 0x87D8
#define GL_NEGATIVE_X_EXT                        0x87D9
#define GL_NEGATIVE_Y_EXT                        0x87DA
#define GL_NEGATIVE_Z_EXT                        0x87DB
#define GL_NEGATIVE_W_EXT                        0x87DC
#define GL_ZERO_EXT                              0x87DD
#define GL_ONE_EXT                               0x87DE
#define GL_NEGATIVE_ONE_EXT                      0x87DF
#define GL_NORMALIZED_RANGE_EXT                  0x87E0
#define GL_FULL_RANGE_EXT                        0x87E1
#define GL_CURRENT_VERTEX_EXT                    0x87E2
#define GL_MVP_MATRIX_EXT                        0x87E3
#define GL_VARIANT_VALUE_EXT                     0x87E4
#define GL_VARIANT_DATATYPE_EXT                  0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT              0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT                0x87E7
#define GL_VARIANT_ARRAY_EXT                     0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT             0x87E9
#define GL_INVARIANT_VALUE_EXT                   0x87EA
#define GL_INVARIANT_DATATYPE_EXT                0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT              0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT           0x87ED
typedef void (GLAPIENTRY * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
typedef void (GLAPIENTRY * PFNGLENDVERTEXSHADEREXTPROC) (void);
typedef void (GLAPIENTRY * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
typedef GLuint (GLAPIENTRY * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
typedef void (GLAPIENTRY * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
typedef void (GLAPIENTRY * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (GLAPIENTRY * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (GLAPIENTRY * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (GLAPIENTRY * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (GLAPIENTRY * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef void (GLAPIENTRY * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef GLuint (GLAPIENTRY * PFNGLGENSYMBOLSEXTPROC) (GLenum dataType, GLenum storageType, GLenum range, GLuint components);
typedef void (GLAPIENTRY * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, void *addr);
typedef void (GLAPIENTRY * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, void *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTBVEXTPROC) (GLuint id, GLbyte *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTSVEXTPROC) (GLuint id, GLshort *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTIVEXTPROC) (GLuint id, GLint *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTFVEXTPROC) (GLuint id, GLfloat *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTDVEXTPROC) (GLuint id, GLdouble *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTUBVEXTPROC) (GLuint id, GLubyte *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTUSVEXTPROC) (GLuint id, GLushort *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTUIVEXTPROC) (GLuint id, GLuint *addr);
typedef void (GLAPIENTRY * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, void *addr);
typedef void (GLAPIENTRY * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef GLuint (GLAPIENTRY * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
typedef GLuint (GLAPIENTRY * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
typedef GLuint (GLAPIENTRY * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
typedef GLuint (GLAPIENTRY * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
typedef GLuint (GLAPIENTRY * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
typedef GLboolean (GLAPIENTRY * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
typedef void (GLAPIENTRY * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (GLAPIENTRY * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (GLAPIENTRY * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (GLAPIENTRY * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data);
typedef void (GLAPIENTRY * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (GLAPIENTRY * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (GLAPIENTRY * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
extern PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
extern PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
extern PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
extern PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
extern PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
extern PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
extern PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
extern PFNGLSWIZZLEEXTPROC glSwizzleEXT;
extern PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
extern PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
extern PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
extern PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
extern PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
extern PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
extern PFNGLVARIANTBVEXTPROC glVariantbvEXT;
extern PFNGLVARIANTSVEXTPROC glVariantsvEXT;
extern PFNGLVARIANTIVEXTPROC glVariantivEXT;
extern PFNGLVARIANTFVEXTPROC glVariantfvEXT;
extern PFNGLVARIANTDVEXTPROC glVariantdvEXT;
extern PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
extern PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
extern PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
extern PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
extern PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
extern PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
extern PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
extern PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
extern PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
extern PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
extern PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
extern PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
extern PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
extern PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
extern PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
extern PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
extern PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
extern PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
extern PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
extern PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
extern PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
extern PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_vertex_shader*/

#ifndef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 1
/* http://www.opengl.org/registry/specs/EXT/vertex_weighting.txt */
#define GL_MODELVIEW0_STACK_DEPTH_EXT            0x0BA3
#define GL_MODELVIEW0_MATRIX_EXT                 0x0BA6
#define GL_MODELVIEW0_EXT                        0x1700
#define GL_MODELVIEW1_STACK_DEPTH_EXT            0x8502
#define GL_MODELVIEW1_MATRIX_EXT                 0x8506
#define GL_VERTEX_WEIGHTING_EXT                  0x8509
#define GL_MODELVIEW1_EXT                        0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT             0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT               0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT          0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT          0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT        0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT       0x8510
typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFVEXTPROC) (GLfloat* weight);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
extern PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
extern PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_vertex_weighting*/

#ifndef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 1
/* http://www.opengl.org/registry/specs/EXT/window_rectangles.txt */
#define GL_INCLUSIVE_EXT                         0x8F10
#define GL_EXCLUSIVE_EXT                         0x8F11
#define GL_WINDOW_RECTANGLE_EXT                  0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT             0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT             0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT             0x8F15
typedef void (GLAPIENTRY * PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint box[]);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLWINDOWRECTANGLESEXTPROC glWindowRectanglesEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_window_rectangles*/

#ifndef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 1
/* http://www.opengl.org/registry/specs/EXT/x11_sync_object.txt */
#define GL_SYNC_X11_FENCE_EXT                    0x90E1
typedef GLsync (GLAPIENTRY * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_EXT_x11_sync_object*/

#ifndef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 1
/* http://www.opengl.org/registry/specs/GREMEDY/frame_terminator.txt */
typedef void (GLAPIENTRY * PFNGLFRAMETERMINATORGREMEDYPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_GREMEDY_frame_terminator*/

#ifndef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 1
/* http://www.opengl.org/registry/specs/GREMEDY/string_marker.txt */
typedef void (GLAPIENTRY * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_GREMEDY_string_marker*/

#ifndef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 1
/* http://www.opengl.org/registry/specs/HP/convolution_border_modes.txt */
#endif /*GL_HP_convolution_border_modes*/

#ifndef GL_HP_image_transform
#define GL_HP_image_transform 1
/* http://www.opengl.org/registry/specs/HP/image_transform.txt */
typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, const GLfloat param);
typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, const GLint param);
typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
extern PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
extern PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
extern PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
extern PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
extern PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_HP_image_transform*/

#ifndef GL_HP_occlusion_test
#define GL_HP_occlusion_test 1
/* http://www.opengl.org/registry/specs/HP/occlusion_test.txt */
#endif /*GL_HP_occlusion_test*/

#ifndef GL_HP_texture_lighting
#define GL_HP_texture_lighting 1
/* http://www.opengl.org/registry/specs/HP/texture_lighting.txt */
#endif /*GL_HP_texture_lighting*/

#ifndef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 1
/* http://www.opengl.org/registry/specs/IBM/cull_vertex.txt */
#define GL_CULL_VERTEX_IBM                       103050
#endif /*GL_IBM_cull_vertex*/

#ifndef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 1
/* http://www.opengl.org/registry/specs/IBM/multimode_draw_arrays.txt */
typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum* mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
extern PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_IBM_multimode_draw_arrays*/

#ifndef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 1
/* http://www.opengl.org/registry/specs/IBM/rasterpos_clip.txt */
#define GL_RASTER_POSITION_UNCLIPPED_IBM         103010
#endif /*GL_IBM_rasterpos_clip*/

#ifndef GL_IBM_static_data
#define GL_IBM_static_data 1
/* http://www.opengl.org/registry/specs/IBM/static_data.txt */
#define GL_ALL_STATIC_DATA_IBM                   103060
#define GL_STATIC_VERTEX_ARRAY_IBM               103061
#endif /*GL_IBM_static_data*/

#ifndef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 1
/* http://www.opengl.org/registry/specs/IBM/texture_mirrored_repeat.txt */
#define GL_MIRRORED_REPEAT_IBM                   0x8370
#endif /*GL_IBM_texture_mirrored_repeat*/

#ifndef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 1
/* http://www.opengl.org/registry/specs/IBM/vertex_array_lists.txt */
#define GL_VERTEX_ARRAY_LIST_IBM                 103070
#define GL_NORMAL_ARRAY_LIST_IBM                 103071
#define GL_COLOR_ARRAY_LIST_IBM                  103072
#define GL_INDEX_ARRAY_LIST_IBM                  103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM          103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM              103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM         103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM        103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM          103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM          103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM           103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM           103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM   103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM       103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM  103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
typedef void (GLAPIENTRY * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean ** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
extern PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
extern PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
extern PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
extern PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
extern PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
extern PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
extern PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_IBM_vertex_array_lists*/

#ifndef GL_INGR_color_clamp
#define GL_INGR_color_clamp 1
/* http://www.opengl.org/registry/specs/INGR/color_clamp.txt */
#define GL_RED_MIN_CLAMP_INGR                    0x8560
#define GL_GREEN_MIN_CLAMP_INGR                  0x8561
#define GL_BLUE_MIN_CLAMP_INGR                   0x8562
#define GL_ALPHA_MIN_CLAMP_INGR                  0x8563
#define GL_RED_MAX_CLAMP_INGR                    0x8564
#define GL_GREEN_MAX_CLAMP_INGR                  0x8565
#define GL_BLUE_MAX_CLAMP_INGR                   0x8566
#define GL_ALPHA_MAX_CLAMP_INGR                  0x8567
#endif /*GL_INGR_color_clamp*/

#ifndef GL_INGR_interlace_read
#define GL_INGR_interlace_read 1
/* http://www.opengl.org/registry/specs/INGR/interlace_read.txt */
#define GL_INTERLACE_READ_INGR                   0x8568
#endif /*GL_INGR_interlace_read*/

#ifndef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 1
/* http://www.opengl.org/registry/specs/INTEL/conservative_rasterization.txt */
#define GL_CONSERVATIVE_RASTERIZATION_INTEL      0x83FE
#endif /*GL_INTEL_conservative_rasterization*/

#ifndef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 1
/* http://www.opengl.org/registry/specs/INTEL/fragment_shader_ordering.txt */
#endif /*GL_INTEL_fragment_shader_ordering*/

#ifndef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 1
/* http://www.opengl.org/registry/specs/INTEL/framebuffer_CMAA.txt */
#endif /*GL_INTEL_framebuffer_CMAA*/

#ifndef GL_INTEL_map_texture
#define GL_INTEL_map_texture 1
/* http://www.opengl.org/registry/specs/INTEL/map_texture.txt */
#define GL_LAYOUT_DEFAULT_INTEL                  0
#define GL_LAYOUT_LINEAR_INTEL                   1
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL        2
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL           0x83FF
typedef void * (GLAPIENTRY * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum *layout);
typedef void (GLAPIENTRY * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);
typedef void (GLAPIENTRY * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
extern PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
extern PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_INTEL_map_texture*/

#ifndef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 1
/* http://www.opengl.org/registry/specs/INTEL/parallel_arrays.txt */
#define GL_PARALLEL_ARRAYS_INTEL                 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL  0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL  0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL   0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
typedef void (GLAPIENTRY * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
typedef void (GLAPIENTRY * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void** pointer);
typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
extern PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
extern PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
extern PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_INTEL_parallel_arrays*/

#ifndef GL_INTEL_performance_query
#define GL_INTEL_performance_query 1
/* http://www.opengl.org/registry/specs/INTEL/performance_query.txt */
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL        0x0000
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL        0x0001
#define GL_PERFQUERY_DONOT_FLUSH_INTEL           0x83F9
#define GL_PERFQUERY_FLUSH_INTEL                 0x83FA
#define GL_PERFQUERY_WAIT_INTEL                  0x83FB
#define GL_PERFQUERY_COUNTER_EVENT_INTEL         0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL  0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL    0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL           0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL     0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL   0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL   0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL    0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL   0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL   0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
typedef void (GLAPIENTRY * PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (GLAPIENTRY * PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint* queryHandle);
typedef void (GLAPIENTRY * PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (GLAPIENTRY * PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (GLAPIENTRY * PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint* queryId);
typedef void (GLAPIENTRY * PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint* nextQueryId);
typedef void (GLAPIENTRY * PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void (GLAPIENTRY * PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
typedef void (GLAPIENTRY * PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar* queryName, GLuint *queryId);
typedef void (GLAPIENTRY * PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINPERFQUERYINTELPROC glBeginPerfQueryINTEL;
extern PFNGLCREATEPERFQUERYINTELPROC glCreatePerfQueryINTEL;
extern PFNGLDELETEPERFQUERYINTELPROC glDeletePerfQueryINTEL;
extern PFNGLENDPERFQUERYINTELPROC glEndPerfQueryINTEL;
extern PFNGLGETFIRSTPERFQUERYIDINTELPROC glGetFirstPerfQueryIdINTEL;
extern PFNGLGETNEXTPERFQUERYIDINTELPROC glGetNextPerfQueryIdINTEL;
extern PFNGLGETPERFCOUNTERINFOINTELPROC glGetPerfCounterInfoINTEL;
extern PFNGLGETPERFQUERYDATAINTELPROC glGetPerfQueryDataINTEL;
extern PFNGLGETPERFQUERYIDBYNAMEINTELPROC glGetPerfQueryIdByNameINTEL;
extern PFNGLGETPERFQUERYINFOINTELPROC glGetPerfQueryInfoINTEL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_INTEL_performance_query*/

#ifndef GL_INTEL_texture_scissor
#define GL_INTEL_texture_scissor 1
/* http://www.opengl.org/registry/specs/INTEL/texture_scissor.txt */
typedef void (GLAPIENTRY * PFNGLTEXSCISSORFUNCINTELPROC) (GLenum target, GLenum lfunc, GLenum hfunc);
typedef void (GLAPIENTRY * PFNGLTEXSCISSORINTELPROC) (GLenum target, GLclampf tlow, GLclampf thigh);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXSCISSORFUNCINTELPROC glTexScissorFuncINTEL;
extern PFNGLTEXSCISSORINTELPROC glTexScissorINTEL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_INTEL_texture_scissor*/

#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 1
/* http://www.opengl.org/registry/specs/KHR/blend_equation_advanced.txt */
#define GL_BLEND_ADVANCED_COHERENT_KHR           0x9285
#define GL_MULTIPLY_KHR                          0x9294
#define GL_SCREEN_KHR                            0x9295
#define GL_OVERLAY_KHR                           0x9296
#define GL_DARKEN_KHR                            0x9297
#define GL_LIGHTEN_KHR                           0x9298
#define GL_COLORDODGE_KHR                        0x9299
#define GL_COLORBURN_KHR                         0x929A
#define GL_HARDLIGHT_KHR                         0x929B
#define GL_SOFTLIGHT_KHR                         0x929C
#define GL_DIFFERENCE_KHR                        0x929E
#define GL_EXCLUSION_KHR                         0x92A0
#define GL_HSL_HUE_KHR                           0x92AD
#define GL_HSL_SATURATION_KHR                    0x92AE
#define GL_HSL_COLOR_KHR                         0x92AF
#define GL_HSL_LUMINOSITY_KHR                    0x92B0
typedef void (GLAPIENTRY * PFNGLBLENDBARRIERKHRPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDBARRIERKHRPROC glBlendBarrierKHR;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_KHR_blend_equation_advanced*/

#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 1
/* http://www.opengl.org/registry/specs/KHR/blend_equation_advanced.txt */
#endif /*GL_KHR_blend_equation_advanced_coherent*/

#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 1
/* http://www.opengl.org/registry/specs/KHR/context_flush_control.txt */
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR 0x0000
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_KHR      0x2097
#define GL_EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x2098
#define GL_CONTEXT_RELEASE_BEHAVIOR              0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH        0x82FC
#endif /*GL_KHR_context_flush_control*/

#ifndef GL_KHR_debug
#define GL_KHR_debug 1
/* http://www.opengl.org/registry/specs/KHR/debug.txt */
#define GL_CONTEXT_FLAG_DEBUG_BIT                0x00000002
#define GL_STACK_OVERFLOW                        0x0503
#define GL_STACK_UNDERFLOW                       0x0504
#define GL_DEBUG_OUTPUT_SYNCHRONOUS              0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH      0x8243
#define GL_DEBUG_CALLBACK_FUNCTION               0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM             0x8245
#define GL_DEBUG_SOURCE_API                      0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM            0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER          0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY              0x8249
#define GL_DEBUG_SOURCE_APPLICATION              0x824A
#define GL_DEBUG_SOURCE_OTHER                    0x824B
#define GL_DEBUG_TYPE_ERROR                      0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR        0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR         0x824E
#define GL_DEBUG_TYPE_PORTABILITY                0x824F
#define GL_DEBUG_TYPE_PERFORMANCE                0x8250
#define GL_DEBUG_TYPE_OTHER                      0x8251
#define GL_DEBUG_TYPE_MARKER                     0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP                 0x8269
#define GL_DEBUG_TYPE_POP_GROUP                  0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION           0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH           0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH               0x826D
#define GL_BUFFER                                0x82E0
#define GL_SHADER                                0x82E1
#define GL_PROGRAM                               0x82E2
#define GL_QUERY                                 0x82E3
#define GL_PROGRAM_PIPELINE                      0x82E4
#define GL_SAMPLER                               0x82E6
#define GL_DISPLAY_LIST                          0x82E7
#define GL_MAX_LABEL_LENGTH                      0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH              0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES             0x9144
#define GL_DEBUG_LOGGED_MESSAGES                 0x9145
#define GL_DEBUG_SEVERITY_HIGH                   0x9146
#define GL_DEBUG_SEVERITY_MEDIUM                 0x9147
#define GL_DEBUG_SEVERITY_LOW                    0x9148
#define GL_DEBUG_OUTPUT                          0x92E0
typedef void (GLAPIENTRY *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
typedef void (GLAPIENTRY * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (GLAPIENTRY * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (GLAPIENTRY * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
typedef void (GLAPIENTRY * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar* label);
typedef void (GLAPIENTRY * PFNGLPOPDEBUGGROUPPROC) (void);
typedef void (GLAPIENTRY * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar * message);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
extern PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
extern PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
extern PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
extern PFNGLGETOBJECTLABELPROC glGetObjectLabel;
extern PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
extern PFNGLOBJECTLABELPROC glObjectLabel;
extern PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
extern PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
extern PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_KHR_debug*/

#ifndef GL_KHR_no_error
#define GL_KHR_no_error 1
/* http://www.opengl.org/registry/specs/KHR/no_error.txt */
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR         0x00000008
#endif /*GL_KHR_no_error*/

#ifndef GL_KHR_robustness
#define GL_KHR_robustness 1
/* http://www.opengl.org/registry/specs/KHR/robustness.txt */
#define GL_CONTEXT_LOST                          0x0507
#define GL_LOSE_CONTEXT_ON_RESET                 0x8252
#define GL_GUILTY_CONTEXT_RESET                  0x8253
#define GL_INNOCENT_CONTEXT_RESET                0x8254
#define GL_UNKNOWN_CONTEXT_RESET                 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY           0x8256
#define GL_NO_RESET_NOTIFICATION                 0x8261
#define GL_CONTEXT_ROBUST_ACCESS                 0x90F3
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void (GLAPIENTRY * PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
extern PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
extern PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
extern PFNGLREADNPIXELSPROC glReadnPixels;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_KHR_robustness*/

#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 1
/* http://www.opengl.org/registry/specs/KHR/robust_buffer_access_behavior.txt */
#endif /*GL_KHR_robust_buffer_access_behavior*/

#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 1
/* http://www.opengl.org/registry/specs/KHR/texture_compression_astc_hdr.txt */
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR          0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR          0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR          0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR          0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR          0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR          0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR          0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR          0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR         0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR         0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR         0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR        0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR        0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR        0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR  0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR  0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR  0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR  0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR  0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR  0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR  0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR  0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /*GL_KHR_texture_compression_astc_hdr*/

#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 1
/* http://www.opengl.org/registry/specs/KHR/texture_compression_astc_hdr.txt */
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR          0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR          0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR          0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR          0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR          0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR          0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR          0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR          0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR         0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR         0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR         0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR        0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR        0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR        0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR  0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR  0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR  0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR  0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR  0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR  0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR  0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR  0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /*GL_KHR_texture_compression_astc_ldr*/

#ifndef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 1
/* http://www.opengl.org/registry/specs/KHR/texture_compression_astc_sliced_3d.txt */
#endif /*GL_KHR_texture_compression_astc_sliced_3d*/

#ifndef GL_KTX_buffer_region
#define GL_KTX_buffer_region 1
#define GL_KTX_FRONT_REGION                      0x0
#define GL_KTX_BACK_REGION                       0x1
#define GL_KTX_Z_REGION                          0x2
#define GL_KTX_STENCIL_REGION                    0x3
typedef GLuint (GLAPIENTRY * PFNGLBUFFERREGIONENABLEDPROC) (void);
typedef GLuint (GLAPIENTRY * PFNGLNEWBUFFERREGIONPROC) (GLenum region);
typedef void (GLAPIENTRY * PFNGLDELETEBUFFERREGIONPROC) (GLenum region);
typedef void (GLAPIENTRY * PFNGLREADBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPIENTRY * PFNGLDRAWBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBUFFERREGIONENABLEDPROC glBufferRegionEnabled;
extern PFNGLNEWBUFFERREGIONPROC glNewBufferRegion;
extern PFNGLDELETEBUFFERREGIONPROC glDeleteBufferRegion;
extern PFNGLREADBUFFERREGIONPROC glReadBufferRegion;
extern PFNGLDRAWBUFFERREGIONPROC glDrawBufferRegion;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_KTX_buffer_region*/

#ifndef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 1
/* http://www.opengl.org/registry/specs/MESAX/texture_stack.txt */
#define GL_TEXTURE_1D_STACK_MESAX                0x8759
#define GL_TEXTURE_2D_STACK_MESAX                0x875A
#define GL_PROXY_TEXTURE_1D_STACK_MESAX          0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX          0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX        0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX        0x875E
#endif /*GL_MESAX_texture_stack*/

#ifndef GL_MESA_pack_invert
#define GL_MESA_pack_invert 1
/* http://www.opengl.org/registry/specs/MESA/pack_invert.txt */
#define GL_PACK_INVERT_MESA                      0x8758
#endif /*GL_MESA_pack_invert*/

#ifndef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 1
/* http://www.opengl.org/registry/specs/MESA/resize_buffers.txt */
typedef void (GLAPIENTRY * PFNGLRESIZEBUFFERSMESAPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_MESA_resize_buffers*/

#ifndef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 1
/* http://www.opengl.org/registry/specs/MESA/shader_integer_functions.txt */
#endif /*GL_MESA_shader_integer_functions*/

#ifndef GL_MESA_window_pos
#define GL_MESA_window_pos 1
/* http://www.opengl.org/registry/specs/MESA/window_pos.txt */
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVMESAPROC) (const GLint* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVMESAPROC) (const GLint* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IVMESAPROC) (const GLint* p);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort* p);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
extern PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
extern PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
extern PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
extern PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
extern PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
extern PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
extern PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
extern PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
extern PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
extern PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
extern PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
extern PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
extern PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
extern PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
extern PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
extern PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
extern PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
extern PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
extern PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
extern PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
extern PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
extern PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
extern PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_MESA_window_pos*/

#ifndef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 1
/* http://www.opengl.org/registry/specs/MESA/ycbcr_texture.txt */
#define GL_UNSIGNED_SHORT_8_8_MESA               0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_MESA           0x85BB
#define GL_YCBCR_MESA                            0x8757
#endif /*GL_MESA_ycbcr_texture*/

#ifndef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 1
/* http://www.opengl.org/registry/specs/NVX/nvx_blend_equation_advanced_multi_draw_buffers.txt */
#endif /*GL_NVX_blend_equation_advanced_multi_draw_buffers*/

#ifndef GL_NVX_conditional_render
#define GL_NVX_conditional_render 1
/* http://www.opengl.org/registry/specs/NVX/nvx_conditional_render.txt */
typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERNVXPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
extern PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NVX_conditional_render*/

#ifndef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NVX_gpu_memory_info.txt */
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX  0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX    0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX    0x904B
#endif /*GL_NVX_gpu_memory_info*/

#ifndef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 1
/* http://www.opengl.org/registry/specs/NVX/nvx_linked_gpu_multicast.txt */
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX         0x0800
#define GL_MAX_LGPU_GPUS_NVX                     0x92BA
typedef void (GLAPIENTRY * PFNGLLGPUCOPYIMAGESUBDATANVXPROC) (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAPIENTRY * PFNGLLGPUINTERLOCKNVXPROC) (void);
typedef void (GLAPIENTRY * PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLLGPUCOPYIMAGESUBDATANVXPROC glLGPUCopyImageSubDataNVX;
extern PFNGLLGPUINTERLOCKNVXPROC glLGPUInterlockNVX;
extern PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC glLGPUNamedBufferSubDataNVX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NVX_linked_gpu_multicast*/

#ifndef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 1
/* http://www.opengl.org/registry/specs/NV/bindless_multi_draw_indirect.txt */
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glMultiDrawArraysIndirectBindlessNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glMultiDrawElementsIndirectBindlessNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_bindless_multi_draw_indirect*/

#ifndef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 1
/* http://www.opengl.org/registry/specs/NV/bindless_multi_draw_indirect_count.txt */
typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawArraysIndirectBindlessCountNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawElementsIndirectBindlessCountNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_bindless_multi_draw_indirect_count*/

#ifndef GL_NV_bindless_texture
#define GL_NV_bindless_texture 1
/* http://www.opengl.org/registry/specs/NV/bindless_texture.txt */
typedef GLuint64 (GLAPIENTRY * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
typedef GLboolean (GLAPIENTRY * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values);
typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
extern PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
extern PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
extern PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
extern PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
extern PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
extern PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
extern PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
extern PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_bindless_texture*/

#ifndef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 1
/* http://www.opengl.org/registry/specs/NV/blend_equation_advanced.txt */
#define GL_XOR_NV                                0x1506
#define GL_RED_NV                                0x1903
#define GL_GREEN_NV                              0x1904
#define GL_BLUE_NV                               0x1905
#define GL_BLEND_PREMULTIPLIED_SRC_NV            0x9280
#define GL_BLEND_OVERLAP_NV                      0x9281
#define GL_UNCORRELATED_NV                       0x9282
#define GL_DISJOINT_NV                           0x9283
#define GL_CONJOINT_NV                           0x9284
#define GL_BLEND_ADVANCED_COHERENT_NV            0x9285
#define GL_SRC_NV                                0x9286
#define GL_DST_NV                                0x9287
#define GL_SRC_OVER_NV                           0x9288
#define GL_DST_OVER_NV                           0x9289
#define GL_SRC_IN_NV                             0x928A
#define GL_DST_IN_NV                             0x928B
#define GL_SRC_OUT_NV                            0x928C
#define GL_DST_OUT_NV                            0x928D
#define GL_SRC_ATOP_NV                           0x928E
#define GL_DST_ATOP_NV                           0x928F
#define GL_PLUS_NV                               0x9291
#define GL_PLUS_DARKER_NV                        0x9292
#define GL_MULTIPLY_NV                           0x9294
#define GL_SCREEN_NV                             0x9295
#define GL_OVERLAY_NV                            0x9296
#define GL_DARKEN_NV                             0x9297
#define GL_LIGHTEN_NV                            0x9298
#define GL_COLORDODGE_NV                         0x9299
#define GL_COLORBURN_NV                          0x929A
#define GL_HARDLIGHT_NV                          0x929B
#define GL_SOFTLIGHT_NV                          0x929C
#define GL_DIFFERENCE_NV                         0x929E
#define GL_MINUS_NV                              0x929F
#define GL_EXCLUSION_NV                          0x92A0
#define GL_CONTRAST_NV                           0x92A1
#define GL_INVERT_RGB_NV                         0x92A3
#define GL_LINEARDODGE_NV                        0x92A4
#define GL_LINEARBURN_NV                         0x92A5
#define GL_VIVIDLIGHT_NV                         0x92A6
#define GL_LINEARLIGHT_NV                        0x92A7
#define GL_PINLIGHT_NV                           0x92A8
#define GL_HARDMIX_NV                            0x92A9
#define GL_HSL_HUE_NV                            0x92AD
#define GL_HSL_SATURATION_NV                     0x92AE
#define GL_HSL_COLOR_NV                          0x92AF
#define GL_HSL_LUMINOSITY_NV                     0x92B0
#define GL_PLUS_CLAMPED_NV                       0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV                 0x92B2
#define GL_MINUS_CLAMPED_NV                      0x92B3
#define GL_INVERT_OVG_NV                         0x92B4
typedef void (GLAPIENTRY * PFNGLBLENDBARRIERNVPROC) (void);
typedef void (GLAPIENTRY * PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBLENDBARRIERNVPROC glBlendBarrierNV;
extern PFNGLBLENDPARAMETERINVPROC glBlendParameteriNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_blend_equation_advanced*/

#ifndef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 1
/* http://www.opengl.org/registry/specs/NV/blend_equation_advanced.txt */
#endif /*GL_NV_blend_equation_advanced_coherent*/

#ifndef GL_NV_blend_square
#define GL_NV_blend_square 1
/* http://www.opengl.org/registry/specs/NV/blend_square.txt */
#endif /*GL_NV_blend_square*/

#ifndef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 1
/* http://www.opengl.org/registry/specs/NV/clip_space_w_scaling.txt */
#define GL_VIEWPORT_POSITION_W_SCALE_NV          0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV  0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV  0x937E
typedef void (GLAPIENTRY * PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVIEWPORTPOSITIONWSCALENVPROC glViewportPositionWScaleNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_clip_space_w_scaling*/

#ifndef GL_NV_command_list
#define GL_NV_command_list 1
/* http://www.opengl.org/registry/specs/NV/command_list.txt */
#define GL_TERMINATE_SEQUENCE_COMMAND_NV         0x0000
#define GL_NOP_COMMAND_NV                        0x0001
#define GL_DRAW_ELEMENTS_COMMAND_NV              0x0002
#define GL_DRAW_ARRAYS_COMMAND_NV                0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV        0x0004
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV          0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV    0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV      0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV            0x0008
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV          0x0009
#define GL_UNIFORM_ADDRESS_COMMAND_NV            0x000a
#define GL_BLEND_COLOR_COMMAND_NV                0x000b
#define GL_STENCIL_REF_COMMAND_NV                0x000c
#define GL_LINE_WIDTH_COMMAND_NV                 0x000d
#define GL_POLYGON_OFFSET_COMMAND_NV             0x000e
#define GL_ALPHA_REF_COMMAND_NV                  0x000f
#define GL_VIEWPORT_COMMAND_NV                   0x0010
#define GL_SCISSOR_COMMAND_NV                    0x0011
#define GL_FRONT_FACE_COMMAND_NV                 0x0012
typedef void (GLAPIENTRY * PFNGLCALLCOMMANDLISTNVPROC) (GLuint list);
typedef void (GLAPIENTRY * PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments);
typedef void (GLAPIENTRY * PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list);
typedef void (GLAPIENTRY * PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint* lists);
typedef void (GLAPIENTRY * PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint* states);
typedef void (GLAPIENTRY * PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint* lists);
typedef void (GLAPIENTRY * PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint* states);
typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count);
typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count);
typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
typedef GLuint (GLAPIENTRY * PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size);
typedef GLushort (GLAPIENTRY * PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype);
typedef GLboolean (GLAPIENTRY * PFNGLISCOMMANDLISTNVPROC) (GLuint list);
typedef GLboolean (GLAPIENTRY * PFNGLISSTATENVPROC) (GLuint state);
typedef void (GLAPIENTRY * PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
typedef void (GLAPIENTRY * PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCALLCOMMANDLISTNVPROC glCallCommandListNV;
extern PFNGLCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
extern PFNGLCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
extern PFNGLCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
extern PFNGLCREATESTATESNVPROC glCreateStatesNV;
extern PFNGLDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
extern PFNGLDELETESTATESNVPROC glDeleteStatesNV;
extern PFNGLDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
extern PFNGLDRAWCOMMANDSNVPROC glDrawCommandsNV;
extern PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
extern PFNGLDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
extern PFNGLGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
extern PFNGLGETSTAGEINDEXNVPROC glGetStageIndexNV;
extern PFNGLISCOMMANDLISTNVPROC glIsCommandListNV;
extern PFNGLISSTATENVPROC glIsStateNV;
extern PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
extern PFNGLSTATECAPTURENVPROC glStateCaptureNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_command_list*/

#ifndef GL_NV_compute_program5
#define GL_NV_compute_program5 1
/* http://www.opengl.org/registry/specs/NV/compute_program5.txt */
#define GL_COMPUTE_PROGRAM_NV                    0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV   0x90FC
#endif /*GL_NV_compute_program5*/

#ifndef GL_NV_conditional_render
#define GL_NV_conditional_render 1
/* http://www.opengl.org/registry/specs/NV/conditional_render.txt */
#define GL_QUERY_WAIT_NV                         0x8E13
#define GL_QUERY_NO_WAIT_NV                      0x8E14
#define GL_QUERY_BY_REGION_WAIT_NV               0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT_NV            0x8E16
typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERNVPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
extern PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_conditional_render*/

#ifndef GL_NV_conservative_raster
#define GL_NV_conservative_raster 1
/* http://www.opengl.org/registry/specs/NV/conservative_raster.txt */
#define GL_CONSERVATIVE_RASTERIZATION_NV         0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV     0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV     0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV   0x9349
typedef void (GLAPIENTRY * PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSUBPIXELPRECISIONBIASNVPROC glSubpixelPrecisionBiasNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_conservative_raster*/

#ifndef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 1
/* http://www.opengl.org/registry/specs/NV/conservative_raster_dilate.txt */
#define GL_CONSERVATIVE_RASTER_DILATE_NV         0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV   0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
typedef void (GLAPIENTRY * PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glConservativeRasterParameterfNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_conservative_raster_dilate*/

#ifndef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 1
/* http://www.opengl.org/registry/specs/NV/conservative_raster_pre_snap_triangles.txt */
#define GL_CONSERVATIVE_RASTER_MODE_NV           0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
typedef void (GLAPIENTRY * PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCONSERVATIVERASTERPARAMETERINVPROC glConservativeRasterParameteriNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_conservative_raster_pre_snap_triangles*/

#ifndef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 1
/* http://www.opengl.org/registry/specs/NV/copy_depth_to_color.txt */
#define GL_DEPTH_STENCIL_TO_RGBA_NV              0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV              0x886F
#endif /*GL_NV_copy_depth_to_color*/

#ifndef GL_NV_copy_image
#define GL_NV_copy_image 1
/* http://www.opengl.org/registry/specs/NV/copy_image.txt */
typedef void (GLAPIENTRY * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_copy_image*/

#ifndef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 1
/* http://www.opengl.org/registry/specs/NV/deep_texture3D.txt */
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV   0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV          0x90D1
#endif /*GL_NV_deep_texture3D*/

#ifndef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_depth_buffer_float.txt */
#define GL_DEPTH_COMPONENT32F_NV                 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV                  0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV     0x8DAD
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV            0x8DAF
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
typedef void (GLAPIENTRY * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
extern PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
extern PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_depth_buffer_float*/

#ifndef GL_NV_depth_clamp
#define GL_NV_depth_clamp 1
/* http://www.opengl.org/registry/specs/NV/depth_clamp.txt */
#define GL_DEPTH_CLAMP_NV                        0x864F
#endif /*GL_NV_depth_clamp*/

#ifndef GL_NV_depth_range_unclamped
#define GL_NV_depth_range_unclamped 1
#define GL_SAMPLE_COUNT_BITS_NV                  0x8864
#define GL_CURRENT_SAMPLE_COUNT_QUERY_NV         0x8865
#define GL_QUERY_RESULT_NV                       0x8866
#define GL_QUERY_RESULT_AVAILABLE_NV             0x8867
#define GL_SAMPLE_COUNT_NV                       0x8914
#endif /*GL_NV_depth_range_unclamped*/

#ifndef GL_NV_draw_texture
#define GL_NV_draw_texture 1
/* http://www.opengl.org/registry/specs/NV/draw_texture.txt */
typedef void (GLAPIENTRY * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWTEXTURENVPROC glDrawTextureNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_draw_texture*/

#ifndef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 1
/* http://www.opengl.org/registry/specs/NV/draw_vulkan_image.txt */
typedef void (APIENTRY *GLVULKANPROCNV)(void);
typedef void (GLAPIENTRY * PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef GLVULKANPROCNV (GLAPIENTRY * PFNGLGETVKPROCADDRNVPROC) (const GLchar* name);
typedef void (GLAPIENTRY * PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence);
typedef void (GLAPIENTRY * PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
typedef void (GLAPIENTRY * PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDRAWVKIMAGENVPROC glDrawVkImageNV;
extern PFNGLGETVKPROCADDRNVPROC glGetVkProcAddrNV;
extern PFNGLSIGNALVKFENCENVPROC glSignalVkFenceNV;
extern PFNGLSIGNALVKSEMAPHORENVPROC glSignalVkSemaphoreNV;
extern PFNGLWAITVKSEMAPHORENVPROC glWaitVkSemaphoreNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_draw_vulkan_image*/

#ifndef GL_NV_evaluators
#define GL_NV_evaluators 1
/* http://www.opengl.org/registry/specs/NV/evaluators.txt */
#define GL_EVAL_2D_NV                            0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV                 0x86C1
#define GL_MAP_TESSELLATION_NV                   0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV                 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV                 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV       0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV                0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV                0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV                0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV                0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV                0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV                0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV                0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV                0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV                0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV                0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV               0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV               0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV               0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV               0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV               0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV               0x86D5
#define GL_MAX_MAP_TESSELLATION_NV               0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV            0x86D7
typedef void (GLAPIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
typedef void (GLAPIENTRY * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLEVALMAPSNVPROC glEvalMapsNV;
extern PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
extern PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
extern PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
extern PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
extern PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
extern PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
extern PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
extern PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_evaluators*/

#ifndef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 1
/* http://www.opengl.org/registry/specs/NV/explicit_multisample.txt */
#define GL_SAMPLE_POSITION_NV                    0x8E50
#define GL_SAMPLE_MASK_NV                        0x8E51
#define GL_SAMPLE_MASK_VALUE_NV                  0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV       0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV               0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV               0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV           0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV  0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS_NV              0x8E59
typedef void (GLAPIENTRY * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat* val);
typedef void (GLAPIENTRY * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
typedef void (GLAPIENTRY * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
extern PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
extern PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_explicit_multisample*/

#ifndef GL_NV_fence
#define GL_NV_fence 1
/* http://www.opengl.org/registry/specs/NV/fence.txt */
#define GL_ALL_COMPLETED_NV                      0x84F2
#define GL_FENCE_STATUS_NV                       0x84F3
#define GL_FENCE_CONDITION_NV                    0x84F4
typedef void (GLAPIENTRY * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint* fences);
typedef void (GLAPIENTRY * PFNGLFINISHFENCENVPROC) (GLuint fence);
typedef void (GLAPIENTRY * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint* fences);
typedef void (GLAPIENTRY * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISFENCENVPROC) (GLuint fence);
typedef void (GLAPIENTRY * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCENVPROC) (GLuint fence);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
extern PFNGLFINISHFENCENVPROC glFinishFenceNV;
extern PFNGLGENFENCESNVPROC glGenFencesNV;
extern PFNGLGETFENCEIVNVPROC glGetFenceivNV;
extern PFNGLISFENCENVPROC glIsFenceNV;
extern PFNGLSETFENCENVPROC glSetFenceNV;
extern PFNGLTESTFENCENVPROC glTestFenceNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_fence*/

#ifndef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 1
/* http://www.opengl.org/registry/specs/NV/fill_rectangle.txt */
#define GL_FILL_RECTANGLE_NV                     0x933C
#endif /*GL_NV_fill_rectangle*/

#ifndef GL_NV_float_buffer
#define GL_NV_float_buffer 1
/* http://www.opengl.org/registry/specs/NV/float_buffer.txt */
#define GL_FLOAT_R_NV                            0x8880
#define GL_FLOAT_RG_NV                           0x8881
#define GL_FLOAT_RGB_NV                          0x8882
#define GL_FLOAT_RGBA_NV                         0x8883
#define GL_FLOAT_R16_NV                          0x8884
#define GL_FLOAT_R32_NV                          0x8885
#define GL_FLOAT_RG16_NV                         0x8886
#define GL_FLOAT_RG32_NV                         0x8887
#define GL_FLOAT_RGB16_NV                        0x8888
#define GL_FLOAT_RGB32_NV                        0x8889
#define GL_FLOAT_RGBA16_NV                       0x888A
#define GL_FLOAT_RGBA32_NV                       0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV           0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV            0x888D
#define GL_FLOAT_RGBA_MODE_NV                    0x888E
#endif /*GL_NV_float_buffer*/

#ifndef GL_NV_fog_distance
#define GL_NV_fog_distance 1
/* http://www.opengl.org/registry/specs/NV/fog_distance.txt */
#define GL_FOG_DISTANCE_MODE_NV                  0x855A
#define GL_EYE_RADIAL_NV                         0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV                 0x855C
#endif /*GL_NV_fog_distance*/

#ifndef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 1
/* http://www.opengl.org/registry/specs/NV/fragment_coverage_to_color.txt */
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV         0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV            0x92DE
typedef void (GLAPIENTRY * PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAGMENTCOVERAGECOLORNVPROC glFragmentCoverageColorNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_fragment_coverage_to_color*/

#ifndef GL_NV_fragment_program
#define GL_NV_fragment_program 1
/* http://www.opengl.org/registry/specs/NV/fragment_program.txt */
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_FRAGMENT_PROGRAM_NV                   0x8870
#define GL_MAX_TEXTURE_COORDS_NV                 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV            0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV           0x8873
#define GL_PROGRAM_ERROR_STRING_NV               0x8874
typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]);
typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
extern PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
extern PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
extern PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_fragment_program*/

#ifndef GL_NV_fragment_program2
#define GL_NV_fragment_program2 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_NV_fragment_program2.txt */
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV      0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV             0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV               0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV             0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV             0x88F8
#endif /*GL_NV_fragment_program2*/

#ifndef GL_NV_fragment_program4
#define GL_NV_fragment_program4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_fragment_program4.txt */
/* GL_NV_gpu_program4 */
#endif /*GL_NV_fragment_program4*/

#ifndef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_NV_fragment_program_option.txt */
#endif /*GL_NV_fragment_program_option*/

#ifndef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 1
/* http://www.opengl.org/registry/specs/NV/fragment_shader_interlock.txt */
#endif /*GL_NV_fragment_shader_interlock*/

#ifndef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 1
/* http://www.opengl.org/registry/specs/NV/framebuffer_mixed_samples.txt */
#define GL_COLOR_SAMPLES_NV                      0x8E20
#define GL_RASTER_MULTISAMPLE_EXT                0x9327
#define GL_RASTER_SAMPLES_EXT                    0x9328
#define GL_MAX_RASTER_SAMPLES_EXT                0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT     0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT          0x932C
#define GL_DEPTH_SAMPLES_NV                      0x932D
#define GL_STENCIL_SAMPLES_NV                    0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV      0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV    0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV          0x9331
#define GL_COVERAGE_MODULATION_NV                0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV     0x9333
#endif /*GL_NV_framebuffer_mixed_samples*/

#ifndef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_framebuffer_multisample_coverage.txt */
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV      0x8CAB
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV          0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV     0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV         0x8E12
typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_framebuffer_multisample_coverage*/

#ifndef GL_NV_geometry_program4
#define GL_NV_geometry_program4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_geometry_program4.txt */
/* GL_NV_gpu_program4 */
#define GL_GEOMETRY_PROGRAM_NV                   0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV        0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
typedef void (GLAPIENTRY * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_geometry_program4*/

#ifndef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_geometry_shader4.txt */
#endif /*GL_NV_geometry_shader4*/

#ifndef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 1
/* http://www.opengl.org/registry/specs/NV/geometry_shader_passthrough.txt */
#endif /*GL_NV_geometry_shader_passthrough*/

#ifndef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 1
/* http://www.opengl.org/registry/specs/NV/gpu_multicast.txt */
#define GL_PER_GPU_STORAGE_BIT_NV                0x0800
#define GL_MULTICAST_GPUS_NV                     0x92BA
#define GL_PER_GPU_STORAGE_NV                    0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_RENDER_GPU_MASK_NV                    0x9558
typedef void (GLAPIENTRY * PFNGLMULTICASTBARRIERNVPROC) (void);
typedef void (GLAPIENTRY * PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAPIENTRY * PFNGLMULTICASTBUFFERSUBDATANVPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (GLAPIENTRY * PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC) (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLMULTICASTCOPYIMAGESUBDATANVPROC) (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAPIENTRY * PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint64* params);
typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint64* params);
typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask);
typedef void (GLAPIENTRY * PFNGLRENDERGPUMASKNVPROC) (GLbitfield mask);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLMULTICASTBARRIERNVPROC glMulticastBarrierNV;
extern PFNGLMULTICASTBLITFRAMEBUFFERNVPROC glMulticastBlitFramebufferNV;
extern PFNGLMULTICASTBUFFERSUBDATANVPROC glMulticastBufferSubDataNV;
extern PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC glMulticastCopyBufferSubDataNV;
extern PFNGLMULTICASTCOPYIMAGESUBDATANVPROC glMulticastCopyImageSubDataNV;
extern PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glMulticastFramebufferSampleLocationsfvNV;
extern PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC glMulticastGetQueryObjecti64vNV;
extern PFNGLMULTICASTGETQUERYOBJECTIVNVPROC glMulticastGetQueryObjectivNV;
extern PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC glMulticastGetQueryObjectui64vNV;
extern PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC glMulticastGetQueryObjectuivNV;
extern PFNGLMULTICASTWAITSYNCNVPROC glMulticastWaitSyncNV;
extern PFNGLRENDERGPUMASKNVPROC glRenderGpuMaskNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_gpu_multicast*/

#ifndef GL_NV_gpu_program4
#define GL_NV_gpu_program4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_gpu_program4.txt */
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV           0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV           0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV          0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV          0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV      0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV      0x8909
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV        0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV        0x8DA6
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
extern PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
extern PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
extern PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
extern PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
extern PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
extern PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
extern PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
extern PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_gpu_program4*/

#ifndef GL_NV_gpu_program5
#define GL_NV_gpu_program5 1
/* http://www.opengl.org/registry/specs/NV/gpu_program5.txt */
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV   0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV  0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV  0x8E5C
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV  0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV  0x8E5F
#endif /*GL_NV_gpu_program5*/

#ifndef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 1
/* http://www.opengl.org/registry/specs/NV/gpu_program5_mem_extended.txt */
#endif /*GL_NV_gpu_program5_mem_extended*/

#ifndef GL_NV_gpu_program_fp64
#define GL_NV_gpu_program_fp64 1
/* http://www.opengl.org/registry/specs/NV/gpu_program5.txt */
#endif /*GL_NV_gpu_program_fp64*/

#ifndef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 1
/* http://www.opengl.org/registry/specs/NV/gpu_shader5.txt */
#define GL_INT64_NV                              0x140E
#define GL_UNSIGNED_INT64_NV                     0x140F
#define GL_INT8_NV                               0x8FE0
#define GL_INT8_VEC2_NV                          0x8FE1
#define GL_INT8_VEC3_NV                          0x8FE2
#define GL_INT8_VEC4_NV                          0x8FE3
#define GL_INT16_NV                              0x8FE4
#define GL_INT16_VEC2_NV                         0x8FE5
#define GL_INT16_VEC3_NV                         0x8FE6
#define GL_INT16_VEC4_NV                         0x8FE7
#define GL_INT64_VEC2_NV                         0x8FE9
#define GL_INT64_VEC3_NV                         0x8FEA
#define GL_INT64_VEC4_NV                         0x8FEB
#define GL_UNSIGNED_INT8_NV                      0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV                 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV                 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV                 0x8FEF
#define GL_UNSIGNED_INT16_NV                     0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV                0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV                0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV                0x8FF3
#define GL_UNSIGNED_INT64_VEC2_NV                0x8FF5
#define GL_UNSIGNED_INT64_VEC3_NV                0x8FF6
#define GL_UNSIGNED_INT64_VEC4_NV                0x8FF7
#define GL_FLOAT16_NV                            0x8FF8
#define GL_FLOAT16_VEC2_NV                       0x8FF9
#define GL_FLOAT16_VEC3_NV                       0x8FFA
#define GL_FLOAT16_VEC4_NV                       0x8FFB
typedef void (GLAPIENTRY * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT* params);
typedef void (GLAPIENTRY * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
typedef void (GLAPIENTRY * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (GLAPIENTRY * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAPIENTRY * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAPIENTRY * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
extern PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
extern PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
extern PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
extern PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
extern PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
extern PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
extern PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
extern PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
extern PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
extern PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
extern PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
extern PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
extern PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
extern PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
extern PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
extern PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
extern PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
extern PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
extern PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
extern PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
extern PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
extern PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
extern PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
extern PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
extern PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
extern PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
extern PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
extern PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
extern PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
extern PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
extern PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
extern PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
extern PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_gpu_shader5*/

#ifndef GL_NV_half_float
#define GL_NV_half_float 1
/* http://www.opengl.org/registry/specs/NV/half_float.txt */
#define GL_HALF_FLOAT_NV                         0x140B
typedef unsigned short GLhalf;
typedef void (GLAPIENTRY * PFNGLCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
typedef void (GLAPIENTRY * PFNGLCOLOR3HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLCOLOR4HNVPROC) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
typedef void (GLAPIENTRY * PFNGLCOLOR4HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLFOGCOORDHNVPROC) (GLhalf fog);
typedef void (GLAPIENTRY * PFNGLFOGCOORDHVNVPROC) (const GLhalf* fog);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalf s);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalf s, GLhalf t);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLNORMAL3HNVPROC) (GLhalf nx, GLhalf ny, GLhalf nz);
typedef void (GLAPIENTRY * PFNGLNORMAL3HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD1HNVPROC) (GLhalf s);
typedef void (GLAPIENTRY * PFNGLTEXCOORD1HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2HNVPROC) (GLhalf s, GLhalf t);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD3HNVPROC) (GLhalf s, GLhalf t, GLhalf r);
typedef void (GLAPIENTRY * PFNGLTEXCOORD3HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4HNVPROC) (GLhalf s, GLhalf t, GLhalf r, GLhalf q);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEX2HNVPROC) (GLhalf x, GLhalf y);
typedef void (GLAPIENTRY * PFNGLVERTEX2HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEX3HNVPROC) (GLhalf x, GLhalf y, GLhalf z);
typedef void (GLAPIENTRY * PFNGLVERTEX3HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEX4HNVPROC) (GLhalf x, GLhalf y, GLhalf z, GLhalf w);
typedef void (GLAPIENTRY * PFNGLVERTEX4HVNVPROC) (const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalf x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalf x, GLhalf y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHNVPROC) (GLhalf weight);
typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalf* weight);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLOR3HNVPROC glColor3hNV;
extern PFNGLCOLOR3HVNVPROC glColor3hvNV;
extern PFNGLCOLOR4HNVPROC glColor4hNV;
extern PFNGLCOLOR4HVNVPROC glColor4hvNV;
extern PFNGLFOGCOORDHNVPROC glFogCoordhNV;
extern PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
extern PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
extern PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
extern PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
extern PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
extern PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
extern PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
extern PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
extern PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
extern PFNGLNORMAL3HNVPROC glNormal3hNV;
extern PFNGLNORMAL3HVNVPROC glNormal3hvNV;
extern PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
extern PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
extern PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
extern PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
extern PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
extern PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
extern PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
extern PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
extern PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
extern PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
extern PFNGLVERTEX2HNVPROC glVertex2hNV;
extern PFNGLVERTEX2HVNVPROC glVertex2hvNV;
extern PFNGLVERTEX3HNVPROC glVertex3hNV;
extern PFNGLVERTEX3HVNVPROC glVertex3hvNV;
extern PFNGLVERTEX4HNVPROC glVertex4hNV;
extern PFNGLVERTEX4HVNVPROC glVertex4hvNV;
extern PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
extern PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
extern PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
extern PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
extern PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
extern PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
extern PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
extern PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
extern PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
extern PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
extern PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
extern PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
extern PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
extern PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_half_float*/

#ifndef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 1
/* http://www.opengl.org/registry/specs/NV/internalformat_sample_query.txt */
#define GL_MULTISAMPLES_NV                       0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV                0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV                0x9373
#define GL_CONFORMANT_NV                         0x9374
typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glGetInternalformatSampleivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_internalformat_sample_query*/

#ifndef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 1
/* http://www.opengl.org/registry/specs/NV/light_max_exponent.txt */
#define GL_MAX_SHININESS_NV                      0x8504
#define GL_MAX_SPOT_EXPONENT_NV                  0x8505
#endif /*GL_NV_light_max_exponent*/

#ifndef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 1
/* http://www.opengl.org/registry/specs/NV/multisample_coverage.txt */
#define GL_COLOR_SAMPLES_NV                      0x8E20
#endif /*GL_NV_multisample_coverage*/

#ifndef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 1
/* http://www.opengl.org/registry/specs/NV/multisample_filter_hint.txt */
#define GL_MULTISAMPLE_FILTER_HINT_NV            0x8534
#endif /*GL_NV_multisample_filter_hint*/

#ifndef GL_NV_occlusion_query
#define GL_NV_occlusion_query 1
/* http://www.opengl.org/registry/specs/NV/occlusion_query.txt */
#define GL_PIXEL_COUNTER_BITS_NV                 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV         0x8865
#define GL_PIXEL_COUNT_NV                        0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV              0x8867
typedef void (GLAPIENTRY * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
typedef void (GLAPIENTRY * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
extern PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
extern PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
extern PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
extern PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
extern PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
extern PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_occlusion_query*/

#ifndef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 1
/* http://www.opengl.org/registry/specs/NV/packed_depth_stencil.txt */
#define GL_DEPTH_STENCIL_NV                      0x84F9
#define GL_UNSIGNED_INT_24_8_NV                  0x84FA
#endif /*GL_NV_packed_depth_stencil*/

#ifndef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_parameter_buffer_object.txt */
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV    0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV  0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV  0x8DA4
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV  0x8DA1
typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_parameter_buffer_object*/

#ifndef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 1
/* http://www.opengl.org/registry/specs/NV/parameter_buffer_object2.txt */
#endif /*GL_NV_parameter_buffer_object2*/

#ifndef GL_NV_path_rendering
#define GL_NV_path_rendering 1
/* http://www.opengl.org/registry/specs/NV/path_rendering.txt */
#define GL_CLOSE_PATH_NV                         0x00
#define GL_BOLD_BIT_NV                           0x01
#define GL_GLYPH_WIDTH_BIT_NV                    0x01
#define GL_GLYPH_HEIGHT_BIT_NV                   0x02
#define GL_ITALIC_BIT_NV                         0x02
#define GL_MOVE_TO_NV                            0x02
#define GL_RELATIVE_MOVE_TO_NV                   0x03
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV     0x04
#define GL_LINE_TO_NV                            0x04
#define GL_RELATIVE_LINE_TO_NV                   0x05
#define GL_HORIZONTAL_LINE_TO_NV                 0x06
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV        0x07
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV     0x08
#define GL_VERTICAL_LINE_TO_NV                   0x08
#define GL_RELATIVE_VERTICAL_LINE_TO_NV          0x09
#define GL_QUADRATIC_CURVE_TO_NV                 0x0A
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV        0x0B
#define GL_CUBIC_CURVE_TO_NV                     0x0C
#define GL_RELATIVE_CUBIC_CURVE_TO_NV            0x0D
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV          0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV              0x10
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV     0x11
#define GL_SMALL_CCW_ARC_TO_NV                   0x12
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV          0x13
#define GL_SMALL_CW_ARC_TO_NV                    0x14
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV           0x15
#define GL_LARGE_CCW_ARC_TO_NV                   0x16
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV          0x17
#define GL_LARGE_CW_ARC_TO_NV                    0x18
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV           0x19
#define GL_CONIC_CURVE_TO_NV                     0x1A
#define GL_RELATIVE_CONIC_CURVE_TO_NV            0x1B
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV       0x20
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV       0x40
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ROUNDED_RECT_NV                       0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV              0xE9
#define GL_ROUNDED_RECT2_NV                      0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV             0xEB
#define GL_ROUNDED_RECT4_NV                      0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV             0xED
#define GL_ROUNDED_RECT8_NV                      0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV             0xEF
#define GL_RESTART_PATH_NV                       0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV           0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV            0xF4
#define GL_RECT_NV                               0xF6
#define GL_RELATIVE_RECT_NV                      0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV                0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV                 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV            0xFC
#define GL_ARC_TO_NV                             0xFE
#define GL_RELATIVE_ARC_TO_NV                    0xFF
#define GL_GLYPH_HAS_KERNING_BIT_NV              0x100
#define GL_PRIMARY_COLOR_NV                      0x852C
#define GL_SECONDARY_COLOR_NV                    0x852D
#define GL_PRIMARY_COLOR                         0x8577
#define GL_PATH_FORMAT_SVG_NV                    0x9070
#define GL_PATH_FORMAT_PS_NV                     0x9071
#define GL_STANDARD_FONT_NAME_NV                 0x9072
#define GL_SYSTEM_FONT_NAME_NV                   0x9073
#define GL_FILE_NAME_NV                          0x9074
#define GL_PATH_STROKE_WIDTH_NV                  0x9075
#define GL_PATH_END_CAPS_NV                      0x9076
#define GL_PATH_INITIAL_END_CAP_NV               0x9077
#define GL_PATH_TERMINAL_END_CAP_NV              0x9078
#define GL_PATH_JOIN_STYLE_NV                    0x9079
#define GL_PATH_MITER_LIMIT_NV                   0x907A
#define GL_PATH_DASH_CAPS_NV                     0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV              0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV             0x907D
#define GL_PATH_DASH_OFFSET_NV                   0x907E
#define GL_PATH_CLIENT_LENGTH_NV                 0x907F
#define GL_PATH_FILL_MODE_NV                     0x9080
#define GL_PATH_FILL_MASK_NV                     0x9081
#define GL_PATH_FILL_COVER_MODE_NV               0x9082
#define GL_PATH_STROKE_COVER_MODE_NV             0x9083
#define GL_PATH_STROKE_MASK_NV                   0x9084
#define GL_PATH_STROKE_BOUND_NV                  0x9086
#define GL_COUNT_UP_NV                           0x9088
#define GL_COUNT_DOWN_NV                         0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV           0x908A
#define GL_CONVEX_HULL_NV                        0x908B
#define GL_BOUNDING_BOX_NV                       0x908D
#define GL_TRANSLATE_X_NV                        0x908E
#define GL_TRANSLATE_Y_NV                        0x908F
#define GL_TRANSLATE_2D_NV                       0x9090
#define GL_TRANSLATE_3D_NV                       0x9091
#define GL_AFFINE_2D_NV                          0x9092
#define GL_AFFINE_3D_NV                          0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV                0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV                0x9098
#define GL_UTF8_NV                               0x909A
#define GL_UTF16_NV                              0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV     0x909C
#define GL_PATH_COMMAND_COUNT_NV                 0x909D
#define GL_PATH_COORD_COUNT_NV                   0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV              0x909F
#define GL_PATH_COMPUTED_LENGTH_NV               0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV             0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV           0x90A2
#define GL_SQUARE_NV                             0x90A3
#define GL_ROUND_NV                              0x90A4
#define GL_TRIANGULAR_NV                         0x90A5
#define GL_BEVEL_NV                              0x90A6
#define GL_MITER_REVERT_NV                       0x90A7
#define GL_MITER_TRUNCATE_NV                     0x90A8
#define GL_SKIP_MISSING_GLYPH_NV                 0x90A9
#define GL_USE_MISSING_GLYPH_NV                  0x90AA
#define GL_PATH_ERROR_POSITION_NV                0x90AB
#define GL_PATH_FOG_GEN_MODE_NV                  0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV               0x90AD
#define GL_ADJACENT_PAIRS_NV                     0x90AE
#define GL_FIRST_TO_REST_NV                      0x90AF
#define GL_PATH_GEN_MODE_NV                      0x90B0
#define GL_PATH_GEN_COEFF_NV                     0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV              0x90B2
#define GL_PATH_GEN_COMPONENTS_NV                0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV             0x90B4
#define GL_MOVE_TO_RESETS_NV                     0x90B5
#define GL_MOVE_TO_CONTINUES_NV                  0x90B6
#define GL_PATH_STENCIL_FUNC_NV                  0x90B7
#define GL_PATH_STENCIL_REF_NV                   0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV            0x90B9
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV   0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV    0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV              0x90BF
#define GL_FONT_GLYPHS_AVAILABLE_NV              0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV            0x9369
#define GL_FONT_UNAVAILABLE_NV                   0x936A
#define GL_FONT_UNINTELLIGIBLE_NV                0x936B
#define GL_STANDARD_FONT_FORMAT_NV               0x936C
#define GL_FRAGMENT_INPUT_NV                     0x936D
#define GL_FONT_X_MIN_BOUNDS_BIT_NV              0x00010000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV              0x00020000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV              0x00040000
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV              0x00080000
#define GL_FONT_UNITS_PER_EM_BIT_NV              0x00100000
#define GL_FONT_ASCENDER_BIT_NV                  0x00200000
#define GL_FONT_DESCENDER_BIT_NV                 0x00400000
#define GL_FONT_HEIGHT_BIT_NV                    0x00800000
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV         0x01000000
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV        0x02000000
#define GL_FONT_UNDERLINE_POSITION_BIT_NV        0x04000000
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV       0x08000000
#define GL_FONT_HAS_KERNING_BIT_NV               0x10000000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV         0x20000000
typedef void (GLAPIENTRY * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
typedef void (GLAPIENTRY * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (GLAPIENTRY * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (GLAPIENTRY * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
typedef GLuint (GLAPIENTRY * PFNGLGENPATHSNVPROC) (GLsizei range);
typedef void (GLAPIENTRY * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat* value);
typedef void (GLAPIENTRY * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint* value);
typedef void (GLAPIENTRY * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte* commands);
typedef void (GLAPIENTRY * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat* coords);
typedef void (GLAPIENTRY * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat* dashArray);
typedef GLfloat (GLAPIENTRY * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef void (GLAPIENTRY * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
typedef void (GLAPIENTRY * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void (GLAPIENTRY * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat* value);
typedef void (GLAPIENTRY * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint* value);
typedef void (GLAPIENTRY * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef void (GLAPIENTRY * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat* value);
typedef void (GLAPIENTRY * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint* value);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params);
typedef void (GLAPIENTRY * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef GLboolean (GLAPIENTRY * PFNGLISPATHNVPROC) (GLuint path);
typedef GLboolean (GLAPIENTRY * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (GLAPIENTRY * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (GLAPIENTRY * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs);
typedef void (GLAPIENTRY * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords);
typedef void (GLAPIENTRY * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (GLAPIENTRY * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum zfunc);
typedef void (GLAPIENTRY * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat* dashArray);
typedef void (GLAPIENTRY * PFNGLPATHFOGGENNVPROC) (GLenum genMode);
typedef GLenum (GLAPIENTRY * PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (GLAPIENTRY * PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef void (GLAPIENTRY * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (GLAPIENTRY * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (GLAPIENTRY * PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (GLAPIENTRY * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
typedef void (GLAPIENTRY * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat* value);
typedef void (GLAPIENTRY * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
typedef void (GLAPIENTRY * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint* value);
typedef void (GLAPIENTRY * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
typedef void (GLAPIENTRY * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
typedef void (GLAPIENTRY * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void (GLAPIENTRY * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords);
typedef void (GLAPIENTRY * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (GLAPIENTRY * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs);
typedef GLboolean (GLAPIENTRY * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void (GLAPIENTRY * PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs);
typedef void (GLAPIENTRY * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (GLAPIENTRY * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (GLAPIENTRY * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues);
typedef void (GLAPIENTRY * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[]);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOPYPATHNVPROC glCopyPathNV;
extern PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
extern PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
extern PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
extern PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
extern PFNGLDELETEPATHSNVPROC glDeletePathsNV;
extern PFNGLGENPATHSNVPROC glGenPathsNV;
extern PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
extern PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
extern PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
extern PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
extern PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
extern PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
extern PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
extern PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
extern PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
extern PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
extern PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
extern PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
extern PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
extern PFNGLGETPROGRAMRESOURCEFVNVPROC glGetProgramResourcefvNV;
extern PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
extern PFNGLISPATHNVPROC glIsPathNV;
extern PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
extern PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
extern PFNGLMATRIXLOAD3X2FNVPROC glMatrixLoad3x2fNV;
extern PFNGLMATRIXLOAD3X3FNVPROC glMatrixLoad3x3fNV;
extern PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glMatrixLoadTranspose3x3fNV;
extern PFNGLMATRIXMULT3X2FNVPROC glMatrixMult3x2fNV;
extern PFNGLMATRIXMULT3X3FNVPROC glMatrixMult3x3fNV;
extern PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glMatrixMultTranspose3x3fNV;
extern PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
extern PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
extern PFNGLPATHCOORDSNVPROC glPathCoordsNV;
extern PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
extern PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
extern PFNGLPATHFOGGENNVPROC glPathFogGenNV;
extern PFNGLPATHGLYPHINDEXARRAYNVPROC glPathGlyphIndexArrayNV;
extern PFNGLPATHGLYPHINDEXRANGENVPROC glPathGlyphIndexRangeNV;
extern PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
extern PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
extern PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glPathMemoryGlyphIndexArrayNV;
extern PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
extern PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
extern PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
extern PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
extern PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
extern PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
extern PFNGLPATHSTRINGNVPROC glPathStringNV;
extern PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
extern PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
extern PFNGLPATHTEXGENNVPROC glPathTexGenNV;
extern PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
extern PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glProgramPathFragmentInputGenNV;
extern PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
extern PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
extern PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
extern PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
extern PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glStencilThenCoverFillPathInstancedNV;
extern PFNGLSTENCILTHENCOVERFILLPATHNVPROC glStencilThenCoverFillPathNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glStencilThenCoverStrokePathInstancedNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glStencilThenCoverStrokePathNV;
extern PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
extern PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_path_rendering*/

#ifndef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 1
/* http://www.opengl.org/registry/specs/NV/path_rendering_shared_edge.txt */
#define GL_SHARED_EDGE_NV                        0xC0
#endif /*GL_NV_path_rendering_shared_edge*/

#ifndef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 1
/* http://www.opengl.org/registry/specs/NV/pixel_data_range.txt */
#define GL_WRITE_PIXEL_DATA_RANGE_NV             0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV              0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV      0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV       0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV     0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV      0x887D
typedef void (GLAPIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
extern PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_pixel_data_range*/

#ifndef GL_NV_point_sprite
#define GL_NV_point_sprite 1
/* http://www.opengl.org/registry/specs/NV/point_sprite.txt */
#define GL_POINT_SPRITE_NV                       0x8861
#define GL_COORD_REPLACE_NV                      0x8862
#define GL_POINT_SPRITE_R_MODE_NV                0x8863
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
extern PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_point_sprite*/

#ifndef GL_NV_present_video
#define GL_NV_present_video 1
/* http://www.opengl.org/registry/specs/NV/present_video.txt */
#define GL_FRAME_NV                              0x8E26
#define GL_FIELDS_NV                             0x8E27
#define GL_CURRENT_TIME_NV                       0x8E28
#define GL_NUM_FILL_STREAMS_NV                   0x8E29
#define GL_PRESENT_TIME_NV                       0x8E2A
#define GL_PRESENT_DURATION_NV                   0x8E2B
typedef void (GLAPIENTRY * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT* params);
typedef void (GLAPIENTRY * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT* params);
typedef void (GLAPIENTRY * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint* params);
typedef void (GLAPIENTRY * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void (GLAPIENTRY * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
extern PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
extern PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
extern PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
extern PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
extern PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_present_video*/

#ifndef GL_NV_primitive_restart
#define GL_NV_primitive_restart 1
/* http://www.opengl.org/registry/specs/NV/primitive_restart.txt */
#define GL_PRIMITIVE_RESTART_NV                  0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV            0x8559
typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTNVPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
extern PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_primitive_restart*/

#ifndef GL_NV_register_combiners
#define GL_NV_register_combiners 1
/* http://www.opengl.org/registry/specs/NV/register_combiners.txt */
#define GL_REGISTER_COMBINERS_NV                 0x8522
#define GL_VARIABLE_A_NV                         0x8523
#define GL_VARIABLE_B_NV                         0x8524
#define GL_VARIABLE_C_NV                         0x8525
#define GL_VARIABLE_D_NV                         0x8526
#define GL_VARIABLE_E_NV                         0x8527
#define GL_VARIABLE_F_NV                         0x8528
#define GL_VARIABLE_G_NV                         0x8529
#define GL_CONSTANT_COLOR0_NV                    0x852A
#define GL_CONSTANT_COLOR1_NV                    0x852B
#define GL_PRIMARY_COLOR_NV                      0x852C
#define GL_SECONDARY_COLOR_NV                    0x852D
#define GL_SPARE0_NV                             0x852E
#define GL_SPARE1_NV                             0x852F
#define GL_DISCARD_NV                            0x8530
#define GL_E_TIMES_F_NV                          0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV        0x8532
#define GL_UNSIGNED_IDENTITY_NV                  0x8536
#define GL_UNSIGNED_INVERT_NV                    0x8537
#define GL_EXPAND_NORMAL_NV                      0x8538
#define GL_EXPAND_NEGATE_NV                      0x8539
#define GL_HALF_BIAS_NORMAL_NV                   0x853A
#define GL_HALF_BIAS_NEGATE_NV                   0x853B
#define GL_SIGNED_IDENTITY_NV                    0x853C
#define GL_SIGNED_NEGATE_NV                      0x853D
#define GL_SCALE_BY_TWO_NV                       0x853E
#define GL_SCALE_BY_FOUR_NV                      0x853F
#define GL_SCALE_BY_ONE_HALF_NV                  0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV          0x8541
#define GL_COMBINER_INPUT_NV                     0x8542
#define GL_COMBINER_MAPPING_NV                   0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV           0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV            0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV            0x8546
#define GL_COMBINER_MUX_SUM_NV                   0x8547
#define GL_COMBINER_SCALE_NV                     0x8548
#define GL_COMBINER_BIAS_NV                      0x8549
#define GL_COMBINER_AB_OUTPUT_NV                 0x854A
#define GL_COMBINER_CD_OUTPUT_NV                 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV                0x854C
#define GL_MAX_GENERAL_COMBINERS_NV              0x854D
#define GL_NUM_GENERAL_COMBINERS_NV              0x854E
#define GL_COLOR_SUM_CLAMP_NV                    0x854F
#define GL_COMBINER0_NV                          0x8550
#define GL_COMBINER1_NV                          0x8551
#define GL_COMBINER2_NV                          0x8552
#define GL_COMBINER3_NV                          0x8553
#define GL_COMBINER4_NV                          0x8554
#define GL_COMBINER5_NV                          0x8555
#define GL_COMBINER6_NV                          0x8556
#define GL_COMBINER7_NV                          0x8557
typedef void (GLAPIENTRY * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (GLAPIENTRY * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
extern PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
extern PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
extern PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
extern PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
extern PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
extern PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
extern PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
extern PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_register_combiners*/

#ifndef GL_NV_register_combiners2
#define GL_NV_register_combiners2 1
/* http://www.opengl.org/registry/specs/NV/register_combiners2.txt */
#define GL_PER_STAGE_CONSTANTS_NV                0x8535
typedef void (GLAPIENTRY * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
extern PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_register_combiners2*/

#ifndef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 1
/* http://www.opengl.org/registry/specs/NV/robustness_video_memory_purge.txt */
#define GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x334C
#define GL_PURGED_CONTEXT_RESET_NV               0x92BB
#endif /*GL_NV_robustness_video_memory_purge*/

#ifndef GL_NV_sample_locations
#define GL_NV_sample_locations 1
/* http://www.opengl.org/registry/specs/NV/sample_locations.txt */
#define GL_SAMPLE_LOCATION_NV                    0x8E50
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV      0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV   0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV  0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV       0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glFramebufferSampleLocationsfvNV;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glNamedFramebufferSampleLocationsfvNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_sample_locations*/

#ifndef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 1
/* http://www.opengl.org/registry/specs/NV/sample_mask_override_coverage.txt */
#endif /*GL_NV_sample_mask_override_coverage*/

#ifndef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 1
/* http://www.opengl.org/registry/specs/NV/shader_atomic_counters.txt */
#endif /*GL_NV_shader_atomic_counters*/

#ifndef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 1
/* http://www.opengl.org/registry/specs/NV/shader_atomic_float.txt */
#endif /*GL_NV_shader_atomic_float*/

#ifndef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 1
/* http://www.opengl.org/registry/specs/NV/shader_atomic_float64.txt */
#endif /*GL_NV_shader_atomic_float64*/

#ifndef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 1
/* http://www.opengl.org/registry/specs/NV/shader_atomic_fp16_vector.txt */
#endif /*GL_NV_shader_atomic_fp16_vector*/

#ifndef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 1
/* http://www.opengl.org/registry/specs/NV/shader_atomic_int64.txt */
#endif /*GL_NV_shader_atomic_int64*/

#ifndef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 1
/* http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt */
#define GL_BUFFER_GPU_ADDRESS_NV                 0x8F1D
#define GL_GPU_ADDRESS_NV                        0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV          0x8F35
typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT* params);
typedef void (GLAPIENTRY * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT* result);
typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT* params);
typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
typedef GLboolean (GLAPIENTRY * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
typedef void (GLAPIENTRY * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
typedef void (GLAPIENTRY * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
typedef void (GLAPIENTRY * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (GLAPIENTRY * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
typedef void (GLAPIENTRY * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
extern PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
extern PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
extern PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
extern PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
extern PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
extern PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
extern PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
extern PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
extern PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
extern PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
extern PFNGLUNIFORMUI64NVPROC glUniformui64NV;
extern PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_shader_buffer_load*/

#ifndef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 1
/* http://www.opengl.org/registry/specs/NV/shader_storage_buffer_object.txt */
#endif /*GL_NV_shader_storage_buffer_object*/

#ifndef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 1
/* http://www.opengl.org/registry/specs/NV/shader_thread_group.txt */
#define GL_WARP_SIZE_NV                          0x9339
#define GL_WARPS_PER_SM_NV                       0x933A
#define GL_SM_COUNT_NV                           0x933B
#endif /*GL_NV_shader_thread_group*/

#ifndef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 1
/* http://www.opengl.org/registry/specs/NV/shader_thread_shuffle.txt */
#endif /*GL_NV_shader_thread_shuffle*/

#ifndef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 1
/* http://www.opengl.org/registry/specs/NV/stereo_view_rendering.txt */
#endif /*GL_NV_stereo_view_rendering*/

#ifndef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 1
/* http://www.opengl.org/registry/specs/NV/tessellation_program5.txt */
/* GL_NV_gpu_program5 */
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV          0x86D8
#define GL_TESS_CONTROL_PROGRAM_NV               0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV            0x891F
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#endif /*GL_NV_tessellation_program5*/

#ifndef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 1
/* http://www.opengl.org/registry/specs/NV/texgen_emboss.txt */
#define GL_EMBOSS_LIGHT_NV                       0x855D
#define GL_EMBOSS_CONSTANT_NV                    0x855E
#define GL_EMBOSS_MAP_NV                         0x855F
#endif /*GL_NV_texgen_emboss*/

#ifndef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 1
/* http://www.opengl.org/registry/specs/NV/texgen_reflection.txt */
#define GL_NORMAL_MAP_NV                         0x8511
#define GL_REFLECTION_MAP_NV                     0x8512
#endif /*GL_NV_texgen_reflection*/

#ifndef GL_NV_texture_barrier
#define GL_NV_texture_barrier 1
/* http://www.opengl.org/registry/specs/NV/texture_barrier.txt */
typedef void (GLAPIENTRY * PFNGLTEXTUREBARRIERNVPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_texture_barrier*/

#ifndef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 1
/* http://www.opengl.org/registry/specs/NV/texture_compression_vtc.txt */
#endif /*GL_NV_texture_compression_vtc*/

#ifndef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 1
/* http://www.opengl.org/registry/specs/NV/texture_env_combine4.txt */
#define GL_COMBINE4_NV                           0x8503
#define GL_SOURCE3_RGB_NV                        0x8583
#define GL_SOURCE3_ALPHA_NV                      0x858B
#define GL_OPERAND3_RGB_NV                       0x8593
#define GL_OPERAND3_ALPHA_NV                     0x859B
#endif /*GL_NV_texture_env_combine4*/

#ifndef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 1
/* http://www.opengl.org/registry/specs/NV/texture_expand_normal.txt */
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV        0x888F
#endif /*GL_NV_texture_expand_normal*/

#ifndef GL_NV_texture_multisample
#define GL_NV_texture_multisample 1
/* http://www.opengl.org/registry/specs/NV/texture_multisample.txt */
#define GL_TEXTURE_COVERAGE_SAMPLES_NV           0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV              0x9046
typedef void (GLAPIENTRY * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
extern PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_texture_multisample*/

#ifndef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 1
/* http://www.opengl.org/registry/specs/NV/texture_rectangle.txt */
#define GL_TEXTURE_RECTANGLE_NV                  0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_NV          0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_NV            0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV         0x84F8
#endif /*GL_NV_texture_rectangle*/

#ifndef GL_NV_texture_shader
#define GL_NV_texture_shader 1
/* http://www.opengl.org/registry/specs/NV/texture_shader.txt */
#define GL_OFFSET_TEXTURE_RECTANGLE_NV           0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV     0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV      0x864E
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV  0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV             0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV         0x86DB
#define GL_DSDT_MAG_INTENSITY_NV                 0x86DC
#define GL_SHADER_CONSISTENT_NV                  0x86DD
#define GL_TEXTURE_SHADER_NV                     0x86DE
#define GL_SHADER_OPERATION_NV                   0x86DF
#define GL_CULL_MODES_NV                         0x86E0
#define GL_OFFSET_TEXTURE_MATRIX_NV              0x86E1
#define GL_OFFSET_TEXTURE_SCALE_NV               0x86E2
#define GL_OFFSET_TEXTURE_BIAS_NV                0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV             0x86E4
#define GL_CONST_EYE_NV                          0x86E5
#define GL_PASS_THROUGH_NV                       0x86E6
#define GL_CULL_FRAGMENT_NV                      0x86E7
#define GL_OFFSET_TEXTURE_2D_NV                  0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV            0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV            0x86EA
#define GL_DOT_PRODUCT_NV                        0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV          0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV             0x86EE
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV       0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV       0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV       0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV                               0x86F4
#define GL_DSDT_NV                               0x86F5
#define GL_DSDT_MAG_NV                           0x86F6
#define GL_DSDT_MAG_VIB_NV                       0x86F7
#define GL_HILO16_NV                             0x86F8
#define GL_SIGNED_HILO_NV                        0x86F9
#define GL_SIGNED_HILO16_NV                      0x86FA
#define GL_SIGNED_RGBA_NV                        0x86FB
#define GL_SIGNED_RGBA8_NV                       0x86FC
#define GL_SIGNED_RGB_NV                         0x86FE
#define GL_SIGNED_RGB8_NV                        0x86FF
#define GL_SIGNED_LUMINANCE_NV                   0x8701
#define GL_SIGNED_LUMINANCE8_NV                  0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV             0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV           0x8704
#define GL_SIGNED_ALPHA_NV                       0x8705
#define GL_SIGNED_ALPHA8_NV                      0x8706
#define GL_SIGNED_INTENSITY_NV                   0x8707
#define GL_SIGNED_INTENSITY8_NV                  0x8708
#define GL_DSDT8_NV                              0x8709
#define GL_DSDT8_MAG8_NV                         0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV              0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV          0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV        0x870D
#define GL_HI_SCALE_NV                           0x870E
#define GL_LO_SCALE_NV                           0x870F
#define GL_DS_SCALE_NV                           0x8710
#define GL_DT_SCALE_NV                           0x8711
#define GL_MAGNITUDE_SCALE_NV                    0x8712
#define GL_VIBRANCE_SCALE_NV                     0x8713
#define GL_HI_BIAS_NV                            0x8714
#define GL_LO_BIAS_NV                            0x8715
#define GL_DS_BIAS_NV                            0x8716
#define GL_DT_BIAS_NV                            0x8717
#define GL_MAGNITUDE_BIAS_NV                     0x8718
#define GL_VIBRANCE_BIAS_NV                      0x8719
#define GL_TEXTURE_BORDER_VALUES_NV              0x871A
#define GL_TEXTURE_HI_SIZE_NV                    0x871B
#define GL_TEXTURE_LO_SIZE_NV                    0x871C
#define GL_TEXTURE_DS_SIZE_NV                    0x871D
#define GL_TEXTURE_DT_SIZE_NV                    0x871E
#define GL_TEXTURE_MAG_SIZE_NV                   0x871F
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV           0x86E1
#define GL_OFFSET_TEXTURE_2D_BIAS_NV             0x86E3
#define GL_OFFSET_TEXTURE_2D_SCALE_NV            0x86E2
#endif /*GL_NV_texture_shader*/

#ifndef GL_NV_texture_shader2
#define GL_NV_texture_shader2 1
/* http://www.opengl.org/registry/specs/NV/texture_shader2.txt */
#define GL_UNSIGNED_INT_S8_S8_8_8_NV             0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV         0x86DB
#define GL_DSDT_MAG_INTENSITY_NV                 0x86DC
#define GL_DOT_PRODUCT_TEXTURE_3D_NV             0x86EF
#define GL_HILO_NV                               0x86F4
#define GL_DSDT_NV                               0x86F5
#define GL_DSDT_MAG_NV                           0x86F6
#define GL_DSDT_MAG_VIB_NV                       0x86F7
#define GL_HILO16_NV                             0x86F8
#define GL_SIGNED_HILO_NV                        0x86F9
#define GL_SIGNED_HILO16_NV                      0x86FA
#define GL_SIGNED_RGBA_NV                        0x86FB
#define GL_SIGNED_RGBA8_NV                       0x86FC
#define GL_SIGNED_RGB_NV                         0x86FE
#define GL_SIGNED_RGB8_NV                        0x86FF
#define GL_SIGNED_LUMINANCE_NV                   0x8701
#define GL_SIGNED_LUMINANCE8_NV                  0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV             0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV           0x8704
#define GL_SIGNED_ALPHA_NV                       0x8705
#define GL_SIGNED_ALPHA8_NV                      0x8706
#define GL_SIGNED_INTENSITY_NV                   0x8707
#define GL_SIGNED_INTENSITY8_NV                  0x8708
#define GL_DSDT8_NV                              0x8709
#define GL_DSDT8_MAG8_NV                         0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV              0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV          0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV        0x870D
#endif /*GL_NV_texture_shader2*/

#ifndef GL_NV_texture_shader3
#define GL_NV_texture_shader3 1
/* http://www.opengl.org/registry/specs/NV/texture_shader3.txt */
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV       0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV             0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV      0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV  0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV          0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV           0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV     0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV           0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV             0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV   0x885D
#define GL_HILO8_NV                              0x885E
#define GL_SIGNED_HILO8_NV                       0x885F
#define GL_FORCE_BLUE_TO_ONE_NV                  0x8860
#endif /*GL_NV_texture_shader3*/

#ifndef GL_NV_transform_feedback
#define GL_NV_transform_feedback 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_transform_feedback.txt */
#define GL_BACK_PRIMARY_COLOR_NV                 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV               0x8C78
#define GL_TEXTURE_COORD_NV                      0x8C79
#define GL_CLIP_DISTANCE_NV                      0x8C7A
#define GL_VERTEX_ID_NV                          0x8C7B
#define GL_PRIMITIVE_ID_NV                       0x8C7C
#define GL_GENERIC_ATTRIB_NV                     0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV         0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV     0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV                    0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV          0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV        0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV    0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV     0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV          0x8C86
#define GL_PRIMITIVES_GENERATED_NV               0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD_NV                 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS_NV                0x8C8C
#define GL_SEPARATE_ATTRIBS_NV                   0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV          0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV  0x8C8F
typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
typedef void (GLAPIENTRY * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
typedef GLint (GLAPIENTRY * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
typedef void (GLAPIENTRY * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
extern PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
extern PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
extern PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
extern PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
extern PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
extern PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
extern PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
extern PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
extern PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_transform_feedback*/

#ifndef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 1
/* http://www.opengl.org/registry/specs/NV/transform_feedback2.txt */
#define GL_TRANSFORM_FEEDBACK_NV                 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV   0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV   0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING_NV         0x8E25
typedef void (GLAPIENTRY * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
typedef void (GLAPIENTRY * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint* ids);
typedef GLboolean (GLAPIENTRY * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
typedef void (GLAPIENTRY * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
extern PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
extern PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
extern PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
extern PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
extern PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
extern PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_transform_feedback2*/

#ifndef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 1
/* http://www.opengl.org/registry/specs/NV/uniform_buffer_unified_memory.txt */
#define GL_UNIFORM_BUFFER_UNIFIED_NV             0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV             0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV              0x9370
#endif /*GL_NV_uniform_buffer_unified_memory*/

#ifndef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 1
/* http://www.opengl.org/registry/specs/NV/vdpau_interop.txt */
#define GL_SURFACE_STATE_NV                      0x86EB
#define GL_SURFACE_REGISTERED_NV                 0x86FD
#define GL_SURFACE_MAPPED_NV                     0x8700
#define GL_WRITE_DISCARD_NV                      0x88BE
typedef GLintptr GLvdpauSurfaceNV;
typedef void (GLAPIENTRY * PFNGLVDPAUFININVPROC) (void);
typedef void (GLAPIENTRY * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values);
typedef void (GLAPIENTRY * PFNGLVDPAUINITNVPROC) (const void* vdpDevice, const void*getProcAddress);
typedef void (GLAPIENTRY * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void (GLAPIENTRY * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces);
typedef GLvdpauSurfaceNV (GLAPIENTRY * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLvdpauSurfaceNV (GLAPIENTRY * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef void (GLAPIENTRY * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
typedef void (GLAPIENTRY * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV* surfaces);
typedef void (GLAPIENTRY * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVDPAUFININVPROC glVDPAUFiniNV;
extern PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
extern PFNGLVDPAUINITNVPROC glVDPAUInitNV;
extern PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
extern PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
extern PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
extern PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
extern PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
extern PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
extern PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_vdpau_interop*/

#ifndef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 1
/* http://www.opengl.org/registry/specs/NV/vertex_array_range.txt */
#define GL_VERTEX_ARRAY_RANGE_NV                 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV          0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV           0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV     0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV         0x8521
typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
extern PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_vertex_array_range*/

#ifndef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 1
/* http://www.opengl.org/registry/specs/NV/vertex_array_range2.txt */
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV   0x8533
#endif /*GL_NV_vertex_array_range2*/

#ifndef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 1
/* http://www.opengl.org/registry/specs/NV/vertex_attrib_integer_64bit.txt */
#define GL_INT64_NV                              0x140E
#define GL_UNSIGNED_INT64_NV                     0x140F
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT* params);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
extern PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
extern PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
extern PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
extern PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
extern PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
extern PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
extern PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
extern PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
extern PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
extern PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
extern PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
extern PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
extern PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
extern PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
extern PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
extern PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
extern PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
extern PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_vertex_attrib_integer_64bit*/

#ifndef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 1
/* http://www.opengl.org/registry/specs/NV/vertex_buffer_unified_memory.txt */
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV        0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV              0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV        0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV               0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV               0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV                0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV                0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV        0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV            0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV      0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV            0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV              0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV         0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV                0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV                0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV                 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV                 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV         0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV             0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV       0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV             0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV               0x8F33
#define GL_DRAW_INDIRECT_UNIFIED_NV              0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV              0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV                0x8F42
typedef void (GLAPIENTRY * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (GLAPIENTRY * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
typedef void (GLAPIENTRY * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT result[]);
typedef void (GLAPIENTRY * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (GLAPIENTRY * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
extern PFNGLCOLORFORMATNVPROC glColorFormatNV;
extern PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
extern PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
extern PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
extern PFNGLINDEXFORMATNVPROC glIndexFormatNV;
extern PFNGLNORMALFORMATNVPROC glNormalFormatNV;
extern PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
extern PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
extern PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
extern PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
extern PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_vertex_buffer_unified_memory*/

#ifndef GL_NV_vertex_program
#define GL_NV_vertex_program 1
/* http://www.opengl.org/registry/specs/NV/vertex_program.txt */
#define GL_VERTEX_PROGRAM_NV                     0x8620
#define GL_VERTEX_STATE_PROGRAM_NV               0x8621
#define GL_ATTRIB_ARRAY_SIZE_NV                  0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV                0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV                  0x8625
#define GL_CURRENT_ATTRIB_NV                     0x8626
#define GL_PROGRAM_LENGTH_NV                     0x8627
#define GL_PROGRAM_STRING_NV                     0x8628
#define GL_MODELVIEW_PROJECTION_NV               0x8629
#define GL_IDENTITY_NV                           0x862A
#define GL_INVERSE_NV                            0x862B
#define GL_TRANSPOSE_NV                          0x862C
#define GL_INVERSE_TRANSPOSE_NV                  0x862D
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV       0x862E
#define GL_MAX_TRACK_MATRICES_NV                 0x862F
#define GL_MATRIX0_NV                            0x8630
#define GL_MATRIX1_NV                            0x8631
#define GL_MATRIX2_NV                            0x8632
#define GL_MATRIX3_NV                            0x8633
#define GL_MATRIX4_NV                            0x8634
#define GL_MATRIX5_NV                            0x8635
#define GL_MATRIX6_NV                            0x8636
#define GL_MATRIX7_NV                            0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV         0x8640
#define GL_CURRENT_MATRIX_NV                     0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV          0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV            0x8643
#define GL_PROGRAM_PARAMETER_NV                  0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV               0x8645
#define GL_PROGRAM_TARGET_NV                     0x8646
#define GL_PROGRAM_RESIDENT_NV                   0x8647
#define GL_TRACK_MATRIX_NV                       0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV             0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV             0x864A
#define GL_PROGRAM_ERROR_POSITION_NV             0x864B
#define GL_VERTEX_ATTRIB_ARRAY0_NV               0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV               0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV               0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV               0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV               0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV               0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV               0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV               0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV               0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV               0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV              0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV              0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV              0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV              0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV              0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV              0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV              0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV              0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV              0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV              0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV              0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV              0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV              0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV              0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV              0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV              0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV             0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV             0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV             0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV             0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV             0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV             0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV              0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV              0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV              0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV              0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV              0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV              0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV              0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV              0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV              0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV              0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV             0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV             0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV             0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV             0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV             0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV             0x867F
typedef GLboolean (GLAPIENTRY * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint* ids, GLboolean *residences);
typedef void (GLAPIENTRY * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint* ids);
typedef void (GLAPIENTRY * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte* program);
typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void** pointer);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint* params);
typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMNVPROC) (GLuint id);
typedef void (GLAPIENTRY * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte* program);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLdouble* params);
typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
typedef void (GLAPIENTRY * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei n, const GLubyte* v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
extern PFNGLBINDPROGRAMNVPROC glBindProgramNV;
extern PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
extern PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
extern PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
extern PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
extern PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
extern PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
extern PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
extern PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
extern PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
extern PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
extern PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
extern PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
extern PFNGLISPROGRAMNVPROC glIsProgramNV;
extern PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
extern PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
extern PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
extern PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
extern PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
extern PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
extern PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
extern PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
extern PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
extern PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
extern PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
extern PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
extern PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
extern PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
extern PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
extern PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
extern PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
extern PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
extern PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
extern PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
extern PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
extern PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
extern PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
extern PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
extern PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
extern PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
extern PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
extern PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
extern PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
extern PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
extern PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
extern PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
extern PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
extern PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
extern PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
extern PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
extern PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
extern PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
extern PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
extern PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
extern PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
extern PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
extern PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
extern PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
extern PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
extern PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
extern PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
extern PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
extern PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_vertex_program*/

#ifndef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 1
/* http://www.opengl.org/registry/specs/NV/vertex_program1_1.txt */
#endif /*GL_NV_vertex_program1_1*/

#ifndef GL_NV_vertex_program2
#define GL_NV_vertex_program2 1
/* http://www.opengl.org/registry/specs/NV/vertex_program2.txt */
#endif /*GL_NV_vertex_program2*/

#ifndef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_NV_vertex_program2_option.txt */
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV      0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV             0x88F5
#endif /*GL_NV_vertex_program2_option*/

#ifndef GL_NV_vertex_program3
#define GL_NV_vertex_program3 1
/* http://www.nvidia.com/dev_content/nvopenglspecs/GL_NV_vertex_program3.txt */
#define MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB       0x8B4C
#endif /*GL_NV_vertex_program3*/

#ifndef GL_NV_vertex_program4
#define GL_NV_vertex_program4 1
/* http://developer.download.nvidia.com/opengl/specs/GL_NV_vertex_program4.txt */
/* GL_NV_gpu_program4 */
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV        0x88FD
#endif /*GL_NV_vertex_program4*/

#ifndef GL_NV_video_capture
#define GL_NV_video_capture 1
/* http://www.opengl.org/registry/specs/NV/video_capture.txt */
#define GL_VIDEO_BUFFER_NV                       0x9020
#define GL_VIDEO_BUFFER_BINDING_NV               0x9021
#define GL_FIELD_UPPER_NV                        0x9022
#define GL_FIELD_LOWER_NV                        0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV          0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV   0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV     0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV          0x9027
#define GL_VIDEO_BUFFER_PITCH_NV                 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV      0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV         0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV         0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV      0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV       0x902D
#define GL_PARTIAL_SUCCESS_NV                    0x902E
#define GL_SUCCESS_NV                            0x902F
#define GL_FAILURE_NV                            0x9030
#define GL_YCBYCR8_422_NV                        0x9031
#define GL_YCBAYCR8A_4224_NV                     0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV         0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV         0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV              0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV          0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV         0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV   0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV   0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV       0x903C
/* void glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params) */
/* void glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params) */
/* void glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params) */
/* void glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params) */
/* void glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params) */
/* void glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params) */
typedef void (GLAPIENTRY * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (GLAPIENTRY * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void (GLAPIENTRY * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void (GLAPIENTRY * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (GLAPIENTRY * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint* params);
typedef GLenum (GLAPIENTRY * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
extern PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
extern PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
extern PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
extern PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
extern PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_video_capture*/

#ifndef GL_NV_viewport_array2
#define GL_NV_viewport_array2 1
/* http://www.opengl.org/registry/specs/NV/viewport_array2.txt */
#endif /*GL_NV_viewport_array2*/

#ifndef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 1
/* http://www.opengl.org/registry/specs/NV/viewport_swizzle.txt */
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV        0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV        0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV        0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV        0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV        0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV        0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV        0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV        0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV                 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV                 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV                 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV                 0x935B
typedef void (GLAPIENTRY * PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLVIEWPORTSWIZZLENVPROC glViewportSwizzleNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_NV_viewport_swizzle*/

#ifndef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 1
/* http://www.opengl.org/registry/specs/OES/OES_byte_coordinates.txt */
#endif /*GL_OES_byte_coordinates*/

#ifndef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 1
/* http://www.opengl.org/registry/specs/OES/OES_compressed_paletted_texture.txt */
#define GL_PALETTE4_RGB8_OES                     0x8B90
#define GL_PALETTE4_RGBA8_OES                    0x8B91
#define GL_PALETTE4_R5_G6_B5_OES                 0x8B92
#define GL_PALETTE4_RGBA4_OES                    0x8B93
#define GL_PALETTE4_RGB5_A1_OES                  0x8B94
#define GL_PALETTE8_RGB8_OES                     0x8B95
#define GL_PALETTE8_RGBA8_OES                    0x8B96
#define GL_PALETTE8_R5_G6_B5_OES                 0x8B97
#define GL_PALETTE8_RGBA4_OES                    0x8B98
#define GL_PALETTE8_RGB5_A1_OES                  0x8B99
#endif /*GL_OES_compressed_paletted_texture*/

#ifndef GL_OES_read_format
#define GL_OES_read_format 1
/* http://www.opengl.org/registry/specs/OES/OES_read_format.txt */
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES    0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES  0x8B9B
#endif /*GL_OES_read_format*/

#ifndef GL_OES_single_precision
#define GL_OES_single_precision 1
/* http://www.opengl.org/registry/specs/OES/OES_single_precision.txt */
typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);
typedef void (GLAPIENTRY * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat* equation);
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
typedef void (GLAPIENTRY * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat* equation);
typedef void (GLAPIENTRY * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
extern PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
extern PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
extern PFNGLFRUSTUMFOESPROC glFrustumfOES;
extern PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
extern PFNGLORTHOFOESPROC glOrthofOES;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_OES_single_precision*/

#ifndef GL_OML_interlace
#define GL_OML_interlace 1
/* http://www.opengl.org/registry/specs/OML/interlace.txt */
#define GL_INTERLACE_OML                         0x8980
#define GL_INTERLACE_READ_OML                    0x8981
#endif /*GL_OML_interlace*/

#ifndef GL_OML_resample
#define GL_OML_resample 1
/* http://www.opengl.org/registry/specs/OML/resample.txt */
#define GL_PACK_RESAMPLE_OML                     0x8984
#define GL_UNPACK_RESAMPLE_OML                   0x8985
#define GL_RESAMPLE_REPLICATE_OML                0x8986
#define GL_RESAMPLE_ZERO_FILL_OML                0x8987
#define GL_RESAMPLE_AVERAGE_OML                  0x8988
#define GL_RESAMPLE_DECIMATE_OML                 0x8989
#endif /*GL_OML_resample*/

#ifndef GL_OML_subsample
#define GL_OML_subsample 1
/* http://www.opengl.org/registry/specs/OML/subsample.txt */
#define GL_FORMAT_SUBSAMPLE_24_24_OML            0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML          0x8983
#endif /*GL_OML_subsample*/

#ifndef GL_OVR_multiview
#define GL_OVR_multiview 1
/* http://www.opengl.org/registry/specs/OVR/multiview.txt */
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR                         0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glFramebufferTextureMultiviewOVR;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_OVR_multiview*/

#ifndef GL_OVR_multiview2
#define GL_OVR_multiview2 1
/* http://www.opengl.org/registry/specs/OVR/multiview2.txt */
#endif /*GL_OVR_multiview2*/

#ifndef GL_PGI_misc_hints
#define GL_PGI_misc_hints 1
/* http://www.opengl.org/registry/specs/PGI/misc_hints.txt */
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI          107000
#define GL_CONSERVE_MEMORY_HINT_PGI              107005
#define GL_RECLAIM_MEMORY_HINT_PGI               107006
#define GL_NATIVE_GRAPHICS_HANDLE_PGI            107010
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI        107011
#define GL_NATIVE_GRAPHICS_END_HINT_PGI          107012
#define GL_ALWAYS_FAST_HINT_PGI                  107020
#define GL_ALWAYS_SOFT_HINT_PGI                  107021
#define GL_ALLOW_DRAW_OBJ_HINT_PGI               107022
#define GL_ALLOW_DRAW_WIN_HINT_PGI               107023
#define GL_ALLOW_DRAW_FRG_HINT_PGI               107024
#define GL_ALLOW_DRAW_MEM_HINT_PGI               107025
#define GL_STRICT_DEPTHFUNC_HINT_PGI             107030
#define GL_STRICT_LIGHTING_HINT_PGI              107031
#define GL_STRICT_SCISSOR_HINT_PGI               107032
#define GL_FULL_STIPPLE_HINT_PGI                 107033
#define GL_CLIP_NEAR_HINT_PGI                    107040
#define GL_CLIP_FAR_HINT_PGI                     107041
#define GL_WIDE_LINE_HINT_PGI                    107042
#define GL_BACK_NORMALS_HINT_PGI                 107043
#endif /*GL_PGI_misc_hints*/

#ifndef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 1
/* http://www.opengl.org/registry/specs/PGI/vertex_hints.txt */
#define GL_VERTEX23_BIT_PGI                      0x00000004
#define GL_VERTEX4_BIT_PGI                       0x00000008
#define GL_COLOR3_BIT_PGI                        0x00010000
#define GL_COLOR4_BIT_PGI                        0x00020000
#define GL_EDGEFLAG_BIT_PGI                      0x00040000
#define GL_INDEX_BIT_PGI                         0x00080000
#define GL_MAT_AMBIENT_BIT_PGI                   0x00100000
#define GL_VERTEX_DATA_HINT_PGI                  107050
#define GL_VERTEX_CONSISTENT_HINT_PGI            107051
#define GL_MATERIAL_SIDE_HINT_PGI                107052
#define GL_MAX_VERTEX_HINT_PGI                   107053
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI       0x00200000
#define GL_MAT_DIFFUSE_BIT_PGI                   0x00400000
#define GL_MAT_EMISSION_BIT_PGI                  0x00800000
#define GL_MAT_COLOR_INDEXES_BIT_PGI             0x01000000
#define GL_MAT_SHININESS_BIT_PGI                 0x02000000
#define GL_MAT_SPECULAR_BIT_PGI                  0x04000000
#define GL_NORMAL_BIT_PGI                        0x08000000
#define GL_TEXCOORD1_BIT_PGI                     0x10000000
#define GL_TEXCOORD2_BIT_PGI                     0x20000000
#define GL_TEXCOORD3_BIT_PGI                     0x40000000
#define GL_TEXCOORD4_BIT_PGI                     0x80000000
#endif /*GL_PGI_vertex_hints*/

#ifndef GL_REGAL_enable
#define GL_REGAL_enable 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
#define GL_ERROR_REGAL                           0x9322
#define GL_DEBUG_REGAL                           0x9323
#define GL_LOG_REGAL                             0x9324
#define GL_EMULATION_REGAL                       0x9325
#define GL_DRIVER_REGAL                          0x9326
#define GL_MISSING_REGAL                         0x9360
#define GL_TRACE_REGAL                           0x9361
#define GL_CACHE_REGAL                           0x9362
#define GL_CODE_REGAL                            0x9363
#define GL_STATISTICS_REGAL                      0x9364
#endif /*GL_REGAL_enable*/

#ifndef GL_REGAL_error_string
#define GL_REGAL_error_string 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
typedef const GLchar* (GLAPIENTRY * PFNGLERRORSTRINGREGALPROC) (GLenum error);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLERRORSTRINGREGALPROC glErrorStringREGAL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_error_string*/

#ifndef GL_REGAL_ES1_0_compatibility
#define GL_REGAL_ES1_0_compatibility 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
typedef int GLclampx;
typedef void (GLAPIENTRY * PFNGLALPHAFUNCXPROC) (GLenum func, GLclampx ref);
typedef void (GLAPIENTRY * PFNGLCLEARCOLORXPROC) (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
typedef void (GLAPIENTRY * PFNGLCLEARDEPTHXPROC) (GLclampx depth);
typedef void (GLAPIENTRY * PFNGLCOLOR4XPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAPIENTRY * PFNGLDEPTHRANGEXPROC) (GLclampx zNear, GLclampx zFar);
typedef void (GLAPIENTRY * PFNGLFOGXPROC) (GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLFOGXVPROC) (GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLFRUSTUMFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void (GLAPIENTRY * PFNGLFRUSTUMXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void (GLAPIENTRY * PFNGLLIGHTMODELXPROC) (GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLLIGHTMODELXVPROC) (GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLLIGHTXPROC) (GLenum light, GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLLIGHTXVPROC) (GLenum light, GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLLINEWIDTHXPROC) (GLfixed width);
typedef void (GLAPIENTRY * PFNGLLOADMATRIXXPROC) (const GLfixed* m);
typedef void (GLAPIENTRY * PFNGLMATERIALXPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLMATERIALXVPROC) (GLenum face, GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLMULTMATRIXXPROC) (const GLfixed* m);
typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4XPROC) (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (GLAPIENTRY * PFNGLNORMAL3XPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (GLAPIENTRY * PFNGLORTHOFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void (GLAPIENTRY * PFNGLORTHOXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void (GLAPIENTRY * PFNGLPOINTSIZEXPROC) (GLfixed size);
typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETXPROC) (GLfixed factor, GLfixed units);
typedef void (GLAPIENTRY * PFNGLROTATEXPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEXPROC) (GLclampx value, GLboolean invert);
typedef void (GLAPIENTRY * PFNGLSCALEXPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAPIENTRY * PFNGLTEXENVXPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLTEXENVXVPROC) (GLenum target, GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERXPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLTRANSLATEXPROC) (GLfixed x, GLfixed y, GLfixed z);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLALPHAFUNCXPROC glAlphaFuncx;
extern PFNGLCLEARCOLORXPROC glClearColorx;
extern PFNGLCLEARDEPTHXPROC glClearDepthx;
extern PFNGLCOLOR4XPROC glColor4x;
extern PFNGLDEPTHRANGEXPROC glDepthRangex;
extern PFNGLFOGXPROC glFogx;
extern PFNGLFOGXVPROC glFogxv;
extern PFNGLFRUSTUMFPROC glFrustumf;
extern PFNGLFRUSTUMXPROC glFrustumx;
extern PFNGLLIGHTMODELXPROC glLightModelx;
extern PFNGLLIGHTMODELXVPROC glLightModelxv;
extern PFNGLLIGHTXPROC glLightx;
extern PFNGLLIGHTXVPROC glLightxv;
extern PFNGLLINEWIDTHXPROC glLineWidthx;
extern PFNGLLOADMATRIXXPROC glLoadMatrixx;
extern PFNGLMATERIALXPROC glMaterialx;
extern PFNGLMATERIALXVPROC glMaterialxv;
extern PFNGLMULTMATRIXXPROC glMultMatrixx;
extern PFNGLMULTITEXCOORD4XPROC glMultiTexCoord4x;
extern PFNGLNORMAL3XPROC glNormal3x;
extern PFNGLORTHOFPROC glOrthof;
extern PFNGLORTHOXPROC glOrthox;
extern PFNGLPOINTSIZEXPROC glPointSizex;
extern PFNGLPOLYGONOFFSETXPROC glPolygonOffsetx;
extern PFNGLROTATEXPROC glRotatex;
extern PFNGLSAMPLECOVERAGEXPROC glSampleCoveragex;
extern PFNGLSCALEXPROC glScalex;
extern PFNGLTEXENVXPROC glTexEnvx;
extern PFNGLTEXENVXVPROC glTexEnvxv;
extern PFNGLTEXPARAMETERXPROC glTexParameterx;
extern PFNGLTRANSLATEXPROC glTranslatex;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_ES1_0_compatibility*/

#ifndef GL_REGAL_ES1_1_compatibility
#define GL_REGAL_ES1_1_compatibility 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
typedef void (GLAPIENTRY * PFNGLCLIPPLANEFPROC) (GLenum plane, const GLfloat* equation);
typedef void (GLAPIENTRY * PFNGLCLIPPLANEXPROC) (GLenum plane, const GLfixed* equation);
typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEFPROC) (GLenum pname, GLfloat eqn[4]);
typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEXPROC) (GLenum pname, GLfixed eqn[4]);
typedef void (GLAPIENTRY * PFNGLGETFIXEDVPROC) (GLenum pname, GLfixed* params);
typedef void (GLAPIENTRY * PFNGLGETLIGHTXVPROC) (GLenum light, GLenum pname, GLfixed* params);
typedef void (GLAPIENTRY * PFNGLGETMATERIALXVPROC) (GLenum face, GLenum pname, GLfixed* params);
typedef void (GLAPIENTRY * PFNGLGETTEXENVXVPROC) (GLenum env, GLenum pname, GLfixed* params);
typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERXVPROC) (GLenum target, GLenum pname, GLfixed* params);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERXPROC) (GLenum pname, GLfixed param);
typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERXVPROC) (GLenum pname, const GLfixed* params);
typedef void (GLAPIENTRY * PFNGLPOINTSIZEPOINTEROESPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLTEXPARAMETERXVPROC) (GLenum target, GLenum pname, const GLfixed* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCLIPPLANEFPROC glClipPlanef;
extern PFNGLCLIPPLANEXPROC glClipPlanex;
extern PFNGLGETCLIPPLANEFPROC glGetClipPlanef;
extern PFNGLGETCLIPPLANEXPROC glGetClipPlanex;
extern PFNGLGETFIXEDVPROC glGetFixedv;
extern PFNGLGETLIGHTXVPROC glGetLightxv;
extern PFNGLGETMATERIALXVPROC glGetMaterialxv;
extern PFNGLGETTEXENVXVPROC glGetTexEnvxv;
extern PFNGLGETTEXPARAMETERXVPROC glGetTexParameterxv;
extern PFNGLPOINTPARAMETERXPROC glPointParameterx;
extern PFNGLPOINTPARAMETERXVPROC glPointParameterxv;
extern PFNGLPOINTSIZEPOINTEROESPROC glPointSizePointerOES;
extern PFNGLTEXPARAMETERXVPROC glTexParameterxv;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_ES1_1_compatibility*/

#ifndef GL_REGAL_extension_query
#define GL_REGAL_extension_query 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
typedef GLboolean (GLAPIENTRY * PFNGLGETEXTENSIONREGALPROC) (const GLchar* ext);
typedef GLboolean (GLAPIENTRY * PFNGLISSUPPORTEDREGALPROC) (const GLchar* ext);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETEXTENSIONREGALPROC glGetExtensionREGAL;
extern PFNGLISSUPPORTEDREGALPROC glIsSupportedREGAL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_extension_query*/

#ifndef GL_REGAL_log
#define GL_REGAL_log 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
#define GL_LOG_ERROR_REGAL                       0x9319
#define GL_LOG_WARNING_REGAL                     0x931A
#define GL_LOG_INFO_REGAL                        0x931B
#define GL_LOG_APP_REGAL                         0x931C
#define GL_LOG_DRIVER_REGAL                      0x931D
#define GL_LOG_INTERNAL_REGAL                    0x931E
#define GL_LOG_DEBUG_REGAL                       0x931F
#define GL_LOG_STATUS_REGAL                      0x9320
#define GL_LOG_HTTP_REGAL                        0x9321
typedef void (APIENTRY *GLLOGPROCREGAL)(GLenum stream, GLsizei length, const GLchar *message, void *context);
typedef void (GLAPIENTRY * PFNGLLOGMESSAGECALLBACKREGALPROC) (GLLOGPROCREGAL callback);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLLOGMESSAGECALLBACKREGALPROC glLogMessageCallbackREGAL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_log*/

#ifndef GL_REGAL_proc_address
#define GL_REGAL_proc_address 1
/* https://github.com/p3/regal/tree/master/doc/extensions */
typedef void * (GLAPIENTRY * PFNGLGETPROCADDRESSREGALPROC) (const GLchar *name);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETPROCADDRESSREGALPROC glGetProcAddressREGAL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_REGAL_proc_address*/

#ifndef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 1
/* http://www.opengl.org/registry/specs/REND/screen_coordinates.txt */
#define GL_SCREEN_COORDINATES_REND               0x8490
#define GL_INVERTED_SCREEN_W_REND                0x8491
#endif /*GL_REND_screen_coordinates*/

#ifndef GL_S3_s3tc
#define GL_S3_s3tc 1
/* http://www.opengl.org/registry/specs/S3/s3tc.txt */
#define GL_RGB_S3TC                              0x83A0
#define GL_RGB4_S3TC                             0x83A1
#define GL_RGBA_S3TC                             0x83A2
#define GL_RGBA4_S3TC                            0x83A3
#define GL_RGBA_DXT5_S3TC                        0x83A4
#define GL_RGBA4_DXT5_S3TC                       0x83A5
#endif /*GL_S3_s3tc*/

#ifndef GL_SGIS_color_range
#define GL_SGIS_color_range 1
/* http://www.opengl.org/registry/specs/SGIS/color_range.txt */
#define GL_EXTENDED_RANGE_SGIS                   0x85A5
#define GL_MIN_RED_SGIS                          0x85A6
#define GL_MAX_RED_SGIS                          0x85A7
#define GL_MIN_GREEN_SGIS                        0x85A8
#define GL_MAX_GREEN_SGIS                        0x85A9
#define GL_MIN_BLUE_SGIS                         0x85AA
#define GL_MAX_BLUE_SGIS                         0x85AB
#define GL_MIN_ALPHA_SGIS                        0x85AC
#define GL_MAX_ALPHA_SGIS                        0x85AD
#endif /*GL_SGIS_color_range*/

#ifndef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 1
/* http://www.opengl.org/registry/specs/SGIS/detail_texture.txt */
typedef void (GLAPIENTRY * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
typedef void (GLAPIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
extern PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_detail_texture*/

#ifndef GL_SGIS_fog_function
#define GL_SGIS_fog_function 1
/* http://www.opengl.org/registry/specs/SGIS/fog_func.txt */
typedef void (GLAPIENTRY * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat* points);
typedef void (GLAPIENTRY * PFNGLGETFOGFUNCSGISPROC) (GLfloat* points);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
extern PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_fog_function*/

#ifndef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 1
/* http://www.opengl.org/registry/specs/SGIS/generate_mipmap.txt */
#define GL_GENERATE_MIPMAP_SGIS                  0x8191
#define GL_GENERATE_MIPMAP_HINT_SGIS             0x8192
#endif /*GL_SGIS_generate_mipmap*/

#ifndef GL_SGIS_multisample
#define GL_SGIS_multisample 1
/* http://www.opengl.org/registry/specs/SGIS/multisample.txt */
#define GL_MULTISAMPLE_SGIS                      0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS             0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS              0x809F
#define GL_SAMPLE_MASK_SGIS                      0x80A0
#define GL_1PASS_SGIS                            0x80A1
#define GL_2PASS_0_SGIS                          0x80A2
#define GL_2PASS_1_SGIS                          0x80A3
#define GL_4PASS_0_SGIS                          0x80A4
#define GL_4PASS_1_SGIS                          0x80A5
#define GL_4PASS_2_SGIS                          0x80A6
#define GL_4PASS_3_SGIS                          0x80A7
#define GL_SAMPLE_BUFFERS_SGIS                   0x80A8
#define GL_SAMPLES_SGIS                          0x80A9
#define GL_SAMPLE_MASK_VALUE_SGIS                0x80AA
#define GL_SAMPLE_MASK_INVERT_SGIS               0x80AB
#define GL_SAMPLE_PATTERN_SGIS                   0x80AC
typedef void (GLAPIENTRY * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
extern PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_multisample*/

#ifndef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 1
/* http://www.opengl.org/registry/specs/SGIS/pixel_texture.txt */
#endif /*GL_SGIS_pixel_texture*/

#ifndef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 1
/* http://www.opengl.org/registry/specs/SGIS/point_line_texgen.txt */
#define GL_EYE_DISTANCE_TO_POINT_SGIS            0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS         0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS             0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS          0x81F3
#define GL_EYE_POINT_SGIS                        0x81F4
#define GL_OBJECT_POINT_SGIS                     0x81F5
#define GL_EYE_LINE_SGIS                         0x81F6
#define GL_OBJECT_LINE_SGIS                      0x81F7
#endif /*GL_SGIS_point_line_texgen*/

#ifndef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 1
/* http://www.opengl.org/registry/specs/SGIS/sharpen_texture.txt */
typedef void (GLAPIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
typedef void (GLAPIENTRY * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
extern PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_sharpen_texture*/

#ifndef GL_SGIS_texture4D
#define GL_SGIS_texture4D 1
/* http://www.opengl.org/registry/specs/SGIS/texture4D.txt */
typedef void (GLAPIENTRY * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void *pixels);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
extern PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_texture4D*/

#ifndef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 1
/* http://www.opengl.org/registry/specs/SGIS/texture_border_clamp.txt */
#define GL_CLAMP_TO_BORDER_SGIS                  0x812D
#endif /*GL_SGIS_texture_border_clamp*/

#ifndef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 1
/* http://www.opengl.org/registry/specs/SGIS/texture_edge_clamp.txt */
#define GL_CLAMP_TO_EDGE_SGIS                    0x812F
#endif /*GL_SGIS_texture_edge_clamp*/

#ifndef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 1
/* http://www.opengl.org/registry/specs/SGIS/texture_filter4.txt */
typedef void (GLAPIENTRY * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat* weights);
typedef void (GLAPIENTRY * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
extern PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIS_texture_filter4*/

#ifndef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 1
/* http://www.opengl.org/registry/specs/SGIS/texture_lod.txt */
#define GL_TEXTURE_MIN_LOD_SGIS                  0x813A
#define GL_TEXTURE_MAX_LOD_SGIS                  0x813B
#define GL_TEXTURE_BASE_LEVEL_SGIS               0x813C
#define GL_TEXTURE_MAX_LEVEL_SGIS                0x813D
#endif /*GL_SGIS_texture_lod*/

#ifndef GL_SGIS_texture_select
#define GL_SGIS_texture_select 1
/* http://www.opengl.org/registry/specs/SGIS/texture_select.txt */
#endif /*GL_SGIS_texture_select*/

#ifndef GL_SGIX_async
#define GL_SGIX_async 1
/* http://www.opengl.org/registry/specs/SGIX/async.txt */
#define GL_ASYNC_MARKER_SGIX                     0x8329
typedef void (GLAPIENTRY * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
typedef void (GLAPIENTRY * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
typedef GLint (GLAPIENTRY * PFNGLFINISHASYNCSGIXPROC) (GLuint* markerp);
typedef GLuint (GLAPIENTRY * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
typedef GLboolean (GLAPIENTRY * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
typedef GLint (GLAPIENTRY * PFNGLPOLLASYNCSGIXPROC) (GLuint* markerp);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
extern PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
extern PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
extern PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
extern PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
extern PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_async*/

#ifndef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 1
/* http://www.opengl.org/registry/specs/SGIX/async_histogram.txt */
#define GL_ASYNC_HISTOGRAM_SGIX                  0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX              0x832D
#endif /*GL_SGIX_async_histogram*/

#ifndef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 1
/* http://www.opengl.org/registry/specs/SGIX/async_pixel.txt */
#define GL_ASYNC_TEX_IMAGE_SGIX                  0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX                0x835D
#define GL_ASYNC_READ_PIXELS_SGIX                0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX              0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX            0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX            0x8361
#endif /*GL_SGIX_async_pixel*/

#ifndef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 1
/* http://www.opengl.org/registry/specs/SGIX/blend_alpha_minmax.txt */
#define GL_ALPHA_MIN_SGIX                        0x8320
#define GL_ALPHA_MAX_SGIX                        0x8321
#endif /*GL_SGIX_blend_alpha_minmax*/

#ifndef GL_SGIX_clipmap
#define GL_SGIX_clipmap 1
/* http://www.opengl.org/registry/specs/SGIX/clipmap.txt */
#endif /*GL_SGIX_clipmap*/

#ifndef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 1
/* http://www.opengl.org/registry/specs/SGIX/convolution_accuracy.txt */
#define GL_CONVOLUTION_HINT_SGIX                 0x8316
#endif /*GL_SGIX_convolution_accuracy*/

#ifndef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 1
/* http://www.opengl.org/registry/specs/SGIX/depth_texture.txt */
#define GL_DEPTH_COMPONENT16_SGIX                0x81A5
#define GL_DEPTH_COMPONENT24_SGIX                0x81A6
#define GL_DEPTH_COMPONENT32_SGIX                0x81A7
#endif /*GL_SGIX_depth_texture*/

#ifndef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 1
/* http://www.opengl.org/registry/specs/SGIX/flush_raster.txt */
typedef void (GLAPIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_flush_raster*/

#ifndef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 1
/* http://www.opengl.org/registry/specs/SGIX/fog_offset.txt */
#define GL_FOG_OFFSET_SGIX                       0x8198
#define GL_FOG_OFFSET_VALUE_SGIX                 0x8199
#endif /*GL_SGIX_fog_offset*/

#ifndef GL_SGIX_fog_texture
#define GL_SGIX_fog_texture 1
/* http://www.opengl.org/registry/specs/SGIX/fog_texture.txt */
typedef void (GLAPIENTRY * PFNGLTEXTUREFOGSGIXPROC) (GLenum pname);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTEXTUREFOGSGIXPROC glTextureFogSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_fog_texture*/

#ifndef GL_SGIX_fragment_specular_lighting
#define GL_SGIX_fragment_specular_lighting 1
/* http://www.opengl.org/registry/specs/SGIX/fragment_specular_lighting.txt */
typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, const GLfloat param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, const GLint param);
typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum value, GLfloat* data);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum value, GLint* data);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* data);
typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* data);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
extern PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
extern PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
extern PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
extern PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
extern PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
extern PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
extern PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
extern PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
extern PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
extern PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
extern PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
extern PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
extern PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
extern PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
extern PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
extern PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_fragment_specular_lighting*/

#ifndef GL_SGIX_framezoom
#define GL_SGIX_framezoom 1
/* http://www.opengl.org/registry/specs/SGIX/framezoom.txt */
typedef void (GLAPIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_framezoom*/

#ifndef GL_SGIX_interlace
#define GL_SGIX_interlace 1
/* http://www.opengl.org/registry/specs/SGIX/interlace.txt */
#define GL_INTERLACE_SGIX                        0x8094
#endif /*GL_SGIX_interlace*/

#ifndef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 1
/* http://www.opengl.org/registry/specs/SGIX/ir_instrument1.txt */
#endif /*GL_SGIX_ir_instrument1*/

#ifndef GL_SGIX_list_priority
#define GL_SGIX_list_priority 1
/* http://www.opengl.org/registry/specs/SGIX/list_priority.txt */
#endif /*GL_SGIX_list_priority*/

#ifndef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 1
/* http://www.opengl.org/registry/specs/SGIX/sgix_pixel_texture.txt */
typedef void (GLAPIENTRY * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_pixel_texture*/

#ifndef GL_SGIX_pixel_texture_bits
#define GL_SGIX_pixel_texture_bits 1
/* http://www.opengl.org/registry/specs/SGIX/pixel_texture_bits.txt */
#endif /*GL_SGIX_pixel_texture_bits*/

#ifndef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 1
/* http://www.opengl.org/registry/specs/SGIX/reference_plane.txt */
typedef void (GLAPIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble* equation);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_reference_plane*/

#ifndef GL_SGIX_resample
#define GL_SGIX_resample 1
/* http://www.opengl.org/registry/specs/SGIX/resample.txt */
#define GL_PACK_RESAMPLE_SGIX                    0x842E
#define GL_UNPACK_RESAMPLE_SGIX                  0x842F
#define GL_RESAMPLE_DECIMATE_SGIX                0x8430
#define GL_RESAMPLE_REPLICATE_SGIX               0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX               0x8434
#endif /*GL_SGIX_resample*/

#ifndef GL_SGIX_shadow
#define GL_SGIX_shadow 1
/* http://oss.sgi.com/projects/ogl-sample/registry/SGIX/shadow.txt */
#define GL_TEXTURE_COMPARE_SGIX                  0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX         0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX                 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX                 0x819D
#endif /*GL_SGIX_shadow*/

#ifndef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 1
/* http://www.opengl.org/registry/specs/SGIX/shadow_ambient.txt */
#define GL_SHADOW_AMBIENT_SGIX                   0x80BF
#endif /*GL_SGIX_shadow_ambient*/

#ifndef GL_SGIX_sprite
#define GL_SGIX_sprite 1
/* http://www.opengl.org/registry/specs/SGIX/sprite.txt */
typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, GLint* params);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
extern PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
extern PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
extern PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_sprite*/

#ifndef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 1
/* http://www.opengl.org/registry/specs/SGIX/tag_sample_buffer.txt */
typedef void (GLAPIENTRY * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGIX_tag_sample_buffer*/

#ifndef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 1
/* http://www.opengl.org/registry/specs/SGIX/texture_env_add.txt */
#endif /*GL_SGIX_texture_add_env*/

#ifndef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 1
/* http://www.opengl.org/registry/specs/SGIX/texture_coordinate_clamp.txt */
#define GL_TEXTURE_MAX_CLAMP_S_SGIX              0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX              0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX              0x836B
#endif /*GL_SGIX_texture_coordinate_clamp*/

#ifndef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 1
/* http://www.opengl.org/registry/specs/SGIX/texture_lod_bias.txt */
#endif /*GL_SGIX_texture_lod_bias*/

#ifndef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 1
/* http://www.opengl.org/registry/specs/SGIX/texture_multi_buffer.txt */
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX        0x812E
#endif /*GL_SGIX_texture_multi_buffer*/

#ifndef GL_SGIX_texture_range
#define GL_SGIX_texture_range 1
/* http://www.opengl.org/registry/specs/SGIX/texture_range.txt */
#define GL_RGB_SIGNED_SGIX                       0x85E0
#define GL_RGBA_SIGNED_SGIX                      0x85E1
#define GL_ALPHA_SIGNED_SGIX                     0x85E2
#define GL_LUMINANCE_SIGNED_SGIX                 0x85E3
#define GL_INTENSITY_SIGNED_SGIX                 0x85E4
#define GL_LUMINANCE_ALPHA_SIGNED_SGIX           0x85E5
#define GL_RGB16_SIGNED_SGIX                     0x85E6
#define GL_RGBA16_SIGNED_SGIX                    0x85E7
#define GL_ALPHA16_SIGNED_SGIX                   0x85E8
#define GL_LUMINANCE16_SIGNED_SGIX               0x85E9
#define GL_INTENSITY16_SIGNED_SGIX               0x85EA
#define GL_LUMINANCE16_ALPHA16_SIGNED_SGIX       0x85EB
#define GL_RGB_EXTENDED_RANGE_SGIX               0x85EC
#define GL_RGBA_EXTENDED_RANGE_SGIX              0x85ED
#define GL_ALPHA_EXTENDED_RANGE_SGIX             0x85EE
#define GL_LUMINANCE_EXTENDED_RANGE_SGIX         0x85EF
#define GL_INTENSITY_EXTENDED_RANGE_SGIX         0x85F0
#define GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX   0x85F1
#define GL_RGB16_EXTENDED_RANGE_SGIX             0x85F2
#define GL_RGBA16_EXTENDED_RANGE_SGIX            0x85F3
#define GL_ALPHA16_EXTENDED_RANGE_SGIX           0x85F4
#define GL_LUMINANCE16_EXTENDED_RANGE_SGIX       0x85F5
#define GL_INTENSITY16_EXTENDED_RANGE_SGIX       0x85F6
#define GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX 0x85F7
#define GL_MIN_LUMINANCE_SGIS                    0x85F8
#define GL_MAX_LUMINANCE_SGIS                    0x85F9
#define GL_MIN_INTENSITY_SGIS                    0x85FA
#define GL_MAX_INTENSITY_SGIS                    0x85FB
#endif /*GL_SGIX_texture_range*/

#ifndef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 1
/* http://www.opengl.org/registry/specs/SGIX/texture_scale_bias.txt */
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX         0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX        0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX   0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX  0x817C
#endif /*GL_SGIX_texture_scale_bias*/

#ifndef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 1
/* http://www.opengl.org/registry/specs/SGIX/vertex_preclip.txt */
#define GL_VERTEX_PRECLIP_SGIX                   0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX              0x83EF
#endif /*GL_SGIX_vertex_preclip*/

#ifndef GL_SGIX_vertex_preclip_hint
#define GL_SGIX_vertex_preclip_hint 1
/* http://www.opengl.org/registry/specs/SGIX/vertex_preclip.txt */
#define GL_VERTEX_PRECLIP_SGIX                   0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX              0x83EF
#endif /*GL_SGIX_vertex_preclip_hint*/

#ifndef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 1
/* http://www.opengl.org/registry/specs/SGIX/ycrcb.txt */
#endif /*GL_SGIX_ycrcb*/

#ifndef GL_SGI_color_matrix
#define GL_SGI_color_matrix 1
/* http://www.opengl.org/registry/specs/SGI/color_matrix.txt */
#define GL_COLOR_MATRIX_SGI                      0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI          0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI      0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI       0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI     0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI      0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI     0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI        0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI      0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI       0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI      0x80BB
#endif /*GL_SGI_color_matrix*/

#ifndef GL_SGI_color_table
#define GL_SGI_color_table 1
/* http://www.opengl.org/registry/specs/SGI/color_table.txt */
#define GL_COLOR_TABLE_SGI                       0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI      0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI     0x80D2
#define GL_PROXY_COLOR_TABLE_SGI                 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE_SGI                 0x80D6
#define GL_COLOR_TABLE_BIAS_SGI                  0x80D7
#define GL_COLOR_TABLE_FORMAT_SGI                0x80D8
#define GL_COLOR_TABLE_WIDTH_SGI                 0x80D9
#define GL_COLOR_TABLE_RED_SIZE_SGI              0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE_SGI            0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE_SGI             0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI            0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI        0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI        0x80DF
typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (GLAPIENTRY * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (GLAPIENTRY * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
extern PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
extern PFNGLCOLORTABLESGIPROC glColorTableSGI;
extern PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
extern PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
extern PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
extern PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SGI_color_table*/

#ifndef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 1
/* http://www.opengl.org/registry/specs/SGI/texture_color_table.txt */
#define GL_TEXTURE_COLOR_TABLE_SGI               0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI         0x80BD
#endif /*GL_SGI_texture_color_table*/

#ifndef GL_SUNX_constant_data
#define GL_SUNX_constant_data 1
/* http://www.opengl.org/registry/specs/SUNX/constant_data.txt */
#define GL_UNPACK_CONSTANT_DATA_SUNX             0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX            0x81D6
typedef void (GLAPIENTRY * PFNGLFINISHTEXTURESUNXPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SUNX_constant_data*/

#ifndef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 1
/* http://www.opengl.org/registry/specs/SUN/convolution_border_modes.txt */
#define GL_WRAP_BORDER_SUN                       0x81D4
#endif /*GL_SUN_convolution_border_modes*/

#ifndef GL_SUN_global_alpha
#define GL_SUN_global_alpha 1
/* http://www.opengl.org/registry/specs/SUN/global_alpha.txt */
#define GL_GLOBAL_ALPHA_SUN                      0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN               0x81DA
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
extern PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
extern PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
extern PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
extern PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
extern PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
extern PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
extern PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SUN_global_alpha*/

#ifndef GL_SUN_mesh_array
#define GL_SUN_mesh_array 1
/* http://www.opengl.org/registry/specs/SUN/mesh_array.txt */
#define GL_QUAD_MESH_SUN                         0x8614
#define GL_TRIANGLE_MESH_SUN                     0x8615
#endif /*GL_SUN_mesh_array*/

#ifndef GL_SUN_read_video_pixels
#define GL_SUN_read_video_pixels 1
/* http://wwws.sun.com/software/graphics/opengl/extensions/gl_sun_read_video_pixels.txt */
typedef void (GLAPIENTRY * PFNGLREADVIDEOPIXELSSUNPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLREADVIDEOPIXELSSUNPROC glReadVideoPixelsSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SUN_read_video_pixels*/

#ifndef GL_SUN_slice_accum
#define GL_SUN_slice_accum 1
/* http://www.opengl.org/registry/specs/SUN/slice_accum.txt */
#define GL_SLICE_ACCUM_SUN                       0x85CC
#endif /*GL_SUN_slice_accum*/

#ifndef GL_SUN_triangle_list
#define GL_SUN_triangle_list 1
/* http://www.opengl.org/registry/specs/SUN/triangle_list.txt */
#define GL_RESTART_SUN                           0x01
#define GL_REPLACE_MIDDLE_SUN                    0x02
#define GL_REPLACE_OLDEST_SUN                    0x03
#define GL_TRIANGLE_LIST_SUN                     0x81D7
#define GL_REPLACEMENT_CODE_SUN                  0x81D8
#define GL_REPLACEMENT_CODE_ARRAY_SUN            0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN       0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN     0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN    0x85C3
#define GL_R1UI_V3F_SUN                          0x85C4
#define GL_R1UI_C4UB_V3F_SUN                     0x85C5
#define GL_R1UI_C3F_V3F_SUN                      0x85C6
#define GL_R1UI_N3F_V3F_SUN                      0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN                  0x85C8
#define GL_R1UI_T2F_V3F_SUN                      0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN                  0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN              0x85CB
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte* code);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint* code);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort* code);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
extern PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
extern PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
extern PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
extern PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
extern PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
extern PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SUN_triangle_list*/

#ifndef GL_SUN_vertex
#define GL_SUN_vertex 1
/* http://www.opengl.org/registry/specs/SUN/vertex.txt */
typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte* c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte* c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint* rc, const GLubyte *c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat* tc, const GLubyte *c, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
extern PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
extern PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
extern PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
extern PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
extern PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
extern PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
extern PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
extern PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
extern PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
extern PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_SUN_vertex*/

#ifndef GL_VERSION_1_2_1
#define GL_VERSION_1_2_1 1
/* http://www.opengl.org/documentation/specs/version1.2/opengl1.2.1.pdf */
#endif /*GL_VERSION_1_2_1*/

#ifndef GL_WIN_phong_shading
#define GL_WIN_phong_shading 1
/* http://www.opengl.org/registry/specs/WIN/phong_shading.txt */
#define GL_PHONG_WIN                             0x80EA
#define GL_PHONG_HINT_WIN                        0x80EB
#endif /*GL_WIN_phong_shading*/

#ifndef GL_WIN_specular_fog
#define GL_WIN_specular_fog 1
/* http://www.opengl.org/registry/specs/WIN/specular_fog.txt */
#define GL_FOG_SPECULAR_TEXTURE_WIN              0x80EC
#endif /*GL_WIN_specular_fog*/

#ifndef GL_WIN_swap_hint
#define GL_WIN_swap_hint 1
/* http://msdn.microsoft.com/library/default.asp?url=/library/en-us/opengl/glfunc01_16zy.asp */
typedef void (GLAPIENTRY * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNGLADDSWAPHINTRECTWINPROC glAddSwapHintRectWIN;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*GL_WIN_swap_hint*/

#if GLEXT_WANT_WGL
#ifndef WGL_3DFX_multisample
#define WGL_3DFX_multisample 1
/* http://www.opengl.org/registry/specs/3DFX/3dfx_multisample.txt */
#define WGL_SAMPLE_BUFFERS_3DFX                  0x2060
#define WGL_SAMPLES_3DFX                         0x2061
#endif /*WGL_3DFX_multisample*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_3DL_stereo_control
#define WGL_3DL_stereo_control 1
/* http://www.opengl.org/registry/specs/3DL/stereo_control.txt */
#define WGL_STEREO_EMITTER_ENABLE_3DL            0x2055
#define WGL_STEREO_EMITTER_DISABLE_3DL           0x2056
#define WGL_STEREO_POLARITY_NORMAL_3DL           0x2057
#define WGL_STEREO_POLARITY_INVERT_3DL           0x2058
typedef BOOL (GLAPIENTRY * PFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC hDC, UINT uState);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLSETSTEREOEMITTERSTATE3DLPROC wglSetStereoEmitterState3DL;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_3DL_stereo_control*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_AMD_gpu_association
#define WGL_AMD_gpu_association 1
/* http://www.opengl.org/registry/specs/AMD/wgl_gpu_association.txt */
#define WGL_GPU_VENDOR_AMD                       0x1F00
#define WGL_GPU_RENDERER_STRING_AMD              0x1F01
#define WGL_GPU_OPENGL_VERSION_STRING_AMD        0x1F02
#define WGL_GPU_FASTEST_TARGET_GPUS_AMD          0x21A2
#define WGL_GPU_RAM_AMD                          0x21A3
#define WGL_GPU_CLOCK_AMD                        0x21A4
#define WGL_GPU_NUM_PIPES_AMD                    0x21A5
#define WGL_GPU_NUM_SIMD_AMD                     0x21A6
#define WGL_GPU_NUM_RB_AMD                       0x21A7
#define WGL_GPU_NUM_SPI_AMD                      0x21A8
typedef VOID (GLAPIENTRY * PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef HGLRC (GLAPIENTRY * PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) (UINT id);
typedef HGLRC (GLAPIENTRY * PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) (UINT id, HGLRC hShareContext, const int* attribList);
typedef BOOL (GLAPIENTRY * PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) (HGLRC hglrc);
typedef UINT (GLAPIENTRY * PFNWGLGETCONTEXTGPUIDAMDPROC) (HGLRC hglrc);
typedef HGLRC (GLAPIENTRY * PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) (void);
typedef UINT (GLAPIENTRY * PFNWGLGETGPUIDSAMDPROC) (UINT maxCount, UINT* ids);
typedef INT (GLAPIENTRY * PFNWGLGETGPUINFOAMDPROC) (UINT id, INT property, GLenum dataType, UINT size, void* data);
typedef BOOL (GLAPIENTRY * PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) (HGLRC hglrc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC wglBlitContextFramebufferAMD;
extern PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC wglCreateAssociatedContextAMD;
extern PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC wglCreateAssociatedContextAttribsAMD;
extern PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC wglDeleteAssociatedContextAMD;
extern PFNWGLGETCONTEXTGPUIDAMDPROC wglGetContextGPUIDAMD;
extern PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC wglGetCurrentAssociatedContextAMD;
extern PFNWGLGETGPUIDSAMDPROC wglGetGPUIDsAMD;
extern PFNWGLGETGPUINFOAMDPROC wglGetGPUInfoAMD;
extern PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC wglMakeAssociatedContextCurrentAMD;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_AMD_gpu_association*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_buffer_region
#define WGL_ARB_buffer_region 1
/* http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt */
#define WGL_FRONT_COLOR_BUFFER_BIT_ARB           0x00000001
#define WGL_BACK_COLOR_BUFFER_BIT_ARB            0x00000002
#define WGL_DEPTH_BUFFER_BIT_ARB                 0x00000004
#define WGL_STENCIL_BUFFER_BIT_ARB               0x00000008
typedef HANDLE (GLAPIENTRY * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);
typedef VOID (GLAPIENTRY * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);
typedef BOOL (GLAPIENTRY * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
typedef BOOL (GLAPIENTRY * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB;
extern PFNWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB;
extern PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB;
extern PFNWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_buffer_region*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_context_flush_control
#define WGL_ARB_context_flush_control 1
/* http://www.opengl.org/registry/specs/KHR/context_flush_control.txt */
#define WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB    0x0000
#define WGL_CONTEXT_RELEASE_BEHAVIOR_ARB         0x2097
#define WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB   0x2098
#endif /*WGL_ARB_context_flush_control*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_create_context
#define WGL_ARB_create_context 1
/* http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt */
#define WGL_CONTEXT_DEBUG_BIT_ARB                0x0001
#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB   0x0002
#define WGL_CONTEXT_MAJOR_VERSION_ARB            0x2091
#define WGL_CONTEXT_MINOR_VERSION_ARB            0x2092
#define WGL_CONTEXT_LAYER_PLANE_ARB              0x2093
#define WGL_CONTEXT_FLAGS_ARB                    0x2094
#define ERROR_INVALID_VERSION_ARB                0x2095
#define ERROR_INVALID_PROFILE_ARB                0x2096
typedef HGLRC (GLAPIENTRY * PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int* attribList);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_create_context*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_create_context_profile
#define WGL_ARB_create_context_profile 1
/* http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt */
#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB         0x00000001
#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define WGL_CONTEXT_PROFILE_MASK_ARB             0x9126
#endif /*WGL_ARB_create_context_profile*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_create_context_robustness
#define WGL_ARB_create_context_robustness 1
/* http://www.opengl.org/registry/specs/ARB/wgl_create_context_robustness.txt */
#define WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB        0x00000004
#define WGL_LOSE_CONTEXT_ON_RESET_ARB            0x8252
#define WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define WGL_NO_RESET_NOTIFICATION_ARB            0x8261
#endif /*WGL_ARB_create_context_robustness*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_extensions_string
#define WGL_ARB_extensions_string 1
/* http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt */
typedef const char* (GLAPIENTRY * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_extensions_string*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_framebuffer_sRGB
#define WGL_ARB_framebuffer_sRGB 1
/* http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt */
#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB         0x20A9
#endif /*WGL_ARB_framebuffer_sRGB*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_make_current_read
#define WGL_ARB_make_current_read 1
/* http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt */
#define ERROR_INVALID_PIXEL_TYPE_ARB             0x2043
#define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB   0x2054
typedef HDC (GLAPIENTRY * PFNWGLGETCURRENTREADDCARBPROC) (VOID);
typedef BOOL (GLAPIENTRY * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB;
extern PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_make_current_read*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_multisample
#define WGL_ARB_multisample 1
/* http://www.opengl.org/registry/specs/ARB/multisample.txt */
#define WGL_SAMPLE_BUFFERS_ARB                   0x2041
#define WGL_SAMPLES_ARB                          0x2042
#endif /*WGL_ARB_multisample*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_pbuffer
#define WGL_ARB_pbuffer 1
/* http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt */
#define WGL_DRAW_TO_PBUFFER_ARB                  0x202D
#define WGL_MAX_PBUFFER_PIXELS_ARB               0x202E
#define WGL_MAX_PBUFFER_WIDTH_ARB                0x202F
#define WGL_MAX_PBUFFER_HEIGHT_ARB               0x2030
#define WGL_PBUFFER_LARGEST_ARB                  0x2033
#define WGL_PBUFFER_WIDTH_ARB                    0x2034
#define WGL_PBUFFER_HEIGHT_ARB                   0x2035
#define WGL_PBUFFER_LOST_ARB                     0x2036
DECLARE_HANDLE(HPBUFFERARB);
typedef HPBUFFERARB (GLAPIENTRY * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
typedef BOOL (GLAPIENTRY * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);
typedef HDC (GLAPIENTRY * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int* piValue);
typedef int (GLAPIENTRY * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB;
extern PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB;
extern PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB;
extern PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB;
extern PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_pbuffer*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_pixel_format
#define WGL_ARB_pixel_format 1
/* http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt */
#define WGL_NUMBER_PIXEL_FORMATS_ARB             0x2000
#define WGL_DRAW_TO_WINDOW_ARB                   0x2001
#define WGL_DRAW_TO_BITMAP_ARB                   0x2002
#define WGL_ACCELERATION_ARB                     0x2003
#define WGL_NEED_PALETTE_ARB                     0x2004
#define WGL_NEED_SYSTEM_PALETTE_ARB              0x2005
#define WGL_SWAP_LAYER_BUFFERS_ARB               0x2006
#define WGL_SWAP_METHOD_ARB                      0x2007
#define WGL_NUMBER_OVERLAYS_ARB                  0x2008
#define WGL_NUMBER_UNDERLAYS_ARB                 0x2009
#define WGL_TRANSPARENT_ARB                      0x200A
#define WGL_SHARE_DEPTH_ARB                      0x200C
#define WGL_SHARE_STENCIL_ARB                    0x200D
#define WGL_SHARE_ACCUM_ARB                      0x200E
#define WGL_SUPPORT_GDI_ARB                      0x200F
#define WGL_SUPPORT_OPENGL_ARB                   0x2010
#define WGL_DOUBLE_BUFFER_ARB                    0x2011
#define WGL_STEREO_ARB                           0x2012
#define WGL_PIXEL_TYPE_ARB                       0x2013
#define WGL_COLOR_BITS_ARB                       0x2014
#define WGL_RED_BITS_ARB                         0x2015
#define WGL_RED_SHIFT_ARB                        0x2016
#define WGL_GREEN_BITS_ARB                       0x2017
#define WGL_GREEN_SHIFT_ARB                      0x2018
#define WGL_BLUE_BITS_ARB                        0x2019
#define WGL_BLUE_SHIFT_ARB                       0x201A
#define WGL_ALPHA_BITS_ARB                       0x201B
#define WGL_ALPHA_SHIFT_ARB                      0x201C
#define WGL_ACCUM_BITS_ARB                       0x201D
#define WGL_ACCUM_RED_BITS_ARB                   0x201E
#define WGL_ACCUM_GREEN_BITS_ARB                 0x201F
#define WGL_ACCUM_BLUE_BITS_ARB                  0x2020
#define WGL_ACCUM_ALPHA_BITS_ARB                 0x2021
#define WGL_DEPTH_BITS_ARB                       0x2022
#define WGL_STENCIL_BITS_ARB                     0x2023
#define WGL_AUX_BUFFERS_ARB                      0x2024
#define WGL_NO_ACCELERATION_ARB                  0x2025
#define WGL_GENERIC_ACCELERATION_ARB             0x2026
#define WGL_FULL_ACCELERATION_ARB                0x2027
#define WGL_SWAP_EXCHANGE_ARB                    0x2028
#define WGL_SWAP_COPY_ARB                        0x2029
#define WGL_SWAP_UNDEFINED_ARB                   0x202A
#define WGL_TYPE_RGBA_ARB                        0x202B
#define WGL_TYPE_COLORINDEX_ARB                  0x202C
#define WGL_TRANSPARENT_RED_VALUE_ARB            0x2037
#define WGL_TRANSPARENT_GREEN_VALUE_ARB          0x2038
#define WGL_TRANSPARENT_BLUE_VALUE_ARB           0x2039
#define WGL_TRANSPARENT_ALPHA_VALUE_ARB          0x203A
#define WGL_TRANSPARENT_INDEX_VALUE_ARB          0x203B
typedef BOOL (GLAPIENTRY * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef BOOL (GLAPIENTRY * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, FLOAT *pfValues);
typedef BOOL (GLAPIENTRY * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, int *piValues);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB;
extern PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB;
extern PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_pixel_format*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_pixel_format_float
#define WGL_ARB_pixel_format_float 1
/* http://www.opengl.org/registry/specs/ARB/color_buffer_float.txt */
#define WGL_TYPE_RGBA_FLOAT_ARB                  0x21A0
#endif /*WGL_ARB_pixel_format_float*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_render_texture
#define WGL_ARB_render_texture 1
/* http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt */
#define WGL_BIND_TO_TEXTURE_RGB_ARB              0x2070
#define WGL_BIND_TO_TEXTURE_RGBA_ARB             0x2071
#define WGL_TEXTURE_FORMAT_ARB                   0x2072
#define WGL_TEXTURE_TARGET_ARB                   0x2073
#define WGL_MIPMAP_TEXTURE_ARB                   0x2074
#define WGL_TEXTURE_RGB_ARB                      0x2075
#define WGL_TEXTURE_RGBA_ARB                     0x2076
#define WGL_NO_TEXTURE_ARB                       0x2077
#define WGL_TEXTURE_CUBE_MAP_ARB                 0x2078
#define WGL_TEXTURE_1D_ARB                       0x2079
#define WGL_TEXTURE_2D_ARB                       0x207A
#define WGL_MIPMAP_LEVEL_ARB                     0x207B
#define WGL_CUBE_MAP_FACE_ARB                    0x207C
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB      0x207D
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB      0x207E
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB      0x207F
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB      0x2080
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB      0x2081
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB      0x2082
#define WGL_FRONT_LEFT_ARB                       0x2083
#define WGL_FRONT_RIGHT_ARB                      0x2084
#define WGL_BACK_LEFT_ARB                        0x2085
#define WGL_BACK_RIGHT_ARB                       0x2086
#define WGL_AUX0_ARB                             0x2087
#define WGL_AUX1_ARB                             0x2088
#define WGL_AUX2_ARB                             0x2089
#define WGL_AUX3_ARB                             0x208A
#define WGL_AUX4_ARB                             0x208B
#define WGL_AUX5_ARB                             0x208C
#define WGL_AUX6_ARB                             0x208D
#define WGL_AUX7_ARB                             0x208E
#define WGL_AUX8_ARB                             0x208F
#define WGL_AUX9_ARB                             0x2090
typedef BOOL (GLAPIENTRY * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL (GLAPIENTRY * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL (GLAPIENTRY * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int* piAttribList);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDTEXIMAGEARBPROC wglBindTexImageARB;
extern PFNWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB;
extern PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_ARB_render_texture*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_robustness_application_isolation
#define WGL_ARB_robustness_application_isolation 1
/* http://www.opengl.org/registry/specs/ARB/wgl_robustness_isolation.txt */
#define WGL_CONTEXT_RESET_ISOLATION_BIT_ARB      0x00000008
#endif /*WGL_ARB_robustness_application_isolation*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ARB_robustness_share_group_isolation
#define WGL_ARB_robustness_share_group_isolation 1
/* http://www.opengl.org/registry/specs/ARB/wgl_robustness_isolation.txt */
#define WGL_CONTEXT_RESET_ISOLATION_BIT_ARB      0x00000008
#endif /*WGL_ARB_robustness_share_group_isolation*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ATI_pixel_format_float
#define WGL_ATI_pixel_format_float 1
/* http://www.opengl.org/registry/specs/ATI/pixel_format_float.txt */
#define WGL_TYPE_RGBA_FLOAT_ATI                  0x21A0
#define GL_RGBA_FLOAT_MODE_ATI                   0x8820
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI       0x8835
#endif /*WGL_ATI_pixel_format_float*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_ATI_render_texture_rectangle
#define WGL_ATI_render_texture_rectangle 1
#define WGL_TEXTURE_RECTANGLE_ATI                0x21A5
#endif /*WGL_ATI_render_texture_rectangle*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_colorspace
#define WGL_EXT_colorspace 1
/* http://www.opengl.org/registry/specs/EXT/wgl_colorspace.txt */
#define WGL_COLORSPACE_SRGB_EXT                  0x3089
#define WGL_COLORSPACE_LINEAR_EXT                0x308A
#define WGL_COLORSPACE_EXT                       0x309D
#endif /*WGL_EXT_colorspace*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_create_context_es2_profile
#define WGL_EXT_create_context_es2_profile 1
/* http://www.opengl.org/registry/specs/EXT/wgl_create_context_es2_profile.txt */
#define WGL_CONTEXT_ES2_PROFILE_BIT_EXT          0x00000004
#endif /*WGL_EXT_create_context_es2_profile*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_create_context_es_profile
#define WGL_EXT_create_context_es_profile 1
/* http://www.opengl.org/registry/specs/EXT/wgl_create_context_es_profile.txt */
#define WGL_CONTEXT_ES_PROFILE_BIT_EXT           0x00000004
#endif /*WGL_EXT_create_context_es_profile*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_depth_float
#define WGL_EXT_depth_float 1
/* http://www.opengl.org/registry/specs/EXT/wgl_depth_float.txt */
#define WGL_DEPTH_FLOAT_EXT                      0x2040
#endif /*WGL_EXT_depth_float*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_display_color_table
#define WGL_EXT_display_color_table 1
/* http://www.opengl.org/registry/specs/EXT/wgl_display_color_table.txt */
typedef GLboolean (GLAPIENTRY * PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort id);
typedef GLboolean (GLAPIENTRY * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort id);
typedef void (GLAPIENTRY * PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort id);
typedef GLboolean (GLAPIENTRY * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (GLushort* table, GLuint length);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT;
extern PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT;
extern PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT;
extern PFNWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_display_color_table*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_extensions_string
#define WGL_EXT_extensions_string 1
/* http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt */
typedef const char* (GLAPIENTRY * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_extensions_string*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_framebuffer_sRGB
#define WGL_EXT_framebuffer_sRGB 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_framebuffer_sRGB.txt */
#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT         0x20A9
#endif /*WGL_EXT_framebuffer_sRGB*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_make_current_read
#define WGL_EXT_make_current_read 1
/* http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt */
#define ERROR_INVALID_PIXEL_TYPE_EXT             0x2043
typedef HDC (GLAPIENTRY * PFNWGLGETCURRENTREADDCEXTPROC) (VOID);
typedef BOOL (GLAPIENTRY * PFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT;
extern PFNWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_make_current_read*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_multisample
#define WGL_EXT_multisample 1
/* http://www.opengl.org/registry/specs/EXT/wgl_multisample.txt */
#define WGL_SAMPLE_BUFFERS_EXT                   0x2041
#define WGL_SAMPLES_EXT                          0x2042
#endif /*WGL_EXT_multisample*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_pbuffer
#define WGL_EXT_pbuffer 1
/* http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt */
#define WGL_DRAW_TO_PBUFFER_EXT                  0x202D
#define WGL_MAX_PBUFFER_PIXELS_EXT               0x202E
#define WGL_MAX_PBUFFER_WIDTH_EXT                0x202F
#define WGL_MAX_PBUFFER_HEIGHT_EXT               0x2030
#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT            0x2031
#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT           0x2032
#define WGL_PBUFFER_LARGEST_EXT                  0x2033
#define WGL_PBUFFER_WIDTH_EXT                    0x2034
#define WGL_PBUFFER_HEIGHT_EXT                   0x2035
DECLARE_HANDLE(HPBUFFEREXT);
typedef HPBUFFEREXT (GLAPIENTRY * PFNWGLCREATEPBUFFEREXTPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
typedef BOOL (GLAPIENTRY * PFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer);
typedef HDC (GLAPIENTRY * PFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer, int iAttribute, int* piValue);
typedef int (GLAPIENTRY * PFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer, HDC hDC);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT;
extern PFNWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT;
extern PFNWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT;
extern PFNWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT;
extern PFNWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_pbuffer*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_pixel_format
#define WGL_EXT_pixel_format 1
/* http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt */
#define WGL_NUMBER_PIXEL_FORMATS_EXT             0x2000
#define WGL_DRAW_TO_WINDOW_EXT                   0x2001
#define WGL_DRAW_TO_BITMAP_EXT                   0x2002
#define WGL_ACCELERATION_EXT                     0x2003
#define WGL_NEED_PALETTE_EXT                     0x2004
#define WGL_NEED_SYSTEM_PALETTE_EXT              0x2005
#define WGL_SWAP_LAYER_BUFFERS_EXT               0x2006
#define WGL_SWAP_METHOD_EXT                      0x2007
#define WGL_NUMBER_OVERLAYS_EXT                  0x2008
#define WGL_NUMBER_UNDERLAYS_EXT                 0x2009
#define WGL_TRANSPARENT_EXT                      0x200A
#define WGL_TRANSPARENT_VALUE_EXT                0x200B
#define WGL_SHARE_DEPTH_EXT                      0x200C
#define WGL_SHARE_STENCIL_EXT                    0x200D
#define WGL_SHARE_ACCUM_EXT                      0x200E
#define WGL_SUPPORT_GDI_EXT                      0x200F
#define WGL_SUPPORT_OPENGL_EXT                   0x2010
#define WGL_DOUBLE_BUFFER_EXT                    0x2011
#define WGL_STEREO_EXT                           0x2012
#define WGL_PIXEL_TYPE_EXT                       0x2013
#define WGL_COLOR_BITS_EXT                       0x2014
#define WGL_RED_BITS_EXT                         0x2015
#define WGL_RED_SHIFT_EXT                        0x2016
#define WGL_GREEN_BITS_EXT                       0x2017
#define WGL_GREEN_SHIFT_EXT                      0x2018
#define WGL_BLUE_BITS_EXT                        0x2019
#define WGL_BLUE_SHIFT_EXT                       0x201A
#define WGL_ALPHA_BITS_EXT                       0x201B
#define WGL_ALPHA_SHIFT_EXT                      0x201C
#define WGL_ACCUM_BITS_EXT                       0x201D
#define WGL_ACCUM_RED_BITS_EXT                   0x201E
#define WGL_ACCUM_GREEN_BITS_EXT                 0x201F
#define WGL_ACCUM_BLUE_BITS_EXT                  0x2020
#define WGL_ACCUM_ALPHA_BITS_EXT                 0x2021
#define WGL_DEPTH_BITS_EXT                       0x2022
#define WGL_STENCIL_BITS_EXT                     0x2023
#define WGL_AUX_BUFFERS_EXT                      0x2024
#define WGL_NO_ACCELERATION_EXT                  0x2025
#define WGL_GENERIC_ACCELERATION_EXT             0x2026
#define WGL_FULL_ACCELERATION_EXT                0x2027
#define WGL_SWAP_EXCHANGE_EXT                    0x2028
#define WGL_SWAP_COPY_EXT                        0x2029
#define WGL_SWAP_UNDEFINED_EXT                   0x202A
#define WGL_TYPE_RGBA_EXT                        0x202B
#define WGL_TYPE_COLORINDEX_EXT                  0x202C
typedef BOOL (GLAPIENTRY * PFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef BOOL (GLAPIENTRY * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, FLOAT *pfValues);
typedef BOOL (GLAPIENTRY * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, int *piValues);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT;
extern PFNWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT;
extern PFNWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_pixel_format*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_pixel_format_packed_float
#define WGL_EXT_pixel_format_packed_float 1
/* http://developer.download.nvidia.com/opengl/specs/GL_EXT_packed_float.txt */
#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT         0x20A8
#endif /*WGL_EXT_pixel_format_packed_float*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_swap_control
#define WGL_EXT_swap_control 1
/* http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt */
typedef int (GLAPIENTRY * PFNWGLGETSWAPINTERVALEXTPROC) (void);
typedef BOOL (GLAPIENTRY * PFNWGLSWAPINTERVALEXTPROC) (int interval);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;
extern PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_EXT_swap_control*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_EXT_swap_control_tear
#define WGL_EXT_swap_control_tear 1
/* http://www.opengl.org/registry/specs/EXT/wgl_swap_control_tear.txt */
#endif /*WGL_EXT_swap_control_tear*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_digital_video_control
#define WGL_I3D_digital_video_control 1
/* http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt */
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D 0x2050
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D 0x2051
#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D    0x2052
#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D    0x2053
typedef BOOL (GLAPIENTRY * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
typedef BOOL (GLAPIENTRY * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D;
extern PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_digital_video_control*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_gamma
#define WGL_I3D_gamma 1
/* http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt */
#define WGL_GAMMA_TABLE_SIZE_I3D                 0x204E
#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D            0x204F
typedef BOOL (GLAPIENTRY * PFNWGLGETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, USHORT* puRed, USHORT *puGreen, USHORT *puBlue);
typedef BOOL (GLAPIENTRY * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
typedef BOOL (GLAPIENTRY * PFNWGLSETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, const USHORT* puRed, const USHORT *puGreen, const USHORT *puBlue);
typedef BOOL (GLAPIENTRY * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D;
extern PFNWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D;
extern PFNWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D;
extern PFNWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_gamma*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_genlock
#define WGL_I3D_genlock 1
/* http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt */
#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D         0x2044
#define WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D     0x2045
#define WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D    0x2046
#define WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D      0x2047
#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D      0x2048
#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D     0x2049
#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D      0x204A
#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D       0x204B
#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D         0x204C
typedef BOOL (GLAPIENTRY * PFNWGLDISABLEGENLOCKI3DPROC) (HDC hDC);
typedef BOOL (GLAPIENTRY * PFNWGLENABLEGENLOCKI3DPROC) (HDC hDC);
typedef BOOL (GLAPIENTRY * PFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT uRate);
typedef BOOL (GLAPIENTRY * PFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT uDelay);
typedef BOOL (GLAPIENTRY * PFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT uEdge);
typedef BOOL (GLAPIENTRY * PFNWGLGENLOCKSOURCEI3DPROC) (HDC hDC, UINT uSource);
typedef BOOL (GLAPIENTRY * PFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT* uRate);
typedef BOOL (GLAPIENTRY * PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT* uDelay);
typedef BOOL (GLAPIENTRY * PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT* uEdge);
typedef BOOL (GLAPIENTRY * PFNWGLGETGENLOCKSOURCEI3DPROC) (HDC hDC, UINT* uSource);
typedef BOOL (GLAPIENTRY * PFNWGLISENABLEDGENLOCKI3DPROC) (HDC hDC, BOOL* pFlag);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC hDC, UINT* uMaxLineDelay, UINT *uMaxPixelDelay);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D;
extern PFNWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D;
extern PFNWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D;
extern PFNWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D;
extern PFNWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D;
extern PFNWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D;
extern PFNWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D;
extern PFNWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D;
extern PFNWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D;
extern PFNWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D;
extern PFNWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D;
extern PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_genlock*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_image_buffer
#define WGL_I3D_image_buffer 1
/* http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt */
#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D          0x00000001
#define WGL_IMAGE_BUFFER_LOCK_I3D                0x00000002
typedef BOOL (GLAPIENTRY * PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, HANDLE* pEvent, LPVOID *pAddress, DWORD *pSize, UINT count);
typedef LPVOID (GLAPIENTRY * PFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC hDC, DWORD dwSize, UINT uFlags);
typedef BOOL (GLAPIENTRY * PFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC hDC, LPVOID pAddress);
typedef BOOL (GLAPIENTRY * PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, LPVOID* pAddress, UINT count);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D;
extern PFNWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D;
extern PFNWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D;
extern PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_image_buffer*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_swap_frame_lock
#define WGL_I3D_swap_frame_lock 1
/* http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt */
typedef BOOL (GLAPIENTRY * PFNWGLDISABLEFRAMELOCKI3DPROC) (VOID);
typedef BOOL (GLAPIENTRY * PFNWGLENABLEFRAMELOCKI3DPROC) (VOID);
typedef BOOL (GLAPIENTRY * PFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL* pFlag);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL* pFlag);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D;
extern PFNWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D;
extern PFNWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D;
extern PFNWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_swap_frame_lock*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_I3D_swap_frame_usage
#define WGL_I3D_swap_frame_usage 1
/* http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt */
typedef BOOL (GLAPIENTRY * PFNWGLBEGINFRAMETRACKINGI3DPROC) (void);
typedef BOOL (GLAPIENTRY * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
typedef BOOL (GLAPIENTRY * PFNWGLGETFRAMEUSAGEI3DPROC) (float* pUsage);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD* pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D;
extern PFNWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D;
extern PFNWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D;
extern PFNWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_I3D_swap_frame_usage*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_copy_image
#define WGL_NV_copy_image 1
/* http://www.opengl.org/registry/specs/NV/copy_image.txt */
/* BOOL wglCopyImageSubDataNV (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) */
#endif /*WGL_NV_copy_image*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_delay_before_swap
#define WGL_NV_delay_before_swap 1
/* http://www.opengl.org/registry/specs/NV/wgl_delay_before_swap.txt */
typedef BOOL (GLAPIENTRY * PFNWGLDELAYBEFORESWAPNVPROC) (HDC hDC, GLfloat seconds);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLDELAYBEFORESWAPNVPROC wglDelayBeforeSwapNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_delay_before_swap*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_DX_interop
#define WGL_NV_DX_interop 1
/* http://www.opengl.org/registry/specs/NV/DX_interop.txt */
#define WGL_ACCESS_READ_ONLY_NV                  0x0000
#define WGL_ACCESS_READ_WRITE_NV                 0x0001
#define WGL_ACCESS_WRITE_DISCARD_NV              0x0002
typedef BOOL (GLAPIENTRY * PFNWGLDXCLOSEDEVICENVPROC) (HANDLE hDevice);
typedef BOOL (GLAPIENTRY * PFNWGLDXLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE* hObjects);
typedef BOOL (GLAPIENTRY * PFNWGLDXOBJECTACCESSNVPROC) (HANDLE hObject, GLenum access);
typedef HANDLE (GLAPIENTRY * PFNWGLDXOPENDEVICENVPROC) (void* dxDevice);
typedef HANDLE (GLAPIENTRY * PFNWGLDXREGISTEROBJECTNVPROC) (HANDLE hDevice, void* dxObject, GLuint name, GLenum type, GLenum access);
typedef BOOL (GLAPIENTRY * PFNWGLDXSETRESOURCESHAREHANDLENVPROC) (void* dxObject, HANDLE shareHandle);
typedef BOOL (GLAPIENTRY * PFNWGLDXUNLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE* hObjects);
typedef BOOL (GLAPIENTRY * PFNWGLDXUNREGISTEROBJECTNVPROC) (HANDLE hDevice, HANDLE hObject);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLDXCLOSEDEVICENVPROC wglDXCloseDeviceNV;
extern PFNWGLDXLOCKOBJECTSNVPROC wglDXLockObjectsNV;
extern PFNWGLDXOBJECTACCESSNVPROC wglDXObjectAccessNV;
extern PFNWGLDXOPENDEVICENVPROC wglDXOpenDeviceNV;
extern PFNWGLDXREGISTEROBJECTNVPROC wglDXRegisterObjectNV;
extern PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV;
extern PFNWGLDXUNLOCKOBJECTSNVPROC wglDXUnlockObjectsNV;
extern PFNWGLDXUNREGISTEROBJECTNVPROC wglDXUnregisterObjectNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_DX_interop*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_DX_interop2
#define WGL_NV_DX_interop2 1
/* http://www.opengl.org/registry/specs/NV/DX_interop2.txt */
#endif /*WGL_NV_DX_interop2*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_float_buffer
#define WGL_NV_float_buffer 1
/* http://www.opengl.org/registry/specs/NV/float_buffer.txt */
#define WGL_FLOAT_COMPONENTS_NV                  0x20B0
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV 0x20B2
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV 0x20B3
#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV 0x20B4
#define WGL_TEXTURE_FLOAT_R_NV                   0x20B5
#define WGL_TEXTURE_FLOAT_RG_NV                  0x20B6
#define WGL_TEXTURE_FLOAT_RGB_NV                 0x20B7
#define WGL_TEXTURE_FLOAT_RGBA_NV                0x20B8
#endif /*WGL_NV_float_buffer*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_gpu_affinity
#define WGL_NV_gpu_affinity 1
/* http://developer.download.nvidia.com/opengl/specs/WGL_nv_gpu_affinity.txt */
#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
#define WGL_ERROR_MISSING_AFFINITY_MASK_NV       0x20D1
DECLARE_HANDLE(HGPUNV);
typedef struct _GPU_DEVICE {  DWORD cb;   CHAR DeviceName[32];   CHAR DeviceString[128];   DWORD Flags;   RECT rcVirtualScreen; } GPU_DEVICE, *PGPU_DEVICE;
typedef BOOL (GLAPIENTRY * PFNWGLENUMGPUSNVPROC) (UINT iGpuIndex, HGPUNV *phGpu);
typedef BOOL (GLAPIENTRY * PFNWGLENUMGPUDEVICESNVPROC) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
typedef HDC (GLAPIENTRY * PFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV *phGpuList);
typedef BOOL (GLAPIENTRY * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
typedef BOOL (GLAPIENTRY * PFNWGLDELETEDCNVPROC) (HDC hdc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLENUMGPUSNVPROC wglEnumGpusNV;
extern PFNWGLENUMGPUDEVICESNVPROC wglEnumGpuDevicesNV;
extern PFNWGLCREATEAFFINITYDCNVPROC wglCreateAffinityDCNV;
extern PFNWGLENUMGPUSFROMAFFINITYDCNVPROC wglEnumGpusFromAffinityDCNV;
extern PFNWGLDELETEDCNVPROC wglDeleteDCNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_gpu_affinity*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_multisample_coverage
#define WGL_NV_multisample_coverage 1
/* http://www.opengl.org/registry/specs/NV/multisample_coverage.txt */
#define WGL_COVERAGE_SAMPLES_NV                  0x2042
#define WGL_COLOR_SAMPLES_NV                     0x20B9
#endif /*WGL_NV_multisample_coverage*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_present_video
#define WGL_NV_present_video 1
/* http://www.opengl.org/registry/specs/NV/present_video.txt */
#define WGL_NUM_VIDEO_SLOTS_NV                   0x20F0
DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
typedef BOOL (GLAPIENTRY * PFNWGLBINDVIDEODEVICENVPROC) (HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int* piAttribList);
typedef int (GLAPIENTRY * PFNWGLENUMERATEVIDEODEVICESNVPROC) (HDC hDc, HVIDEOOUTPUTDEVICENV* phDeviceList);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYCURRENTCONTEXTNVPROC) (int iAttribute, int* piValue);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDVIDEODEVICENVPROC wglBindVideoDeviceNV;
extern PFNWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV;
extern PFNWGLQUERYCURRENTCONTEXTNVPROC wglQueryCurrentContextNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_present_video*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_render_depth_texture
#define WGL_NV_render_depth_texture 1
/* http://www.opengl.org/registry/specs/NV/render_depth_texture.txt */
#define WGL_NO_TEXTURE_ARB                       0x2077
#define WGL_BIND_TO_TEXTURE_DEPTH_NV             0x20A3
#define WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV   0x20A4
#define WGL_DEPTH_TEXTURE_FORMAT_NV              0x20A5
#define WGL_TEXTURE_DEPTH_COMPONENT_NV           0x20A6
#define WGL_DEPTH_COMPONENT_NV                   0x20A7
#endif /*WGL_NV_render_depth_texture*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_render_texture_rectangle
#define WGL_NV_render_texture_rectangle 1
/* http://www.opengl.org/registry/specs/NV/render_texture_rectangle.txt */
#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV     0x20A0
#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV    0x20A1
#define WGL_TEXTURE_RECTANGLE_NV                 0x20A2
#endif /*WGL_NV_render_texture_rectangle*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_swap_group
#define WGL_NV_swap_group 1
/* http://www.opengl.org/registry/specs/NV/wgl_swap_group.txt */
typedef BOOL (GLAPIENTRY * PFNWGLBINDSWAPBARRIERNVPROC) (GLuint group, GLuint barrier);
typedef BOOL (GLAPIENTRY * PFNWGLJOINSWAPGROUPNVPROC) (HDC hDC, GLuint group);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYFRAMECOUNTNVPROC) (HDC hDC, GLuint* count);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYMAXSWAPGROUPSNVPROC) (HDC hDC, GLuint* maxGroups, GLuint *maxBarriers);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYSWAPGROUPNVPROC) (HDC hDC, GLuint* group, GLuint *barrier);
typedef BOOL (GLAPIENTRY * PFNWGLRESETFRAMECOUNTNVPROC) (HDC hDC);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDSWAPBARRIERNVPROC wglBindSwapBarrierNV;
extern PFNWGLJOINSWAPGROUPNVPROC wglJoinSwapGroupNV;
extern PFNWGLQUERYFRAMECOUNTNVPROC wglQueryFrameCountNV;
extern PFNWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV;
extern PFNWGLQUERYSWAPGROUPNVPROC wglQuerySwapGroupNV;
extern PFNWGLRESETFRAMECOUNTNVPROC wglResetFrameCountNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_swap_group*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_vertex_array_range
#define WGL_NV_vertex_array_range 1
/* http://oss.sgi.com/projects/ogl-sample/registry/NV/vertex_array_range.txt */
typedef void * (GLAPIENTRY * PFNWGLALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
typedef void (GLAPIENTRY * PFNWGLFREEMEMORYNVPROC) (void *pointer);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;
extern PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_vertex_array_range*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_video_capture
#define WGL_NV_video_capture 1
/* http://www.opengl.org/registry/specs/NV/video_capture.txt */
#define WGL_UNIQUE_ID_NV                         0x20CE
#define WGL_NUM_VIDEO_CAPTURE_SLOTS_NV           0x20CF
DECLARE_HANDLE(HVIDEOINPUTDEVICENV);
typedef BOOL (GLAPIENTRY * PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
typedef UINT (GLAPIENTRY * PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) (HDC hDc, HVIDEOINPUTDEVICENV* phDeviceList);
typedef BOOL (GLAPIENTRY * PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
typedef BOOL (GLAPIENTRY * PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int* piValue);
typedef BOOL (GLAPIENTRY * PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDVIDEOCAPTUREDEVICENVPROC wglBindVideoCaptureDeviceNV;
extern PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV;
extern PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC wglLockVideoCaptureDeviceNV;
extern PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC wglQueryVideoCaptureDeviceNV;
extern PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC wglReleaseVideoCaptureDeviceNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_video_capture*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_NV_video_output
#define WGL_NV_video_output 1
/* http://www.opengl.org/registry/specs/NV/wgl_video_output.txt */
#define WGL_BIND_TO_VIDEO_RGB_NV                 0x20C0
#define WGL_BIND_TO_VIDEO_RGBA_NV                0x20C1
#define WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV       0x20C2
#define WGL_VIDEO_OUT_COLOR_NV                   0x20C3
#define WGL_VIDEO_OUT_ALPHA_NV                   0x20C4
#define WGL_VIDEO_OUT_DEPTH_NV                   0x20C5
#define WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV         0x20C6
#define WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV         0x20C7
#define WGL_VIDEO_OUT_FRAME                      0x20C8
#define WGL_VIDEO_OUT_FIELD_1                    0x20C9
#define WGL_VIDEO_OUT_FIELD_2                    0x20CA
#define WGL_VIDEO_OUT_STACKED_FIELDS_1_2         0x20CB
#define WGL_VIDEO_OUT_STACKED_FIELDS_2_1         0x20CC
DECLARE_HANDLE(HPVIDEODEV);
typedef BOOL (GLAPIENTRY * PFNWGLBINDVIDEOIMAGENVPROC) (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef BOOL (GLAPIENTRY * PFNWGLGETVIDEODEVICENVPROC) (HDC hDC, int numDevices, HPVIDEODEV* hVideoDevice);
typedef BOOL (GLAPIENTRY * PFNWGLGETVIDEOINFONVPROC) (HPVIDEODEV hpVideoDevice, unsigned long* pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef BOOL (GLAPIENTRY * PFNWGLRELEASEVIDEODEVICENVPROC) (HPVIDEODEV hVideoDevice);
typedef BOOL (GLAPIENTRY * PFNWGLRELEASEVIDEOIMAGENVPROC) (HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef BOOL (GLAPIENTRY * PFNWGLSENDPBUFFERTOVIDEONVPROC) (HPBUFFERARB hPbuffer, int iBufferType, unsigned long* pulCounterPbuffer, BOOL bBlock);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLBINDVIDEOIMAGENVPROC wglBindVideoImageNV;
extern PFNWGLGETVIDEODEVICENVPROC wglGetVideoDeviceNV;
extern PFNWGLGETVIDEOINFONVPROC wglGetVideoInfoNV;
extern PFNWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV;
extern PFNWGLRELEASEVIDEOIMAGENVPROC wglReleaseVideoImageNV;
extern PFNWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_NV_video_output*/
#endif /*GLEXT_WANT_WGL*/

#if GLEXT_WANT_WGL
#ifndef WGL_OML_sync_control
#define WGL_OML_sync_control 1
/* http://www.opengl.org/registry/specs/OML/wgl_sync_control.txt */
typedef BOOL (GLAPIENTRY * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32* numerator, INT32 *denominator);
typedef BOOL (GLAPIENTRY * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64* ust, INT64 *msc, INT64 *sbc);
typedef INT64 (GLAPIENTRY * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef INT64 (GLAPIENTRY * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef BOOL (GLAPIENTRY * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64* ust, INT64 *msc, INT64 *sbc);
typedef BOOL (GLAPIENTRY * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64* ust, INT64 *msc, INT64 *sbc);
#if GLEXT_DECLARE_FUNCTIONS
extern PFNWGLGETMSCRATEOMLPROC wglGetMscRateOML;
extern PFNWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML;
extern PFNWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML;
extern PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML;
extern PFNWGLWAITFORMSCOMLPROC wglWaitForMscOML;
extern PFNWGLWAITFORSBCOMLPROC wglWaitForSbcOML;
#endif /*GLEXT_DECLARE_FUNCTIONS*/
#endif /*WGL_OML_sync_control*/
#endif /*GLEXT_WANT_WGL*/


#endif /*__GLEXT_H__*/
