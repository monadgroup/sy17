/* This is an automatically generated file. Do not edit. */
#include "Export.h"
using namespace OmedaPlayer;
using namespace OmedaNodes;

const int sampleRate=44100;
const int tempo=90;
const int ppq=96;

Node *CreateNodeFromType(unsigned char type) {
    switch (type) {
        case 0: return new Noise();
        case 1: return new Multiply();
        case 2: return new TriangleOscillator();
        case 3: return new Add2();
        case 4: return new Subtract();
        case 5: return new NoteFreq();
        case 6: return new SineOscillator();
        case 7: return new Add4();
        case 8: return new Divide();
        case 9: return new SawOscillator();
        case 10: return new TriggerEnvelope();
        case 11: return new SquareOscillator();
        case 12: return new StateVariableFilter();
        case 13: return new Pan();
        case 14: return new Mix();
        case 15: return new BiquadLowPassFilter();
        case 16: return new Delay();
        case 17: return new RampOscillator();
        case 18: return new DbToLinear();
        default: return nullptr;
    }
}

short noteDeltaTimes[] = { 384, 0, 192, 0, 576, 0, 192, 0, 480, 0, 96, 0, 672, 0, 96, 0, 768, 0, 192, 0, 576, 0, 192, 0, 192, 0, 192, 0, 192, 0, 672, 0, 96, 0, 288, 0, 96, 0, 192, 0, 192, 0, 672, 0, 96, 0, 288, 0, 96, 0, 192, 0, 576, 0, 192, 0, 576, 0, 192, 0, 480, 0, 96, 0, 672, 0, 96, 0, 768, 0, 192, 0, 576, 0, 192, 0, 192, 0, 192, 0, 192, 0, 672, 0, 96, 0, 288, 0, 96, 0, 192, 0, 192, 0, 192, 0, 576, 0, 192, 0, 480, 0, 96, 0, 672, 0, 96, 0, 768, 0, 192, 0, 576, 0, 192, 0, 192, 0, 192, 0, 192, 0, 672, 0, 96, 0, 288, 0, 96, 0, 192, 0, 192, 0, 8448, 0, 0, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 96, 0, 0, 0, 672, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 0, 0, 48, 0, 432, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 1920, 0, 48, 0, 48, 0, 48, 0, 48, 0, 192, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 192, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 192, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 192, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 432, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 11520, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 4992, 0, 144, 0, 48, 0, 480, 0, 96, 0, 144, 0, 48, 0, 480, 0, 96, 0, 144, 0, 48, 0, 480, 0, 96, 0, 144, 0, 48, 0, 336, 0, 48, 0, 576, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 8448, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 1920, 0, 24, 0, 744, 0, 24, 0, 744, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 600, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 600, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 408, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 48, 0, 24, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 24, 0, 24, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 24, 0, 0, 0, 8, 0, 7, 0, 9, 0, 23, 0, 0, 0, 8, 0, 7, 0, 10, 0, 14592, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 20736, 8448, 0, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 96, 0, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 96, 0, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 96, 0, 672, 0, 144, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 16896, 768 };
short noteDurations[] = { 193, 193, 569, 569, 186, 186, 489, 489, 98, 98, 675, 675, 96, 96, 769, 769, 201, 201, 569, 569, 187, 187, 198, 198, 188, 188, 198, 198, 681, 681, 98, 98, 294, 294, 105, 105, 197, 197, 180, 180, 681, 681, 98, 98, 294, 294, 105, 105, 197, 197, 180, 180, 193, 193, 569, 569, 186, 186, 489, 489, 98, 98, 675, 675, 96, 96, 769, 769, 201, 201, 569, 569, 187, 187, 198, 198, 188, 188, 198, 198, 681, 681, 98, 98, 294, 294, 105, 105, 197, 197, 180, 180, 193, 193, 569, 569, 186, 186, 489, 489, 98, 98, 675, 675, 96, 96, 769, 769, 201, 201, 569, 569, 187, 187, 198, 198, 188, 188, 198, 198, 681, 681, 98, 98, 294, 294, 105, 105, 197, 197, 180, 180, 681, 681, 668, 3071, 667, 667, 3071, 668, 92, 96, 92, 96, 676, 669, 676, 669, 96, 103, 103, 96, 672, 677, 672, 677, 98, 95, 98, 95, 670, 667, 667, 670, 103, 103, 105, 105, 667, 3071, 667, 668, 3071, 668, 96, 92, 92, 96, 669, 669, 676, 676, 96, 103, 103, 96, 672, 677, 672, 677, 95, 98, 95, 98, 667, 670, 667, 670, 103, 105, 105, 103, 668, 3071, 667, 668, 3071, 667, 96, 96, 92, 92, 676, 669, 676, 669, 96, 103, 103, 96, 672, 677, 677, 672, 98, 95, 98, 95, 667, 670, 667, 670, 103, 105, 103, 105, 20, 21, 21, 20, 21, 19, 19, 21, 20, 20, 19, 19, 19, 19, 20, 20, 19, 20, 20, 19, 20, 20, 20, 20, 24, 24, 24, 20, 24, 20, 24, 20, 24, 20, 24, 24, 22, 19, 22, 24, 19, 22, 19, 22, 24, 19, 24, 24, 24, 24, 21, 20, 24, 21, 20, 21, 20, 21, 24, 20, 21, 21, 21, 25, 21, 25, 25, 25, 21, 21, 21, 21, 21, 21, 24, 21, 21, 21, 24, 21, 21, 24, 24, 21, 28, 27, 28, 29, 27, 27, 29, 28, 27, 29, 29, 28, 30, 26, 30, 24, 26, 24, 24, 30, 30, 26, 24, 26, 27, 25, 22, 27, 25, 22, 27, 22, 25, 25, 22, 27, 20, 24, 27, 20, 24, 27, 27, 27, 24, 20, 24, 20, 21, 28, 26, 21, 28, 26, 21, 28, 26, 21, 26, 28, 27, 21, 21, 28, 27, 21, 28, 27, 28, 21, 27, 28, 28, 28, 23, 29, 23, 23, 28, 29, 23, 28, 29, 29, 23, 25, 23, 25, 25, 25, 25, 25, 25, 25, 23, 23, 28, 28, 30, 27, 30, 28, 27, 30, 27, 28, 27, 30, 21, 19, 21, 20, 19, 21, 19, 20, 20, 21, 20, 19, 19, 20, 20, 19, 20, 20, 20, 20, 19, 20, 20, 19, 24, 24, 20, 20, 24, 20, 24, 24, 20, 24, 24, 24, 19, 24, 22, 19, 22, 24, 22, 19, 24, 22, 19, 24, 24, 21, 24, 20, 20, 21, 24, 20, 21, 24, 20, 21, 21, 21, 25, 25, 21, 21, 21, 25, 21, 25, 21, 21, 21, 21, 24, 21, 24, 24, 21, 21, 24, 21, 21, 21, 29, 27, 29, 28, 28, 27, 27, 28, 29, 28, 27, 29, 24, 24, 30, 26, 24, 30, 26, 30, 24, 26, 30, 26, 27, 25, 22, 27, 25, 22, 22, 25, 27, 22, 25, 27, 20, 24, 24, 20, 20, 27, 27, 24, 27, 24, 27, 20, 26, 28, 21, 26, 28, 26, 21, 28, 26, 21, 21, 28, 28, 21, 28, 27, 21, 28, 27, 21, 28, 27, 21, 27, 29, 28, 23, 28, 23, 23, 28, 29, 23, 28, 29, 29, 23, 25, 23, 25, 25, 25, 25, 23, 25, 25, 23, 25, 30, 28, 30, 27, 27, 28, 30, 27, 28, 30, 28, 27, 19, 44, 19, 44, 37, 37, 44, 19, 44, 19, 35, 35, 42, 17, 17, 42, 36, 36, 14, 42, 14, 42, 31, 31, 15, 36, 36, 15, 31, 31, 35, 17, 17, 35, 33, 33, 35, 16, 16, 35, 33, 33, 17, 17, 43, 43, 32, 32, 19, 44, 19, 44, 37, 37, 44, 19, 44, 19, 35, 35, 42, 17, 17, 42, 36, 36, 42, 42, 14, 14, 31, 31, 36, 15, 36, 15, 31, 31, 35, 17, 35, 17, 33, 33, 16, 35, 35, 16, 33, 33, 43, 17, 43, 17, 32, 32, 19, 44, 19, 44, 37, 37, 44, 19, 19, 44, 35, 35, 17, 42, 42, 17, 36, 36, 42, 14, 14, 42, 31, 31, 36, 15, 15, 36, 31, 31, 35, 17, 35, 17, 33, 33, 16, 35, 16, 35, 33, 33, 43, 17, 17, 43, 32, 32, 19, 19, 44, 44, 37, 37, 19, 44, 44, 19, 35, 35, 17, 17, 42, 42, 36, 36, 14, 42, 14, 42, 31, 31, 36, 36, 15, 15, 31, 31, 35, 17, 17, 35, 33, 33, 35, 16, 16, 35, 33, 33, 43, 17, 17, 43, 32, 32, 44, 19, 19, 44, 37, 37, 44, 44, 19, 19, 35, 35, 42, 17, 17, 42, 36, 36, 42, 14, 14, 42, 31, 31, 36, 36, 15, 15, 31, 31, 17, 35, 35, 17, 33, 33, 16, 35, 35, 16, 33, 33, 43, 17, 17, 43, 32, 32, 19, 19, 44, 44, 37, 37, 44, 19, 44, 19, 35, 35, 17, 17, 42, 42, 36, 36, 42, 14, 14, 42, 31, 31, 15, 36, 15, 36, 31, 31, 35, 17, 17, 35, 33, 33, 16, 16, 35, 35, 33, 33, 43, 17, 43, 17, 32, 32, 44, 19, 44, 19, 37, 37, 19, 44, 19, 44, 35, 35, 42, 42, 17, 17, 36, 36, 14, 42, 14, 42, 31, 31, 15, 15, 36, 36, 31, 31, 35, 35, 17, 17, 33, 33, 16, 35, 35, 16, 33, 33, 17, 43, 17, 43, 32, 32, 19, 44, 44, 19, 37, 37, 19, 19, 44, 44, 35, 35, 42, 42, 17, 17, 36, 36, 14, 42, 14, 42, 31, 31, 36, 36, 15, 15, 31, 31, 17, 35, 35, 17, 33, 33, 35, 35, 16, 16, 33, 33, 17, 43, 17, 43, 32, 32, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 59, 59, 54, 54, 51, 51, 49, 49, 52, 52, 51, 51, 51, 51, 50, 50, 54, 54, 52, 52, 61, 61, 50, 50, 56, 56, 47, 47, 50, 50, 50, 50, 52, 52, 49, 49, 53, 53, 49, 49, 52, 52, 51, 51, 56, 56, 49, 49, 56, 56, 50, 50, 61, 61, 52, 52, 54, 54, 53, 53, 55, 55, 51, 51, 22, 22, 22, 22, 20, 20, 19, 19, 20, 20, 19, 19, 23, 23, 22, 22, 17, 17, 19, 19, 21, 21, 21, 21, 20, 20, 16, 16, 14, 14, 18, 18, 13, 13, 15, 15, 17, 17, 16, 16, 20, 20, 14, 14, 22, 22, 21, 21, 21, 21, 25, 25, 20, 20, 18, 18, 21, 21, 15, 15, 17, 17, 19, 19, 21, 21, 20, 20, 18, 18, 18, 18, 23, 23, 23, 23, 22, 22, 19, 19, 20, 20, 22, 22, 18, 18, 19, 19, 21, 21, 23, 23, 23, 23, 17, 17, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 20, 20, 19, 19, 20, 22, 22, 20, 22, 22, 20, 20, 19, 19, 19, 19, 20, 20, 23, 23, 22, 22, 17, 17, 19, 22, 19, 22, 21, 21, 22, 22, 21, 20, 20, 21, 19, 20, 19, 20, 20, 16, 20, 16, 14, 14, 18, 18, 13, 13, 22, 22, 15, 15, 22, 22, 20, 20, 19, 19, 20, 17, 17, 20, 16, 16, 20, 20, 14, 14, 22, 22, 22, 22, 21, 22, 21, 22, 20, 21, 20, 21, 19, 25, 25, 19, 20, 20, 20, 20, 18, 18, 21, 21, 15, 15, 17, 22, 22, 22, 17, 22, 22, 22, 22, 22, 20, 20, 20, 20, 19, 19, 19, 19, 19, 20, 20, 20, 19, 20, 21, 21, 20, 20, 18, 18, 22, 22, 18, 18, 22, 22, 22, 22, 23, 22, 22, 23, 20, 20, 23, 20, 20, 23, 19, 19, 19, 22, 19, 22, 19, 20, 20, 19, 20, 20, 20, 20, 22, 22, 18, 18, 19, 22, 22, 19, 22, 22, 22, 22, 22, 22, 20, 20, 20, 20, 19, 19, 19, 19, 20, 21, 20, 20, 21, 20, 23, 23, 23, 23, 17, 17, 22, 22, 22, 20, 22, 20, 22, 22, 22, 21, 21, 22, 22, 20, 20, 22, 20, 20, 22, 19, 22, 19, 19, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 59, 59, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 59, 59, 48, 48, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 59, 59, 48, 48, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 59, 59, 48, 48, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 60, 60, 59, 59, 60, 60, 60, 60, 59, 59, 48, 48, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48, 48, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 129, 129, 24, 24, 478, 478, 85, 85, 135, 135, 21, 21, 496, 496, 87, 87, 126, 126, 24, 24, 487, 487, 91, 91, 125, 125, 24, 24, 314, 314, 27, 27, 186, 186, 86, 86, 81, 81, 80, 80, 79, 79, 84, 84, 83, 83, 74, 74, 85, 85, 78, 78, 80, 80, 76, 76, 72, 72, 68, 68, 67, 67, 75, 75, 66, 66, 72, 72, 71, 71, 64, 64, 58, 58, 65, 65, 72, 72, 53, 53, 68, 68, 62, 62, 66, 66, 69, 69, 77, 77, 61, 61, 50, 50, 68, 68, 66, 66, 86, 86, 81, 81, 80, 80, 79, 79, 84, 84, 83, 83, 74, 74, 85, 85, 78, 78, 80, 80, 76, 76, 72, 72, 68, 68, 67, 67, 75, 75, 66, 66, 72, 72, 71, 71, 64, 64, 58, 58, 65, 65, 72, 72, 53, 53, 68, 68, 62, 62, 66, 66, 69, 69, 77, 77, 61, 61, 50, 50, 68, 68, 66, 66, 86, 86, 81, 81, 80, 80, 79, 79, 84, 84, 83, 83, 74, 74, 85, 85, 78, 78, 80, 80, 76, 76, 72, 72, 68, 68, 67, 67, 75, 75, 66, 66, 72, 72, 71, 71, 64, 64, 58, 58, 65, 65, 72, 72, 53, 53, 68, 68, 62, 62, 66, 66, 69, 69, 77, 77, 61, 61, 50, 50, 68, 68, 66, 66, 86, 86, 81, 81, 80, 80, 79, 79, 84, 84, 83, 83, 74, 74, 85, 85, 78, 78, 80, 80, 76, 76, 72, 72, 68, 68, 67, 67, 75, 75, 66, 66, 72, 72, 71, 71, 64, 64, 58, 58, 65, 65, 72, 72, 53, 53, 68, 68, 62, 62, 66, 66, 69, 69, 77, 77, 61, 61, 50, 50, 68, 68, 66, 66, 12288, 12288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 24, 24, 12, 12, 24, 24, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 12, 12, 45, 45, 1, 1, 20, 20, 15, 15, 12, 12, 17, 17, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 6144, 6144, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21552, 1392, 668, 3071, 667, 96, 92, 669, 676, 96, 103, 672, 677, 98, 95, 667, 670, 103, 105, 667, 3071, 668, 96, 92, 676, 669, 103, 96, 672, 677, 95, 98, 667, 670, 105, 103, 668, 3071, 667, 96, 92, 669, 676, 103, 96, 677, 672, 95, 98, 670, 667, 105, 103, 21, 20, 21, 19, 20, 19, 20, 20, 19, 20, 20, 19, 20, 24, 24, 20, 24, 24, 24, 22, 19, 19, 22, 24, 21, 20, 24, 24, 21, 20, 21, 21, 25, 21, 21, 25, 21, 21, 24, 21, 21, 24, 29, 27, 28, 29, 27, 28, 26, 24, 30, 26, 24, 30, 25, 22, 27, 25, 22, 27, 27, 24, 20, 27, 24, 20, 21, 28, 26, 26, 28, 21, 27, 28, 21, 27, 28, 21, 28, 29, 23, 28, 29, 23, 25, 23, 25, 23, 25, 25, 30, 28, 27, 30, 28, 27, 20, 19, 21, 20, 19, 21, 19, 20, 20, 19, 20, 20, 24, 24, 20, 24, 24, 20, 22, 19, 24, 22, 19, 24, 20, 21, 24, 20, 21, 24, 25, 21, 21, 21, 21, 25, 21, 21, 24, 21, 21, 24, 27, 29, 28, 27, 29, 28, 26, 24, 30, 26, 24, 30, 22, 25, 27, 22, 25, 27, 27, 20, 24, 24, 20, 27, 26, 21, 28, 26, 21, 28, 21, 28, 27, 21, 28, 27, 23, 28, 29, 28, 29, 23, 23, 25, 25, 23, 25, 25, 28, 30, 28, 27, 30, 27, 1152, 480 };
unsigned char notes[] = { 60, 60, 62, 62, 60, 60, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 60, 60, 62, 62, 60, 60, 65, 65, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 58, 58, 60, 60, 62, 62, 57, 57, 60, 60, 57, 57, 58, 58, 60, 60, 62, 62, 60, 60, 62, 62, 60, 60, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 60, 60, 62, 62, 60, 60, 65, 65, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 58, 58, 60, 60, 62, 62, 60, 60, 62, 62, 60, 60, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 60, 60, 62, 62, 60, 60, 65, 65, 64, 64, 62, 62, 57, 57, 60, 60, 57, 57, 58, 58, 60, 60, 62, 62, 50, 50, 62, 65, 69, 69, 65, 62, 72, 70, 72, 70, 69, 62, 69, 62, 72, 70, 70, 72, 62, 69, 62, 69, 70, 72, 70, 72, 69, 62, 62, 69, 70, 70, 72, 72, 69, 65, 69, 62, 65, 62, 70, 72, 72, 70, 62, 62, 69, 69, 72, 70, 70, 72, 62, 69, 62, 69, 72, 70, 72, 70, 62, 69, 62, 69, 70, 72, 72, 70, 62, 65, 69, 62, 65, 69, 70, 70, 72, 72, 69, 62, 69, 62, 72, 70, 70, 72, 62, 69, 69, 62, 70, 72, 70, 72, 62, 69, 62, 69, 70, 72, 70, 72, 74, 65, 65, 62, 77, 81, 81, 77, 62, 74, 69, 69, 69, 81, 74, 77, 81, 65, 77, 69, 74, 65, 62, 62, 77, 62, 65, 69, 74, 81, 74, 69, 77, 81, 62, 65, 65, 81, 77, 74, 69, 65, 81, 77, 74, 69, 62, 62, 62, 74, 77, 81, 62, 65, 69, 65, 81, 77, 74, 69, 69, 81, 65, 74, 77, 62, 74, 62, 65, 69, 77, 81, 65, 69, 74, 77, 81, 77, 62, 65, 69, 74, 62, 81, 65, 82, 77, 74, 70, 70, 74, 77, 82, 86, 86, 65, 62, 77, 74, 69, 65, 81, 69, 62, 74, 77, 81, 65, 74, 77, 81, 62, 65, 69, 74, 81, 77, 65, 69, 62, 81, 77, 74, 69, 65, 62, 74, 62, 65, 69, 77, 81, 69, 74, 77, 81, 62, 65, 69, 62, 77, 81, 65, 74, 62, 81, 81, 77, 74, 69, 65, 62, 65, 69, 74, 77, 77, 65, 69, 74, 81, 81, 77, 74, 69, 65, 62, 62, 81, 77, 69, 62, 65, 74, 62, 65, 74, 77, 81, 69, 82, 70, 74, 77, 86, 82, 65, 74, 77, 70, 65, 86, 77, 81, 77, 62, 69, 65, 81, 74, 74, 65, 62, 69, 81, 77, 74, 69, 65, 62, 77, 74, 69, 65, 62, 81, 62, 65, 69, 81, 77, 81, 77, 74, 69, 65, 62, 74, 69, 74, 77, 81, 65, 62, 65, 69, 74, 77, 81, 62, 74, 77, 62, 81, 81, 77, 74, 69, 65, 62, 69, 65, 81, 81, 62, 74, 69, 65, 77, 62, 69, 74, 77, 65, 65, 77, 74, 69, 62, 62, 65, 69, 74, 77, 81, 81, 74, 82, 86, 77, 65, 70, 70, 65, 74, 77, 82, 86, 69, 81, 74, 77, 81, 62, 77, 74, 69, 65, 62, 65, 62, 65, 69, 74, 77, 81, 81, 77, 74, 69, 65, 62, 81, 77, 65, 69, 81, 62, 74, 65, 62, 77, 74, 69, 77, 74, 69, 65, 62, 65, 69, 74, 77, 81, 81, 62, 77, 69, 65, 62, 81, 77, 74, 69, 65, 62, 81, 74, 62, 65, 69, 77, 81, 81, 77, 74, 69, 65, 62, 74, 81, 77, 69, 62, 74, 62, 65, 69, 74, 77, 81, 65, 86, 82, 74, 77, 65, 70, 74, 77, 82, 86, 70, 65, 76, 84, 76, 84, 81, 81, 84, 76, 84, 76, 81, 81, 84, 76, 76, 84, 81, 81, 76, 84, 76, 84, 81, 81, 76, 86, 86, 76, 81, 81, 86, 76, 76, 86, 81, 81, 86, 76, 76, 86, 81, 81, 76, 76, 86, 86, 81, 81, 76, 84, 76, 84, 81, 81, 84, 76, 84, 76, 81, 81, 84, 76, 76, 84, 81, 81, 84, 84, 76, 76, 81, 81, 86, 76, 86, 76, 81, 81, 86, 76, 86, 76, 81, 81, 76, 86, 86, 76, 81, 81, 86, 76, 86, 76, 81, 81, 76, 84, 76, 84, 81, 81, 84, 76, 76, 84, 81, 81, 76, 84, 84, 76, 81, 81, 84, 76, 76, 84, 81, 81, 86, 76, 76, 86, 81, 81, 86, 76, 86, 76, 81, 81, 76, 86, 76, 86, 81, 81, 86, 76, 76, 86, 81, 81, 76, 76, 84, 84, 81, 81, 76, 84, 84, 76, 81, 81, 76, 76, 84, 84, 81, 81, 76, 84, 76, 84, 81, 81, 86, 86, 76, 76, 81, 81, 86, 76, 76, 86, 81, 81, 86, 76, 76, 86, 81, 81, 86, 76, 76, 86, 81, 81, 84, 76, 76, 84, 81, 81, 84, 84, 76, 76, 81, 81, 84, 76, 76, 84, 81, 81, 84, 76, 76, 84, 81, 81, 86, 86, 76, 76, 81, 81, 76, 86, 86, 76, 81, 81, 76, 86, 86, 76, 81, 81, 86, 76, 76, 86, 81, 81, 76, 76, 84, 84, 81, 81, 84, 76, 84, 76, 81, 81, 76, 76, 84, 84, 81, 81, 84, 76, 76, 84, 81, 81, 76, 86, 76, 86, 81, 81, 86, 76, 76, 86, 81, 81, 76, 76, 86, 86, 81, 81, 86, 76, 86, 76, 81, 81, 84, 76, 84, 76, 81, 81, 76, 84, 76, 84, 81, 81, 84, 84, 76, 76, 81, 81, 76, 84, 76, 84, 81, 81, 76, 76, 86, 86, 81, 81, 86, 86, 76, 76, 81, 81, 76, 86, 86, 76, 81, 81, 76, 86, 76, 86, 81, 81, 76, 84, 84, 76, 81, 81, 76, 76, 84, 84, 81, 81, 84, 84, 76, 76, 81, 81, 76, 84, 76, 84, 81, 81, 86, 86, 76, 76, 81, 81, 76, 86, 86, 76, 81, 81, 86, 86, 76, 76, 81, 81, 76, 86, 76, 86, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 82, 82, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 79, 79, 74, 74, 81, 81, 74, 74, 77, 77, 74, 74, 77, 77, 74, 74, 82, 82, 74, 74, 79, 79, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 70, 70, 69, 69, 67, 67, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 72, 72, 69, 69, 70, 70, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 70, 70, 69, 69, 67, 67, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 69, 69, 72, 72, 70, 70, 69, 69, 62, 62, 64, 64, 65, 65, 67, 67, 69, 50, 50, 69, 52, 52, 53, 53, 55, 55, 62, 62, 57, 57, 64, 64, 65, 65, 67, 67, 69, 50, 69, 50, 70, 70, 52, 52, 69, 53, 53, 69, 55, 67, 55, 67, 57, 62, 57, 62, 64, 64, 65, 65, 67, 67, 50, 50, 69, 69, 52, 52, 53, 53, 55, 55, 57, 62, 62, 57, 64, 64, 65, 65, 67, 67, 50, 72, 50, 72, 69, 52, 69, 52, 53, 70, 53, 70, 55, 69, 69, 55, 57, 62, 57, 62, 64, 64, 65, 65, 67, 67, 69, 74, 50, 74, 69, 50, 76, 52, 52, 76, 53, 77, 77, 53, 55, 79, 55, 79, 62, 81, 57, 81, 62, 57, 64, 64, 65, 65, 67, 67, 50, 74, 69, 69, 74, 50, 76, 52, 70, 52, 76, 70, 53, 53, 69, 77, 77, 69, 55, 79, 79, 67, 55, 67, 62, 57, 81, 62, 57, 81, 64, 64, 65, 65, 67, 67, 69, 74, 50, 69, 74, 50, 76, 52, 76, 52, 53, 77, 53, 77, 55, 55, 79, 79, 81, 62, 57, 57, 62, 81, 64, 64, 65, 65, 67, 67, 50, 74, 50, 69, 74, 69, 52, 76, 52, 72, 72, 76, 70, 53, 53, 70, 77, 77, 69, 79, 69, 55, 55, 79, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 58, 58, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 55, 55, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 57, 57, 53, 53, 57, 57, 60, 60, 64, 64, 65, 65, 64, 64, 60, 60, 62, 62, 53, 65, 65, 53, 57, 69, 57, 69, 60, 72, 60, 72, 76, 64, 76, 64, 65, 77, 77, 65, 76, 76, 64, 64, 60, 72, 60, 72, 70, 58, 70, 58, 53, 65, 53, 65, 69, 69, 57, 57, 60, 72, 60, 72, 76, 64, 76, 64, 77, 65, 65, 77, 64, 76, 64, 76, 67, 67, 55, 55, 57, 69, 69, 57, 65, 53, 65, 53, 57, 69, 57, 69, 72, 60, 60, 72, 76, 64, 76, 64, 65, 77, 65, 77, 64, 76, 64, 76, 60, 72, 72, 60, 57, 69, 57, 69, 53, 65, 53, 65, 69, 57, 69, 57, 60, 72, 72, 60, 76, 64, 64, 76, 65, 77, 77, 65, 64, 76, 76, 64, 60, 72, 60, 72, 62, 74, 74, 62, 53, 65, 65, 53, 57, 69, 57, 69, 60, 72, 60, 72, 64, 76, 76, 64, 65, 77, 65, 77, 76, 64, 76, 64, 72, 60, 60, 72, 58, 58, 70, 70, 65, 53, 53, 65, 69, 57, 57, 69, 60, 72, 60, 72, 76, 64, 76, 64, 65, 65, 77, 77, 64, 76, 64, 76, 55, 55, 67, 67, 69, 57, 57, 69, 53, 53, 65, 65, 57, 69, 69, 57, 60, 72, 60, 72, 76, 64, 76, 64, 77, 65, 77, 65, 64, 76, 76, 64, 72, 72, 60, 60, 69, 57, 57, 69, 65, 53, 65, 53, 69, 57, 57, 69, 60, 72, 60, 72, 64, 76, 76, 64, 77, 65, 77, 65, 76, 76, 64, 64, 72, 60, 72, 60, 74, 62, 74, 62, 65, 53, 53, 65, 57, 69, 69, 57, 60, 72, 60, 72, 76, 64, 76, 64, 65, 65, 77, 77, 64, 76, 76, 64, 72, 60, 72, 60, 70, 70, 58, 58, 53, 65, 65, 53, 57, 69, 57, 69, 72, 60, 60, 72, 64, 76, 64, 76, 65, 77, 77, 65, 76, 64, 76, 64, 67, 55, 55, 67, 57, 69, 69, 57, 65, 65, 53, 53, 69, 57, 57, 69, 72, 60, 60, 72, 64, 76, 64, 76, 65, 77, 77, 65, 64, 76, 64, 76, 72, 60, 72, 60, 69, 57, 57, 69, 65, 53, 65, 53, 57, 69, 69, 57, 60, 60, 72, 72, 64, 76, 64, 76, 77, 65, 77, 65, 64, 76, 64, 76, 60, 72, 72, 60, 62, 62, 74, 74, 65, 53, 53, 65, 57, 69, 69, 57, 60, 60, 72, 72, 76, 64, 64, 76, 65, 77, 77, 65, 64, 76, 64, 76, 60, 60, 72, 72, 70, 70, 58, 58, 65, 53, 53, 65, 69, 57, 57, 69, 72, 60, 72, 60, 76, 64, 64, 76, 65, 77, 77, 65, 76, 64, 64, 76, 55, 67, 67, 55, 57, 69, 69, 57, 65, 53, 65, 53, 57, 69, 57, 69, 60, 72, 72, 60, 76, 64, 76, 64, 65, 77, 65, 77, 64, 64, 76, 76, 72, 72, 60, 60, 57, 69, 69, 57, 53, 65, 65, 53, 69, 57, 57, 69, 72, 60, 60, 72, 64, 76, 76, 64, 65, 77, 77, 65, 64, 64, 76, 76, 72, 60, 60, 72, 62, 62, 74, 74, 65, 53, 65, 53, 69, 57, 69, 57, 72, 60, 72, 60, 76, 64, 76, 64, 65, 77, 77, 65, 76, 76, 64, 64, 60, 72, 60, 72, 70, 58, 70, 58, 53, 65, 53, 65, 57, 57, 69, 69, 72, 60, 72, 60, 76, 64, 76, 64, 77, 65, 65, 77, 64, 76, 64, 76, 55, 55, 67, 67, 57, 69, 69, 57, 65, 53, 65, 53, 69, 57, 69, 57, 60, 72, 72, 60, 64, 76, 64, 76, 77, 65, 77, 65, 64, 76, 64, 76, 60, 72, 60, 72, 57, 69, 69, 57, 53, 65, 65, 53, 57, 69, 57, 69, 72, 72, 60, 60, 64, 76, 64, 76, 65, 77, 65, 77, 64, 76, 64, 76, 60, 72, 72, 60, 74, 62, 62, 74, 53, 53, 65, 65, 57, 57, 69, 69, 60, 72, 72, 60, 64, 76, 64, 76, 65, 77, 65, 77, 76, 64, 76, 64, 60, 72, 60, 72, 58, 70, 58, 70, 65, 53, 53, 65, 69, 69, 57, 57, 72, 60, 60, 72, 76, 64, 76, 64, 65, 77, 65, 77, 76, 64, 76, 64, 67, 55, 67, 55, 57, 69, 69, 57, 53, 65, 53, 65, 57, 69, 57, 69, 60, 60, 72, 72, 76, 64, 76, 64, 77, 65, 65, 77, 76, 64, 76, 64, 72, 72, 60, 60, 57, 69, 69, 57, 65, 53, 53, 65, 69, 57, 57, 69, 60, 72, 72, 60, 64, 76, 76, 64, 65, 77, 77, 65, 76, 76, 64, 64, 72, 60, 60, 72, 62, 62, 74, 74, 53, 65, 53, 65, 57, 69, 57, 69, 60, 72, 60, 72, 64, 76, 64, 76, 77, 65, 65, 77, 76, 76, 64, 64, 60, 72, 60, 72, 58, 70, 58, 70, 65, 53, 65, 53, 69, 69, 57, 57, 72, 60, 72, 60, 64, 76, 64, 76, 77, 65, 77, 65, 76, 64, 76, 64, 55, 67, 55, 67, 69, 57, 57, 69, 65, 53, 65, 53, 57, 69, 69, 57, 72, 72, 60, 60, 76, 64, 76, 64, 77, 65, 77, 65, 76, 64, 64, 76, 72, 72, 60, 60, 69, 69, 57, 57, 65, 53, 53, 65, 57, 69, 69, 57, 60, 72, 72, 60, 64, 76, 76, 64, 65, 77, 77, 65, 76, 76, 64, 64, 60, 72, 72, 60, 62, 62, 74, 74, 65, 53, 65, 53, 69, 57, 69, 57, 60, 72, 60, 72, 64, 76, 64, 76, 77, 65, 65, 77, 64, 64, 76, 76, 72, 60, 72, 60, 58, 58, 70, 70, 65, 53, 53, 65, 69, 69, 57, 57, 60, 72, 60, 72, 64, 76, 76, 64, 65, 65, 77, 77, 76, 76, 64, 64, 55, 67, 67, 55, 69, 69, 57, 57, 65, 53, 65, 53, 57, 69, 57, 69, 72, 60, 72, 60, 76, 64, 64, 76, 77, 77, 65, 65, 64, 76, 64, 76, 72, 60, 60, 72, 69, 69, 57, 57, 53, 65, 53, 65, 57, 69, 57, 69, 60, 60, 72, 72, 76, 64, 64, 76, 65, 77, 65, 77, 64, 76, 64, 76, 60, 72, 72, 60, 74, 62, 62, 74, 74, 74, 69, 69, 74, 74, 72, 72, 69, 69, 74, 74, 72, 72, 69, 69, 67, 67, 65, 65, 69, 69, 70, 70, 74, 74, 69, 69, 74, 74, 72, 72, 69, 69, 74, 74, 72, 72, 69, 69, 67, 67, 65, 65, 69, 69, 70, 70, 74, 74, 69, 69, 74, 74, 72, 72, 69, 69, 74, 74, 72, 72, 69, 69, 67, 67, 65, 65, 69, 69, 70, 70, 74, 74, 69, 69, 74, 74, 72, 72, 69, 69, 74, 74, 72, 72, 69, 69, 67, 67, 65, 65, 69, 69, 70, 70, 62, 86, 74, 86, 62, 74, 81, 69, 57, 81, 69, 57, 86, 62, 74, 86, 62, 74, 72, 72, 60, 60, 84, 84, 81, 69, 57, 69, 81, 57, 86, 74, 62, 86, 62, 74, 60, 72, 84, 60, 84, 72, 81, 81, 69, 57, 57, 69, 67, 55, 55, 67, 79, 79, 53, 77, 65, 53, 65, 77, 81, 69, 69, 57, 57, 81, 58, 70, 82, 58, 70, 82, 86, 74, 62, 62, 74, 86, 69, 81, 69, 57, 57, 81, 74, 86, 62, 62, 74, 86, 60, 72, 84, 72, 60, 84, 57, 69, 57, 81, 69, 81, 86, 74, 62, 86, 74, 62, 60, 72, 60, 72, 84, 84, 81, 69, 57, 69, 81, 57, 55, 67, 79, 79, 67, 55, 65, 77, 77, 65, 53, 53, 69, 81, 69, 57, 81, 57, 82, 58, 70, 70, 58, 82, 62, 86, 86, 74, 62, 74, 81, 81, 69, 57, 69, 57, 62, 86, 74, 86, 74, 62, 72, 84, 60, 60, 84, 72, 57, 81, 69, 69, 81, 57, 74, 86, 62, 86, 62, 74, 84, 72, 60, 60, 72, 84, 69, 81, 57, 69, 81, 57, 67, 55, 79, 79, 67, 55, 65, 53, 77, 53, 65, 77, 81, 57, 57, 69, 81, 69, 82, 70, 58, 58, 82, 70, 86, 74, 86, 74, 62, 62, 57, 69, 69, 57, 81, 81, 74, 62, 86, 86, 62, 74, 84, 84, 72, 60, 60, 72, 69, 57, 81, 57, 69, 81, 74, 86, 74, 62, 62, 86, 84, 84, 72, 60, 72, 60, 69, 81, 69, 57, 57, 81, 67, 55, 67, 55, 79, 79, 53, 77, 65, 77, 53, 65, 69, 81, 81, 69, 57, 57, 70, 70, 82, 58, 58, 82, 62, 74, 86, 74, 62, 86, 81, 57, 69, 81, 69, 57, 86, 74, 62, 86, 62, 74, 84, 72, 84, 72, 60, 60, 57, 69, 81, 69, 57, 81, 74, 86, 74, 62, 62, 86, 60, 84, 72, 84, 60, 72, 81, 69, 81, 69, 57, 57, 67, 67, 79, 79, 55, 55, 53, 65, 77, 53, 65, 77, 57, 69, 81, 57, 69, 81, 70, 58, 70, 82, 82, 58, 74, 86, 62, 62, 74, 86, 57, 69, 57, 81, 69, 81, 62, 86, 62, 74, 86, 74, 60, 84, 60, 72, 72, 84, 57, 69, 57, 81, 69, 81, 74, 62, 74, 86, 62, 86, 72, 84, 72, 60, 60, 84, 57, 57, 69, 81, 81, 69, 79, 67, 55, 67, 79, 55, 53, 65, 53, 77, 77, 65, 57, 69, 81, 57, 81, 69, 82, 82, 70, 58, 58, 70, 74, 62, 62, 74, 86, 86, 81, 57, 69, 81, 69, 57, 74, 62, 62, 74, 86, 86, 84, 60, 60, 72, 72, 84, 81, 81, 57, 69, 69, 57, 86, 74, 62, 74, 86, 62, 60, 84, 60, 72, 72, 84, 57, 69, 81, 81, 69, 57, 79, 55, 67, 79, 55, 67, 65, 77, 53, 65, 77, 53, 69, 81, 69, 57, 81, 57, 58, 70, 82, 58, 70, 82, 62, 86, 74, 86, 74, 62, 81, 69, 81, 57, 69, 57, 86, 62, 74, 62, 86, 74, 60, 72, 60, 72, 84, 84, 81, 81, 57, 57, 69, 69, 74, 86, 62, 74, 86, 62, 72, 84, 84, 72, 60, 60, 57, 81, 69, 81, 69, 57, 67, 79, 79, 67, 55, 55, 53, 77, 65, 65, 77, 53, 57, 81, 81, 69, 57, 69, 58, 82, 70, 58, 70, 82, 50, 50, 50, 50, 50, 50, 53, 53, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 48, 48, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 55, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 58, 58, 55, 55, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 60, 48, 62, 65, 69, 70, 72, 62, 69, 72, 70, 62, 69, 70, 72, 62, 69, 70, 72, 69, 65, 62, 70, 72, 69, 62, 70, 72, 62, 69, 72, 70, 62, 69, 72, 70, 62, 65, 69, 70, 72, 62, 69, 70, 72, 69, 62, 72, 70, 69, 62, 72, 70, 77, 62, 65, 69, 74, 81, 65, 62, 69, 74, 77, 81, 81, 77, 74, 69, 65, 62, 62, 65, 69, 81, 77, 74, 77, 81, 74, 62, 65, 69, 81, 77, 74, 69, 65, 62, 77, 81, 74, 69, 65, 62, 86, 82, 77, 74, 70, 65, 65, 69, 62, 77, 81, 74, 65, 69, 62, 77, 81, 74, 62, 65, 69, 74, 77, 81, 81, 74, 77, 65, 62, 69, 62, 65, 69, 74, 77, 81, 77, 74, 81, 65, 62, 69, 65, 69, 62, 81, 74, 77, 86, 82, 77, 74, 70, 65, 62, 69, 65, 74, 81, 77, 81, 77, 74, 69, 65, 62, 77, 74, 81, 65, 62, 69, 65, 69, 62, 77, 81, 74, 81, 77, 74, 69, 65, 62, 62, 69, 65, 77, 81, 74, 81, 77, 74, 69, 65, 62, 70, 74, 65, 82, 86, 77, 65, 69, 62, 77, 81, 74, 81, 77, 74, 69, 65, 62, 62, 69, 65, 77, 81, 74, 65, 69, 62, 77, 81, 74, 81, 77, 74, 69, 65, 62, 81, 77, 74, 65, 62, 69, 81, 77, 74, 69, 65, 62, 70, 86, 82, 77, 74, 65, 48, 47 };
unsigned char noteVelocities[] = {};
unsigned char notePans[] = {};
short automationDeltaTimes[] = { 0, 384, 1536, 671, 2016, 1536, 1920, 384, 5376, 10176, 0, 8448, 9216, 8927, 0, 1920, 4224, 1920, 384, 4608, 13632, 0, 1920, 6144, 384, 2880, 576, 1920, 5952, 6624, 96, 11520, 9216, 2879, 0, 4992, 3072, 3456, 17184, 0, 8448, 5376, 12960, 0, 1920, 3072, 3072, 18336, 0, 14592, 96, 6048, 9024, 96, 1920, 1152, 767, 768, 18144, 0, 20736, 192, 192, 768, 0, 8448, 5376, 14784, 96, 23808 };
unsigned char automationValues[] = { 0, 221, 214, 134, 134, 120, 255, 167, 161, 0, 0, 221, 201, 0, 201, 255, 174, 255, 181, 167, 0, 0, 134, 255, 221, 214, 93, 93, 80, 0, 0, 53, 51, 0, 0, 255, 255, 255, 0, 0, 181, 167, 0, 0, 174, 167, 228, 0, 0, 53, 241, 255, 0, 190, 120, 130, 227, 126, 0, 255, 255, 73, 13, 0, 0, 60, 154, 0, 73, 67 };
const float staticBuffer[] = { 2, 12.69662, 0, 0.1, 1, 0.1104237, 0.005, 4.106232, 0.5, 4, 0.009830507, 5000, 1053.747, 488.4252, 0.6642373, 693.5545, 1373.557, 904.1541, 2735.241, 651.6362, 1.23431, 0.1583898, 0.1778814, 3, 3.5, 1.9979, 1.0023, 0.2, 0.6508474, 0.1365254, 33.30364, 3664.57, 0.503937, 0.40625, 0.375, 0.8359375, 5, 1.58, 96.9855, 32.49097, -0.6844254, 9.000061, 6894.25, 0.7922274, 0.1601563, 0.38, -0.007874016, 0.6062992, 0.2578125, 0.25, 0.1875, 8, 18, 336.1247, 0.2540678, 867.8516, 773.7764, 1.030194, 0.8405932, 0.4729569, 0.2736592, 0.4451695, 22.35409, 0.34, 2.5, 377.62, 0.3069491, 819.3945, 5323.814, 4733.623, -1, 215, 2010.989, 0.34375, 0.5625, 111.2262, 48.78318, 152.9833, 1.477966, 4.07, 161.9747, 6.17, -53.26, -25.83, -14.64, 5.07, -6.601, -51.07, -55.75, 636.8015, -0.9, 0.9, 3.252966, 0.1536995, 86.53412, 28.11457, 4111.106, 1.071306, 219.1933, 261.8265, 11350.02, 2.145409, 1.679799, 132.4599, 5907.723, 2.175339, 2.18, 0.9922881, 314.4223, 120.5775, 130.0359, 1397.074, 3064.684, 5731.896, 0.9205932, 0.861356, 0.6491567, 1.004096, 149.6015, 180.7216, 0.4709322, 154.3658, 1600, 0.6000832, 57, 1000, 104, 1087.015, 101.177, 73.48685, 1492.844, 1504.943, 3388.556, 0.7857627, 0.1451479 };

InputPlugData *track0PolyNodes_0Inputs = nullptr;
int track0PolyNodes_0Outputs[] = { 45 };
InputNodeData track0PolyNodes_0 = { 0, 0, track0PolyNodes_0Inputs, 1, track0PolyNodes_0Outputs };
InputPlugData track0PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 45), InputPlugData(InputPlugMode::Static, 0) };
int track0PolyNodes_1Outputs[] = { 44 };
InputNodeData track0PolyNodes_1 = { 1, 2, track0PolyNodes_1Inputs, 1, track0PolyNodes_1Outputs };
InputPlugData track0PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Static, 1), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_2Outputs[] = { 42 };
InputNodeData track0PolyNodes_2 = { 2, 2, track0PolyNodes_2Inputs, 1, track0PolyNodes_2Outputs };
InputPlugData track0PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 3) };
int track0PolyNodes_3Outputs[] = { 41 };
InputNodeData track0PolyNodes_3 = { 3, 2, track0PolyNodes_3Inputs, 1, track0PolyNodes_3Outputs };
InputPlugData track0PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 44), InputPlugData(InputPlugMode::Static, 4) };
int track0PolyNodes_4Outputs[] = { 43 };
InputNodeData track0PolyNodes_4 = { 4, 2, track0PolyNodes_4Inputs, 1, track0PolyNodes_4Outputs };
InputPlugData track0PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 43), InputPlugData(InputPlugMode::Static, 5) };
int track0PolyNodes_5Outputs[] = { 39 };
InputNodeData track0PolyNodes_5 = { 1, 2, track0PolyNodes_5Inputs, 1, track0PolyNodes_5Outputs };
InputPlugData track0PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 42), InputPlugData(InputPlugMode::Static, 6) };
int track0PolyNodes_6Outputs[] = { 38 };
InputNodeData track0PolyNodes_6 = { 1, 2, track0PolyNodes_6Inputs, 1, track0PolyNodes_6Outputs };
InputPlugData track0PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 41) };
int track0PolyNodes_7Outputs[] = { 37 };
InputNodeData track0PolyNodes_7 = { 5, 1, track0PolyNodes_7Inputs, 1, track0PolyNodes_7Outputs };
InputPlugData track0PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Static, 7), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_8Outputs[] = { 17 };
InputNodeData track0PolyNodes_8 = { 6, 2, track0PolyNodes_8Inputs, 1, track0PolyNodes_8Outputs };
InputPlugData track0PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 8) };
int track0PolyNodes_9Outputs[] = { 34 };
InputNodeData track0PolyNodes_9 = { 1, 2, track0PolyNodes_9Inputs, 1, track0PolyNodes_9Outputs };
InputPlugData track0PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Dynamic, 38), InputPlugData(InputPlugMode::Dynamic, 39), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_10Outputs[] = { 35 };
InputNodeData track0PolyNodes_10 = { 7, 4, track0PolyNodes_10Inputs, 1, track0PolyNodes_10Outputs };
InputPlugData track0PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Static, 8) };
int track0PolyNodes_11Outputs[] = { 40 };
InputNodeData track0PolyNodes_11 = { 1, 2, track0PolyNodes_11Inputs, 1, track0PolyNodes_11Outputs };
InputPlugData track0PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 34), InputPlugData(InputPlugMode::Dynamic, 35) };
int track0PolyNodes_12Outputs[] = { 30 };
InputNodeData track0PolyNodes_12 = { 1, 2, track0PolyNodes_12Inputs, 1, track0PolyNodes_12Outputs };
InputPlugData track0PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 40), InputPlugData(InputPlugMode::Static, 8) };
int track0PolyNodes_13Outputs[] = { 36 };
InputNodeData track0PolyNodes_13 = { 3, 2, track0PolyNodes_13Inputs, 1, track0PolyNodes_13Outputs };
InputPlugData track0PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Static, 0), InputPlugData(InputPlugMode::Dynamic, 30) };
int track0PolyNodes_14Outputs[] = { 33 };
InputNodeData track0PolyNodes_14 = { 1, 2, track0PolyNodes_14Inputs, 1, track0PolyNodes_14Outputs };
InputPlugData track0PolyNodes_15Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Static, 9) };
int track0PolyNodes_15Outputs[] = { 32 };
InputNodeData track0PolyNodes_15 = { 8, 2, track0PolyNodes_15Inputs, 1, track0PolyNodes_15Outputs };
InputPlugData track0PolyNodes_16Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 36), InputPlugData(InputPlugMode::Static, 10) };
int track0PolyNodes_16Outputs[] = { 31 };
InputNodeData track0PolyNodes_16 = { 1, 2, track0PolyNodes_16Inputs, 1, track0PolyNodes_16Outputs };
InputPlugData track0PolyNodes_17Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 33), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_17Outputs[] = { 29 };
InputNodeData track0PolyNodes_17 = { 9, 2, track0PolyNodes_17Inputs, 1, track0PolyNodes_17Outputs };
InputPlugData track0PolyNodes_18Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 11), InputPlugData(InputPlugMode::Static, 12), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 13) };
int track0PolyNodes_18Outputs[] = { 28 };
InputNodeData track0PolyNodes_18 = { 10, 5, track0PolyNodes_18Inputs, 1, track0PolyNodes_18Outputs };
InputPlugData track0PolyNodes_19Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Dynamic, 31) };
int track0PolyNodes_19Outputs[] = { 26 };
InputNodeData track0PolyNodes_19 = { 11, 2, track0PolyNodes_19Inputs, 1, track0PolyNodes_19Outputs };
InputPlugData track0PolyNodes_20Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 29), InputPlugData(InputPlugMode::Static, 14) };
int track0PolyNodes_20Outputs[] = { 25 };
InputNodeData track0PolyNodes_20 = { 1, 2, track0PolyNodes_20Inputs, 1, track0PolyNodes_20Outputs };
InputPlugData track0PolyNodes_21Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_21Outputs[] = { 27 };
InputNodeData track0PolyNodes_21 = { 6, 2, track0PolyNodes_21Inputs, 1, track0PolyNodes_21Outputs };
InputPlugData track0PolyNodes_22Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 28), InputPlugData(InputPlugMode::Static, 15) };
int track0PolyNodes_22Outputs[] = { 24 };
InputNodeData track0PolyNodes_22 = { 1, 2, track0PolyNodes_22Inputs, 1, track0PolyNodes_22Outputs };
InputPlugData track0PolyNodes_23Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 25), InputPlugData(InputPlugMode::Dynamic, 26), InputPlugData(InputPlugMode::Dynamic, 27), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_23Outputs[] = { 23 };
InputNodeData track0PolyNodes_23 = { 7, 4, track0PolyNodes_23Inputs, 1, track0PolyNodes_23Outputs };
InputPlugData track0PolyNodes_24Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 16), InputPlugData(InputPlugMode::Static, 17), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 18) };
int track0PolyNodes_24Outputs[] = { 7 };
InputNodeData track0PolyNodes_24 = { 10, 5, track0PolyNodes_24Inputs, 1, track0PolyNodes_24Outputs };
InputPlugData track0PolyNodes_25Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 24), InputPlugData(InputPlugMode::Static, 19) };
int track0PolyNodes_25Outputs[] = { 22 };
InputNodeData track0PolyNodes_25 = { 3, 2, track0PolyNodes_25Inputs, 1, track0PolyNodes_25Outputs };
InputPlugData track0PolyNodes_26Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Dynamic, 23) };
int track0PolyNodes_26Outputs[] = { 21 };
InputNodeData track0PolyNodes_26 = { 1, 2, track0PolyNodes_26Inputs, 1, track0PolyNodes_26Outputs };
InputPlugData track0PolyNodes_27Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 21), InputPlugData(InputPlugMode::Dynamic, 22), InputPlugData(InputPlugMode::Static, 20) };
int track0PolyNodes_27Outputs[] = { 18, 16, 19, 20 };
InputNodeData track0PolyNodes_27 = { 12, 3, track0PolyNodes_27Inputs, 4, track0PolyNodes_27Outputs };
InputPlugData track0PolyNodes_28Inputs[] = { InputPlugData(InputPlugMode::Static, 21), InputPlugData(InputPlugMode::Dynamic, 17) };
int track0PolyNodes_28Outputs[] = { 15 };
InputNodeData track0PolyNodes_28 = { 1, 2, track0PolyNodes_28Inputs, 1, track0PolyNodes_28Outputs };
InputPlugData track0PolyNodes_29Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 16), InputPlugData(InputPlugMode::Static, 22) };
int track0PolyNodes_29Outputs[] = { 14 };
InputNodeData track0PolyNodes_29 = { 1, 2, track0PolyNodes_29Inputs, 1, track0PolyNodes_29Outputs };
InputPlugData track0PolyNodes_30Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Dynamic, 15) };
int track0PolyNodes_30Outputs[] = { 12, 13 };
InputNodeData track0PolyNodes_30 = { 13, 2, track0PolyNodes_30Inputs, 2, track0PolyNodes_30Outputs };
InputPlugData track0PolyNodes_31Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_31Outputs[] = { 11 };
InputNodeData track0PolyNodes_31 = { 7, 4, track0PolyNodes_31Inputs, 1, track0PolyNodes_31Outputs };
InputPlugData track0PolyNodes_32Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_32Outputs[] = { 10 };
InputNodeData track0PolyNodes_32 = { 7, 4, track0PolyNodes_32Inputs, 1, track0PolyNodes_32Outputs };
InputPlugData track0PolyNodes_33Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Static, 4) };
int track0PolyNodes_33Outputs[] = { 9 };
InputNodeData track0PolyNodes_33 = { 8, 2, track0PolyNodes_33Inputs, 1, track0PolyNodes_33Outputs };
InputPlugData track0PolyNodes_34Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 4) };
int track0PolyNodes_34Outputs[] = { 8 };
InputNodeData track0PolyNodes_34 = { 8, 2, track0PolyNodes_34Inputs, 1, track0PolyNodes_34Outputs };
InputPlugData track0PolyNodes_35Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Parameter, 0) };
int track0PolyNodes_35Outputs[] = { 6 };
InputNodeData track0PolyNodes_35 = { 1, 2, track0PolyNodes_35Inputs, 1, track0PolyNodes_35Outputs };
InputPlugData track0PolyNodes_36Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Parameter, 0) };
int track0PolyNodes_36Outputs[] = { 5 };
InputNodeData track0PolyNodes_36 = { 1, 2, track0PolyNodes_36Inputs, 1, track0PolyNodes_36Outputs };
InputPlugData track0PolyNodes_37Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track0PolyNodes_37Outputs[] = { 4 };
InputNodeData track0PolyNodes_37 = { 7, 4, track0PolyNodes_37Inputs, 1, track0PolyNodes_37Outputs };
InputNodeData track0PolyNodes[] = { track0PolyNodes_0, track0PolyNodes_1, track0PolyNodes_2, track0PolyNodes_3, track0PolyNodes_4, track0PolyNodes_5, track0PolyNodes_6, track0PolyNodes_7, track0PolyNodes_8, track0PolyNodes_9, track0PolyNodes_10, track0PolyNodes_11, track0PolyNodes_12, track0PolyNodes_13, track0PolyNodes_14, track0PolyNodes_15, track0PolyNodes_16, track0PolyNodes_17, track0PolyNodes_18, track0PolyNodes_19, track0PolyNodes_20, track0PolyNodes_21, track0PolyNodes_22, track0PolyNodes_23, track0PolyNodes_24, track0PolyNodes_25, track0PolyNodes_26, track0PolyNodes_27, track0PolyNodes_28, track0PolyNodes_29, track0PolyNodes_30, track0PolyNodes_31, track0PolyNodes_32, track0PolyNodes_33, track0PolyNodes_34, track0PolyNodes_35, track0PolyNodes_36, track0PolyNodes_37,  };
InputPlugData track0PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 6) };
int track0PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track0Poly = { 38, track0PolyNodes, 3, track0PolyNodesInputs, 4, track0PolyNodesOutputs, 46 };
InputNodeData *track0FxNodes = nullptr;
InputPlugData track0FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track0FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track0Fx = { 0, track0FxNodes, 2, track0FxNodesInputs, 2, track0FxNodesOutputs, 2 };
InputParameterData track0Param0 = { 10, automationDeltaTimes + 0, automationValues + 0 };
InputParameterData track0Params[] = { track0Param0,  };
InputTrackData track0 = {
    255,
    16, track0Poly, track0Fx,
    1, track0Params,
    134, noteDeltaTimes + 0, noteDurations + 0, notes + 0, noteVelocities + 0, notePans + 0,
};
InputPlugData track1PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track1PolyNodes_0Outputs[] = { 17 };
InputNodeData track1PolyNodes_0 = { 5, 1, track1PolyNodes_0Inputs, 1, track1PolyNodes_0Outputs };
InputPlugData track1PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Static, 23), InputPlugData(InputPlugMode::Static, 2) };
int track1PolyNodes_1Outputs[] = { 18 };
InputNodeData track1PolyNodes_1 = { 9, 2, track1PolyNodes_1Inputs, 1, track1PolyNodes_1Outputs };
InputPlugData track1PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Static, 24), InputPlugData(InputPlugMode::Static, 2) };
int track1PolyNodes_2Outputs[] = { 19 };
InputNodeData track1PolyNodes_2 = { 6, 2, track1PolyNodes_2Inputs, 1, track1PolyNodes_2Outputs };
InputPlugData track1PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Static, 25), InputPlugData(InputPlugMode::Dynamic, 17) };
int track1PolyNodes_3Outputs[] = { 13 };
InputNodeData track1PolyNodes_3 = { 1, 2, track1PolyNodes_3Inputs, 1, track1PolyNodes_3Outputs };
InputPlugData track1PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Static, 26) };
int track1PolyNodes_4Outputs[] = { 14 };
InputNodeData track1PolyNodes_4 = { 1, 2, track1PolyNodes_4Inputs, 1, track1PolyNodes_4Outputs };
InputPlugData track1PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Static, 8), InputPlugData(InputPlugMode::Dynamic, 18) };
int track1PolyNodes_5Outputs[] = { 15 };
InputNodeData track1PolyNodes_5 = { 1, 2, track1PolyNodes_5Inputs, 1, track1PolyNodes_5Outputs };
InputPlugData track1PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Static, 27), InputPlugData(InputPlugMode::Dynamic, 19) };
int track1PolyNodes_6Outputs[] = { 16 };
InputNodeData track1PolyNodes_6 = { 1, 2, track1PolyNodes_6Inputs, 1, track1PolyNodes_6Outputs };
InputPlugData track1PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 2) };
int track1PolyNodes_7Outputs[] = { 9 };
InputNodeData track1PolyNodes_7 = { 9, 2, track1PolyNodes_7Inputs, 1, track1PolyNodes_7Outputs };
InputPlugData track1PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Static, 28) };
int track1PolyNodes_8Outputs[] = { 10 };
InputNodeData track1PolyNodes_8 = { 9, 2, track1PolyNodes_8Inputs, 1, track1PolyNodes_8Outputs };
InputPlugData track1PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Static, 8), InputPlugData(InputPlugMode::Dynamic, 15) };
int track1PolyNodes_9Outputs[] = { 11 };
InputNodeData track1PolyNodes_9 = { 3, 2, track1PolyNodes_9Inputs, 1, track1PolyNodes_9Outputs };
InputPlugData track1PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Static, 8), InputPlugData(InputPlugMode::Dynamic, 16) };
int track1PolyNodes_10Outputs[] = { 12 };
InputNodeData track1PolyNodes_10 = { 3, 2, track1PolyNodes_10Inputs, 1, track1PolyNodes_10Outputs };
InputPlugData track1PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 10) };
int track1PolyNodes_11Outputs[] = { 7 };
InputNodeData track1PolyNodes_11 = { 3, 2, track1PolyNodes_11Inputs, 1, track1PolyNodes_11Outputs };
InputPlugData track1PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Dynamic, 12) };
int track1PolyNodes_12Outputs[] = { 8 };
InputNodeData track1PolyNodes_12 = { 1, 2, track1PolyNodes_12Inputs, 1, track1PolyNodes_12Outputs };
InputPlugData track1PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 29) };
int track1PolyNodes_13Outputs[] = { 5 };
InputNodeData track1PolyNodes_13 = { 1, 2, track1PolyNodes_13Inputs, 1, track1PolyNodes_13Outputs };
InputPlugData track1PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Static, 30), InputPlugData(InputPlugMode::Static, 31), InputPlugData(InputPlugMode::Dynamic, 8) };
int track1PolyNodes_14Outputs[] = { 6 };
InputNodeData track1PolyNodes_14 = { 14, 3, track1PolyNodes_14Inputs, 1, track1PolyNodes_14Outputs };
InputPlugData track1PolyNodes_15Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Static, 8) };
int track1PolyNodes_15Outputs[] = { 4 };
InputNodeData track1PolyNodes_15 = { 15, 3, track1PolyNodes_15Inputs, 1, track1PolyNodes_15Outputs };
InputNodeData track1PolyNodes[] = { track1PolyNodes_0, track1PolyNodes_1, track1PolyNodes_2, track1PolyNodes_3, track1PolyNodes_4, track1PolyNodes_5, track1PolyNodes_6, track1PolyNodes_7, track1PolyNodes_8, track1PolyNodes_9, track1PolyNodes_10, track1PolyNodes_11, track1PolyNodes_12, track1PolyNodes_13, track1PolyNodes_14, track1PolyNodes_15,  };
InputPlugData track1PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 4) };
int track1PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track1Poly = { 16, track1PolyNodes, 3, track1PolyNodesInputs, 4, track1PolyNodesOutputs, 20 };
InputPlugData track1FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 32) };
int track1FxNodes_0Outputs[] = { 8 };
InputNodeData track1FxNodes_0 = { 1, 2, track1FxNodes_0Inputs, 1, track1FxNodes_0Outputs };
InputPlugData track1FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 33), InputPlugData(InputPlugMode::Static, 33) };
int track1FxNodes_1Outputs[] = { 14 };
InputNodeData track1FxNodes_1 = { 16, 3, track1FxNodes_1Inputs, 1, track1FxNodes_1Outputs };
InputPlugData track1FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 14) };
int track1FxNodes_2Outputs[] = { 13 };
InputNodeData track1FxNodes_2 = { 3, 2, track1FxNodes_2Inputs, 1, track1FxNodes_2Outputs };
InputPlugData track1FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 34), InputPlugData(InputPlugMode::Static, 34) };
int track1FxNodes_3Outputs[] = { 11 };
InputNodeData track1FxNodes_3 = { 16, 3, track1FxNodes_3Inputs, 1, track1FxNodes_3Outputs };
InputPlugData track1FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Static, 32), InputPlugData(InputPlugMode::Dynamic, 11) };
int track1FxNodes_4Outputs[] = { 9 };
InputNodeData track1FxNodes_4 = { 1, 2, track1FxNodes_4Inputs, 1, track1FxNodes_4Outputs };
InputPlugData track1FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 35) };
int track1FxNodes_5Outputs[] = { 6 };
InputNodeData track1FxNodes_5 = { 1, 2, track1FxNodes_5Inputs, 1, track1FxNodes_5Outputs };
InputPlugData track1FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Static, 35), InputPlugData(InputPlugMode::Dynamic, 9) };
int track1FxNodes_6Outputs[] = { 7 };
InputNodeData track1FxNodes_6 = { 1, 2, track1FxNodes_6Inputs, 1, track1FxNodes_6Outputs };
InputPlugData track1FxNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 0) };
int track1FxNodes_7Outputs[] = { 4 };
InputNodeData track1FxNodes_7 = { 3, 2, track1FxNodes_7Inputs, 1, track1FxNodes_7Outputs };
InputPlugData track1FxNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 7) };
int track1FxNodes_8Outputs[] = { 5 };
InputNodeData track1FxNodes_8 = { 3, 2, track1FxNodes_8Inputs, 1, track1FxNodes_8Outputs };
InputPlugData track1FxNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 9) };
int track1FxNodes_9Outputs[] = { 12 };
InputNodeData track1FxNodes_9 = { 3, 2, track1FxNodes_9Inputs, 1, track1FxNodes_9Outputs };
InputPlugData track1FxNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track1FxNodes_10Outputs[] = { 2 };
InputNodeData track1FxNodes_10 = { 1, 2, track1FxNodes_10Inputs, 1, track1FxNodes_10Outputs };
InputPlugData track1FxNodes_11Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 5) };
int track1FxNodes_11Outputs[] = { 3 };
InputNodeData track1FxNodes_11 = { 1, 2, track1FxNodes_11Inputs, 1, track1FxNodes_11Outputs };
InputPlugData track1FxNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 34), InputPlugData(InputPlugMode::Static, 34) };
int track1FxNodes_12Outputs[] = { 10 };
InputNodeData track1FxNodes_12 = { 16, 3, track1FxNodes_12Inputs, 1, track1FxNodes_12Outputs };
InputNodeData track1FxNodes[] = { track1FxNodes_0, track1FxNodes_1, track1FxNodes_2, track1FxNodes_3, track1FxNodes_4, track1FxNodes_5, track1FxNodes_6, track1FxNodes_7, track1FxNodes_8, track1FxNodes_9, track1FxNodes_10, track1FxNodes_11, track1FxNodes_12,  };
InputPlugData track1FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track1FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track1Fx = { 13, track1FxNodes, 2, track1FxNodesInputs, 2, track1FxNodesOutputs, 15 };
InputParameterData track1Param0 = { 4, automationDeltaTimes + 10, automationValues + 10 };
InputParameterData track1Params[] = { track1Param0,  };
InputTrackData track1 = {
    255,
    16, track1Poly, track1Fx,
    1, track1Params,
    486, noteDeltaTimes + 134, noteDurations + 134, notes + 134, noteVelocities + 134, notePans + 134,
};
InputPlugData track2PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 36), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track2PolyNodes_0Outputs[] = { 15 };
InputNodeData track2PolyNodes_0 = { 10, 5, track2PolyNodes_0Inputs, 1, track2PolyNodes_0Outputs };
InputPlugData track2PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track2PolyNodes_1Outputs[] = { 13 };
InputNodeData track2PolyNodes_1 = { 5, 1, track2PolyNodes_1Inputs, 1, track2PolyNodes_1Outputs };
InputPlugData track2PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 37), InputPlugData(InputPlugMode::Dynamic, 15) };
int track2PolyNodes_2Outputs[] = { 14 };
InputNodeData track2PolyNodes_2 = { 14, 3, track2PolyNodes_2Inputs, 1, track2PolyNodes_2Outputs };
InputPlugData track2PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14) };
int track2PolyNodes_3Outputs[] = { 12 };
InputNodeData track2PolyNodes_3 = { 1, 2, track2PolyNodes_3Inputs, 1, track2PolyNodes_3Outputs };
InputPlugData track2PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 2) };
int track2PolyNodes_4Outputs[] = { 11 };
InputNodeData track2PolyNodes_4 = { 17, 2, track2PolyNodes_4Inputs, 1, track2PolyNodes_4Outputs };
InputPlugData track2PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 38), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 39) };
int track2PolyNodes_5Outputs[] = { 6 };
InputNodeData track2PolyNodes_5 = { 10, 5, track2PolyNodes_5Inputs, 1, track2PolyNodes_5Outputs };
InputPlugData track2PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Static, 40), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track2PolyNodes_6Outputs[] = { 10 };
InputNodeData track2PolyNodes_6 = { 7, 4, track2PolyNodes_6Inputs, 1, track2PolyNodes_6Outputs };
InputPlugData track2PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 10) };
int track2PolyNodes_7Outputs[] = { 8 };
InputNodeData track2PolyNodes_7 = { 1, 2, track2PolyNodes_7Inputs, 1, track2PolyNodes_7Outputs };
InputPlugData track2PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Static, 41), InputPlugData(InputPlugMode::Static, 42), InputPlugData(InputPlugMode::Dynamic, 6) };
int track2PolyNodes_8Outputs[] = { 9 };
InputNodeData track2PolyNodes_8 = { 14, 3, track2PolyNodes_8Inputs, 1, track2PolyNodes_8Outputs };
InputPlugData track2PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Static, 43) };
int track2PolyNodes_9Outputs[] = { 7 };
InputNodeData track2PolyNodes_9 = { 15, 3, track2PolyNodes_9Inputs, 1, track2PolyNodes_9Outputs };
InputPlugData track2PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 6) };
int track2PolyNodes_10Outputs[] = { 4 };
InputNodeData track2PolyNodes_10 = { 3, 2, track2PolyNodes_10Inputs, 1, track2PolyNodes_10Outputs };
InputPlugData track2PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 3) };
int track2PolyNodes_11Outputs[] = { 5 };
InputNodeData track2PolyNodes_11 = { 1, 2, track2PolyNodes_11Inputs, 1, track2PolyNodes_11Outputs };
InputNodeData track2PolyNodes[] = { track2PolyNodes_0, track2PolyNodes_1, track2PolyNodes_2, track2PolyNodes_3, track2PolyNodes_4, track2PolyNodes_5, track2PolyNodes_6, track2PolyNodes_7, track2PolyNodes_8, track2PolyNodes_9, track2PolyNodes_10, track2PolyNodes_11,  };
InputPlugData track2PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track2PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track2Poly = { 12, track2PolyNodes, 3, track2PolyNodesInputs, 4, track2PolyNodesOutputs, 16 };
InputPlugData track2FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 44), InputPlugData(InputPlugMode::Static, 44) };
int track2FxNodes_0Outputs[] = { 36 };
InputNodeData track2FxNodes_0 = { 16, 3, track2FxNodes_0Inputs, 1, track2FxNodes_0Outputs };
InputPlugData track2FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track2FxNodes_1Outputs[] = { 37 };
InputNodeData track2FxNodes_1 = { 16, 3, track2FxNodes_1Inputs, 1, track2FxNodes_1Outputs };
InputPlugData track2FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Dynamic, 37) };
int track2FxNodes_2Outputs[] = { 34 };
InputNodeData track2FxNodes_2 = { 3, 2, track2FxNodes_2Inputs, 1, track2FxNodes_2Outputs };
InputPlugData track2FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Dynamic, 36) };
int track2FxNodes_3Outputs[] = { 33 };
InputNodeData track2FxNodes_3 = { 3, 2, track2FxNodes_3Inputs, 1, track2FxNodes_3Outputs };
InputPlugData track2FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 34), InputPlugData(InputPlugMode::Static, 34), InputPlugData(InputPlugMode::Static, 34) };
int track2FxNodes_4Outputs[] = { 28 };
InputNodeData track2FxNodes_4 = { 16, 3, track2FxNodes_4Inputs, 1, track2FxNodes_4Outputs };
InputPlugData track2FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 33), InputPlugData(InputPlugMode::Static, 45), InputPlugData(InputPlugMode::Static, 45) };
int track2FxNodes_5Outputs[] = { 27 };
InputNodeData track2FxNodes_5 = { 16, 3, track2FxNodes_5Inputs, 1, track2FxNodes_5Outputs };
InputPlugData track2FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 26), InputPlugData(InputPlugMode::Static, 46) };
int track2FxNodes_6Outputs[] = { 20 };
InputNodeData track2FxNodes_6 = { 1, 2, track2FxNodes_6Inputs, 1, track2FxNodes_6Outputs };
InputPlugData track2FxNodes_7Inputs[] = { InputPlugData(InputPlugMode::Static, 32), InputPlugData(InputPlugMode::Dynamic, 28) };
int track2FxNodes_7Outputs[] = { 22 };
InputNodeData track2FxNodes_7 = { 1, 2, track2FxNodes_7Inputs, 1, track2FxNodes_7Outputs };
InputPlugData track2FxNodes_8Inputs[] = { InputPlugData(InputPlugMode::Static, 47), InputPlugData(InputPlugMode::Dynamic, 27) };
int track2FxNodes_8Outputs[] = { 21 };
InputNodeData track2FxNodes_8 = { 1, 2, track2FxNodes_8Inputs, 1, track2FxNodes_8Outputs };
InputPlugData track2FxNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track2FxNodes_9Outputs[] = { 38 };
InputNodeData track2FxNodes_9 = { 16, 3, track2FxNodes_9Inputs, 1, track2FxNodes_9Outputs };
InputPlugData track2FxNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Dynamic, 38) };
int track2FxNodes_10Outputs[] = { 35 };
InputNodeData track2FxNodes_10 = { 3, 2, track2FxNodes_10Inputs, 1, track2FxNodes_10Outputs };
InputPlugData track2FxNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 22) };
int track2FxNodes_11Outputs[] = { 31 };
InputNodeData track2FxNodes_11 = { 3, 2, track2FxNodes_11Inputs, 1, track2FxNodes_11Outputs };
InputPlugData track2FxNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 21) };
int track2FxNodes_12Outputs[] = { 30 };
InputNodeData track2FxNodes_12 = { 3, 2, track2FxNodes_12Inputs, 1, track2FxNodes_12Outputs };
InputPlugData track2FxNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 31), InputPlugData(InputPlugMode::Static, 34), InputPlugData(InputPlugMode::Static, 34) };
int track2FxNodes_13Outputs[] = { 25 };
InputNodeData track2FxNodes_13 = { 16, 3, track2FxNodes_13Inputs, 1, track2FxNodes_13Outputs };
InputPlugData track2FxNodes_14Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 35), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 4) };
int track2FxNodes_14Outputs[] = { 29 };
InputNodeData track2FxNodes_14 = { 16, 3, track2FxNodes_14Inputs, 1, track2FxNodes_14Outputs };
InputPlugData track2FxNodes_15Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Static, 45), InputPlugData(InputPlugMode::Static, 45) };
int track2FxNodes_15Outputs[] = { 24 };
InputNodeData track2FxNodes_15 = { 16, 3, track2FxNodes_15Inputs, 1, track2FxNodes_15Outputs };
InputPlugData track2FxNodes_16Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 24), InputPlugData(InputPlugMode::Static, 47) };
int track2FxNodes_16Outputs[] = { 18 };
InputNodeData track2FxNodes_16 = { 1, 2, track2FxNodes_16Inputs, 1, track2FxNodes_16Outputs };
InputPlugData track2FxNodes_17Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 25), InputPlugData(InputPlugMode::Static, 32) };
int track2FxNodes_17Outputs[] = { 19 };
InputNodeData track2FxNodes_17 = { 1, 2, track2FxNodes_17Inputs, 1, track2FxNodes_17Outputs };
InputPlugData track2FxNodes_18Inputs[] = { InputPlugData(InputPlugMode::Static, 46), InputPlugData(InputPlugMode::Dynamic, 29) };
int track2FxNodes_18Outputs[] = { 23 };
InputNodeData track2FxNodes_18 = { 1, 2, track2FxNodes_18Inputs, 1, track2FxNodes_18Outputs };
InputPlugData track2FxNodes_19Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Static, 48) };
int track2FxNodes_19Outputs[] = { 12 };
InputNodeData track2FxNodes_19 = { 1, 2, track2FxNodes_19Inputs, 1, track2FxNodes_19Outputs };
InputPlugData track2FxNodes_20Inputs[] = { InputPlugData(InputPlugMode::Static, 48), InputPlugData(InputPlugMode::Dynamic, 21) };
int track2FxNodes_20Outputs[] = { 15 };
InputNodeData track2FxNodes_20 = { 1, 2, track2FxNodes_20Inputs, 1, track2FxNodes_20Outputs };
InputPlugData track2FxNodes_21Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 49) };
int track2FxNodes_21Outputs[] = { 13 };
InputNodeData track2FxNodes_21 = { 1, 2, track2FxNodes_21Inputs, 1, track2FxNodes_21Outputs };
InputPlugData track2FxNodes_22Inputs[] = { InputPlugData(InputPlugMode::Static, 50), InputPlugData(InputPlugMode::Dynamic, 23) };
int track2FxNodes_22Outputs[] = { 17 };
InputNodeData track2FxNodes_22 = { 1, 2, track2FxNodes_22Inputs, 1, track2FxNodes_22Outputs };
InputPlugData track2FxNodes_23Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Static, 50) };
int track2FxNodes_23Outputs[] = { 14 };
InputNodeData track2FxNodes_23 = { 1, 2, track2FxNodes_23Inputs, 1, track2FxNodes_23Outputs };
InputPlugData track2FxNodes_24Inputs[] = { InputPlugData(InputPlugMode::Static, 49), InputPlugData(InputPlugMode::Dynamic, 22) };
int track2FxNodes_24Outputs[] = { 16 };
InputNodeData track2FxNodes_24 = { 1, 2, track2FxNodes_24Inputs, 1, track2FxNodes_24Outputs };
InputPlugData track2FxNodes_25Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 15) };
int track2FxNodes_25Outputs[] = { 9 };
InputNodeData track2FxNodes_25 = { 3, 2, track2FxNodes_25Inputs, 1, track2FxNodes_25Outputs };
InputPlugData track2FxNodes_26Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Dynamic, 1) };
int track2FxNodes_26Outputs[] = { 8 };
InputNodeData track2FxNodes_26 = { 3, 2, track2FxNodes_26Inputs, 1, track2FxNodes_26Outputs };
InputPlugData track2FxNodes_27Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 0) };
int track2FxNodes_27Outputs[] = { 7 };
InputNodeData track2FxNodes_27 = { 3, 2, track2FxNodes_27Inputs, 1, track2FxNodes_27Outputs };
InputPlugData track2FxNodes_28Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 17) };
int track2FxNodes_28Outputs[] = { 11 };
InputNodeData track2FxNodes_28 = { 3, 2, track2FxNodes_28Inputs, 1, track2FxNodes_28Outputs };
InputPlugData track2FxNodes_29Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 16) };
int track2FxNodes_29Outputs[] = { 10 };
InputNodeData track2FxNodes_29 = { 3, 2, track2FxNodes_29Inputs, 1, track2FxNodes_29Outputs };
InputPlugData track2FxNodes_30Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Dynamic, 0) };
int track2FxNodes_30Outputs[] = { 6 };
InputNodeData track2FxNodes_30 = { 3, 2, track2FxNodes_30Inputs, 1, track2FxNodes_30Outputs };
InputPlugData track2FxNodes_31Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 23) };
int track2FxNodes_31Outputs[] = { 32 };
InputNodeData track2FxNodes_31 = { 3, 2, track2FxNodes_31Inputs, 1, track2FxNodes_31Outputs };
InputPlugData track2FxNodes_32Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Static, 2) };
int track2FxNodes_32Outputs[] = { 5 };
InputNodeData track2FxNodes_32 = { 7, 4, track2FxNodes_32Inputs, 1, track2FxNodes_32Outputs };
InputPlugData track2FxNodes_33Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 2) };
int track2FxNodes_33Outputs[] = { 4 };
InputNodeData track2FxNodes_33 = { 7, 4, track2FxNodes_33Inputs, 1, track2FxNodes_33Outputs };
InputPlugData track2FxNodes_34Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 4) };
int track2FxNodes_34Outputs[] = { 26 };
InputNodeData track2FxNodes_34 = { 16, 3, track2FxNodes_34Inputs, 1, track2FxNodes_34Outputs };
InputPlugData track2FxNodes_35Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 5) };
int track2FxNodes_35Outputs[] = { 3 };
InputNodeData track2FxNodes_35 = { 1, 2, track2FxNodes_35Inputs, 1, track2FxNodes_35Outputs };
InputPlugData track2FxNodes_36Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track2FxNodes_36Outputs[] = { 2 };
InputNodeData track2FxNodes_36 = { 1, 2, track2FxNodes_36Inputs, 1, track2FxNodes_36Outputs };
InputNodeData track2FxNodes[] = { track2FxNodes_0, track2FxNodes_1, track2FxNodes_2, track2FxNodes_3, track2FxNodes_4, track2FxNodes_5, track2FxNodes_6, track2FxNodes_7, track2FxNodes_8, track2FxNodes_9, track2FxNodes_10, track2FxNodes_11, track2FxNodes_12, track2FxNodes_13, track2FxNodes_14, track2FxNodes_15, track2FxNodes_16, track2FxNodes_17, track2FxNodes_18, track2FxNodes_19, track2FxNodes_20, track2FxNodes_21, track2FxNodes_22, track2FxNodes_23, track2FxNodes_24, track2FxNodes_25, track2FxNodes_26, track2FxNodes_27, track2FxNodes_28, track2FxNodes_29, track2FxNodes_30, track2FxNodes_31, track2FxNodes_32, track2FxNodes_33, track2FxNodes_34, track2FxNodes_35, track2FxNodes_36,  };
InputPlugData track2FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track2FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track2Fx = { 37, track2FxNodes, 2, track2FxNodesInputs, 2, track2FxNodesOutputs, 39 };
InputParameterData track2Param0 = { 7, automationDeltaTimes + 14, automationValues + 14 };
InputParameterData track2Params[] = { track2Param0,  };
InputTrackData track2 = {
    255,
    16, track2Poly, track2Fx,
    1, track2Params,
    896, noteDeltaTimes + 620, noteDurations + 620, notes + 620, noteVelocities + 620, notePans + 620,
};
InputPlugData track3PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track3PolyNodes_0Outputs[] = { 15 };
InputNodeData track3PolyNodes_0 = { 5, 1, track3PolyNodes_0Inputs, 1, track3PolyNodes_0Outputs };
InputPlugData track3PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Static, 51) };
int track3PolyNodes_1Outputs[] = { 16 };
InputNodeData track3PolyNodes_1 = { 1, 2, track3PolyNodes_1Inputs, 1, track3PolyNodes_1Outputs };
InputPlugData track3PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Static, 52) };
int track3PolyNodes_2Outputs[] = { 17 };
InputNodeData track3PolyNodes_2 = { 1, 2, track3PolyNodes_2Inputs, 1, track3PolyNodes_2Outputs };
InputPlugData track3PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Static, 2) };
int track3PolyNodes_3Outputs[] = { 12 };
InputNodeData track3PolyNodes_3 = { 6, 2, track3PolyNodes_3Inputs, 1, track3PolyNodes_3Outputs };
InputPlugData track3PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 16), InputPlugData(InputPlugMode::Static, 2) };
int track3PolyNodes_4Outputs[] = { 13 };
InputNodeData track3PolyNodes_4 = { 6, 2, track3PolyNodes_4Inputs, 1, track3PolyNodes_4Outputs };
InputPlugData track3PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Static, 2) };
int track3PolyNodes_5Outputs[] = { 14 };
InputNodeData track3PolyNodes_5 = { 6, 2, track3PolyNodes_5Inputs, 1, track3PolyNodes_5Outputs };
InputPlugData track3PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 53), InputPlugData(InputPlugMode::Static, 54), InputPlugData(InputPlugMode::Static, 55) };
int track3PolyNodes_6Outputs[] = { 4 };
InputNodeData track3PolyNodes_6 = { 10, 5, track3PolyNodes_6Inputs, 1, track3PolyNodes_6Outputs };
InputPlugData track3PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Static, 2) };
int track3PolyNodes_7Outputs[] = { 11 };
InputNodeData track3PolyNodes_7 = { 7, 4, track3PolyNodes_7Inputs, 1, track3PolyNodes_7Outputs };
InputPlugData track3PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Dynamic, 4) };
int track3PolyNodes_8Outputs[] = { 10 };
InputNodeData track3PolyNodes_8 = { 1, 2, track3PolyNodes_8Inputs, 1, track3PolyNodes_8Outputs };
InputPlugData track3PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 56), InputPlugData(InputPlugMode::Static, 57) };
int track3PolyNodes_9Outputs[] = { 7, 6, 8, 9 };
InputNodeData track3PolyNodes_9 = { 12, 3, track3PolyNodes_9Inputs, 4, track3PolyNodes_9Outputs };
InputPlugData track3PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Static, 27) };
int track3PolyNodes_10Outputs[] = { 5 };
InputNodeData track3PolyNodes_10 = { 1, 2, track3PolyNodes_10Inputs, 1, track3PolyNodes_10Outputs };
InputNodeData track3PolyNodes[] = { track3PolyNodes_0, track3PolyNodes_1, track3PolyNodes_2, track3PolyNodes_3, track3PolyNodes_4, track3PolyNodes_5, track3PolyNodes_6, track3PolyNodes_7, track3PolyNodes_8, track3PolyNodes_9, track3PolyNodes_10,  };
InputPlugData track3PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track3PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track3Poly = { 11, track3PolyNodes, 3, track3PolyNodesInputs, 4, track3PolyNodesOutputs, 18 };
InputPlugData track3FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 58) };
int track3FxNodes_0Outputs[] = { 8 };
InputNodeData track3FxNodes_0 = { 1, 2, track3FxNodes_0Inputs, 1, track3FxNodes_0Outputs };
InputPlugData track3FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 59), InputPlugData(InputPlugMode::Static, 59) };
int track3FxNodes_1Outputs[] = { 14 };
InputNodeData track3FxNodes_1 = { 16, 3, track3FxNodes_1Inputs, 1, track3FxNodes_1Outputs };
InputPlugData track3FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 14) };
int track3FxNodes_2Outputs[] = { 13 };
InputNodeData track3FxNodes_2 = { 3, 2, track3FxNodes_2Inputs, 1, track3FxNodes_2Outputs };
InputPlugData track3FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 60), InputPlugData(InputPlugMode::Static, 60) };
int track3FxNodes_3Outputs[] = { 11 };
InputNodeData track3FxNodes_3 = { 16, 3, track3FxNodes_3Inputs, 1, track3FxNodes_3Outputs };
InputPlugData track3FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Static, 58), InputPlugData(InputPlugMode::Dynamic, 11) };
int track3FxNodes_4Outputs[] = { 9 };
InputNodeData track3FxNodes_4 = { 1, 2, track3FxNodes_4Inputs, 1, track3FxNodes_4Outputs };
InputPlugData track3FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 61) };
int track3FxNodes_5Outputs[] = { 6 };
InputNodeData track3FxNodes_5 = { 1, 2, track3FxNodes_5Inputs, 1, track3FxNodes_5Outputs };
InputPlugData track3FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Static, 61), InputPlugData(InputPlugMode::Dynamic, 9) };
int track3FxNodes_6Outputs[] = { 7 };
InputNodeData track3FxNodes_6 = { 1, 2, track3FxNodes_6Inputs, 1, track3FxNodes_6Outputs };
InputPlugData track3FxNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 0) };
int track3FxNodes_7Outputs[] = { 4 };
InputNodeData track3FxNodes_7 = { 3, 2, track3FxNodes_7Inputs, 1, track3FxNodes_7Outputs };
InputPlugData track3FxNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 7) };
int track3FxNodes_8Outputs[] = { 5 };
InputNodeData track3FxNodes_8 = { 3, 2, track3FxNodes_8Inputs, 1, track3FxNodes_8Outputs };
InputPlugData track3FxNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 9) };
int track3FxNodes_9Outputs[] = { 12 };
InputNodeData track3FxNodes_9 = { 3, 2, track3FxNodes_9Inputs, 1, track3FxNodes_9Outputs };
InputPlugData track3FxNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track3FxNodes_10Outputs[] = { 2 };
InputNodeData track3FxNodes_10 = { 1, 2, track3FxNodes_10Inputs, 1, track3FxNodes_10Outputs };
InputPlugData track3FxNodes_11Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 5) };
int track3FxNodes_11Outputs[] = { 3 };
InputNodeData track3FxNodes_11 = { 1, 2, track3FxNodes_11Inputs, 1, track3FxNodes_11Outputs };
InputPlugData track3FxNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 60), InputPlugData(InputPlugMode::Static, 60) };
int track3FxNodes_12Outputs[] = { 10 };
InputNodeData track3FxNodes_12 = { 16, 3, track3FxNodes_12Inputs, 1, track3FxNodes_12Outputs };
InputNodeData track3FxNodes[] = { track3FxNodes_0, track3FxNodes_1, track3FxNodes_2, track3FxNodes_3, track3FxNodes_4, track3FxNodes_5, track3FxNodes_6, track3FxNodes_7, track3FxNodes_8, track3FxNodes_9, track3FxNodes_10, track3FxNodes_11, track3FxNodes_12,  };
InputPlugData track3FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track3FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track3Fx = { 13, track3FxNodes, 2, track3FxNodesInputs, 2, track3FxNodesOutputs, 15 };
InputParameterData track3Param0 = { 9, automationDeltaTimes + 21, automationValues + 21 };
InputParameterData track3Params[] = { track3Param0,  };
InputTrackData track3 = {
    255,
    16, track3Poly, track3Fx,
    1, track3Params,
    2116, noteDeltaTimes + 1516, noteDurations + 1516, notes + 1516, noteVelocities + 1516, notePans + 1516,
};
InputPlugData track4PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Static, 62), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_0Outputs[] = { 50 };
InputNodeData track4PolyNodes_0 = { 6, 2, track4PolyNodes_0Inputs, 1, track4PolyNodes_0Outputs };
InputPlugData track4PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Static, 3), InputPlugData(InputPlugMode::Dynamic, 1) };
int track4PolyNodes_1Outputs[] = { 42 };
InputNodeData track4PolyNodes_1 = { 3, 2, track4PolyNodes_1Inputs, 1, track4PolyNodes_1Outputs };
InputPlugData track4PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 3) };
int track4PolyNodes_2Outputs[] = { 45 };
InputNodeData track4PolyNodes_2 = { 4, 2, track4PolyNodes_2Inputs, 1, track4PolyNodes_2Outputs };
InputPlugData track4PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Static, 62), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_3Outputs[] = { 49 };
InputNodeData track4PolyNodes_3 = { 6, 2, track4PolyNodes_3Inputs, 1, track4PolyNodes_3Outputs };
InputPlugData track4PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 49), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_4Outputs[] = { 47 };
InputNodeData track4PolyNodes_4 = { 3, 2, track4PolyNodes_4Inputs, 1, track4PolyNodes_4Outputs };
InputPlugData track4PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 42) };
int track4PolyNodes_5Outputs[] = { 35 };
InputNodeData track4PolyNodes_5 = { 5, 1, track4PolyNodes_5Inputs, 1, track4PolyNodes_5Outputs };
InputPlugData track4PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 50), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_6Outputs[] = { 48 };
InputNodeData track4PolyNodes_6 = { 3, 2, track4PolyNodes_6Inputs, 1, track4PolyNodes_6Outputs };
InputPlugData track4PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 45) };
int track4PolyNodes_7Outputs[] = { 39 };
InputNodeData track4PolyNodes_7 = { 5, 1, track4PolyNodes_7Inputs, 1, track4PolyNodes_7Outputs };
InputPlugData track4PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 47), InputPlugData(InputPlugMode::Static, 63) };
int track4PolyNodes_8Outputs[] = { 43 };
InputNodeData track4PolyNodes_8 = { 1, 2, track4PolyNodes_8Inputs, 1, track4PolyNodes_8Outputs };
InputPlugData track4PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 64), InputPlugData(InputPlugMode::Static, 65), InputPlugData(InputPlugMode::Static, 66), InputPlugData(InputPlugMode::Static, 67) };
int track4PolyNodes_9Outputs[] = { 6 };
InputNodeData track4PolyNodes_9 = { 10, 5, track4PolyNodes_9Inputs, 1, track4PolyNodes_9Outputs };
InputPlugData track4PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 64), InputPlugData(InputPlugMode::Static, 65), InputPlugData(InputPlugMode::Static, 66), InputPlugData(InputPlugMode::Static, 67) };
int track4PolyNodes_10Outputs[] = { 7 };
InputNodeData track4PolyNodes_10 = { 10, 5, track4PolyNodes_10Inputs, 1, track4PolyNodes_10Outputs };
InputPlugData track4PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 48), InputPlugData(InputPlugMode::Static, 63) };
int track4PolyNodes_11Outputs[] = { 46 };
InputNodeData track4PolyNodes_11 = { 1, 2, track4PolyNodes_11Inputs, 1, track4PolyNodes_11Outputs };
InputPlugData track4PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 39), InputPlugData(InputPlugMode::Static, 0) };
int track4PolyNodes_12Outputs[] = { 44 };
InputNodeData track4PolyNodes_12 = { 8, 2, track4PolyNodes_12Inputs, 1, track4PolyNodes_12Outputs };
InputPlugData track4PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 35), InputPlugData(InputPlugMode::Static, 0) };
int track4PolyNodes_13Outputs[] = { 41 };
InputNodeData track4PolyNodes_13 = { 8, 2, track4PolyNodes_13Inputs, 1, track4PolyNodes_13Outputs };
InputPlugData track4PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 46), InputPlugData(InputPlugMode::Dynamic, 7) };
int track4PolyNodes_14Outputs[] = { 40 };
InputNodeData track4PolyNodes_14 = { 3, 2, track4PolyNodes_14Inputs, 1, track4PolyNodes_14Outputs };
InputPlugData track4PolyNodes_15Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 44), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_15Outputs[] = { 38 };
InputNodeData track4PolyNodes_15 = { 9, 2, track4PolyNodes_15Inputs, 1, track4PolyNodes_15Outputs };
InputPlugData track4PolyNodes_16Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 44), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_16Outputs[] = { 37 };
InputNodeData track4PolyNodes_16 = { 6, 2, track4PolyNodes_16Inputs, 1, track4PolyNodes_16Outputs };
InputPlugData track4PolyNodes_17Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 43), InputPlugData(InputPlugMode::Dynamic, 6) };
int track4PolyNodes_17Outputs[] = { 36 };
InputNodeData track4PolyNodes_17 = { 3, 2, track4PolyNodes_17Inputs, 1, track4PolyNodes_17Outputs };
InputPlugData track4PolyNodes_18Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 41), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_18Outputs[] = { 34 };
InputNodeData track4PolyNodes_18 = { 9, 2, track4PolyNodes_18Inputs, 1, track4PolyNodes_18Outputs };
InputPlugData track4PolyNodes_19Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 41), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_19Outputs[] = { 33 };
InputNodeData track4PolyNodes_19 = { 6, 2, track4PolyNodes_19Inputs, 1, track4PolyNodes_19Outputs };
InputPlugData track4PolyNodes_20Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 40), InputPlugData(InputPlugMode::Static, 68) };
int track4PolyNodes_20Outputs[] = { 32 };
InputNodeData track4PolyNodes_20 = { 1, 2, track4PolyNodes_20Inputs, 1, track4PolyNodes_20Outputs };
InputPlugData track4PolyNodes_21Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 38), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_21Outputs[] = { 30 };
InputNodeData track4PolyNodes_21 = { 1, 2, track4PolyNodes_21Inputs, 1, track4PolyNodes_21Outputs };
InputPlugData track4PolyNodes_22Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_22Outputs[] = { 29 };
InputNodeData track4PolyNodes_22 = { 1, 2, track4PolyNodes_22Inputs, 1, track4PolyNodes_22Outputs };
InputPlugData track4PolyNodes_23Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 36), InputPlugData(InputPlugMode::Static, 68) };
int track4PolyNodes_23Outputs[] = { 28 };
InputNodeData track4PolyNodes_23 = { 1, 2, track4PolyNodes_23Inputs, 1, track4PolyNodes_23Outputs };
InputPlugData track4PolyNodes_24Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 35), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_24Outputs[] = { 27 };
InputNodeData track4PolyNodes_24 = { 11, 2, track4PolyNodes_24Inputs, 1, track4PolyNodes_24Outputs };
InputPlugData track4PolyNodes_25Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 34), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_25Outputs[] = { 26 };
InputNodeData track4PolyNodes_25 = { 1, 2, track4PolyNodes_25Inputs, 1, track4PolyNodes_25Outputs };
InputPlugData track4PolyNodes_26Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 33), InputPlugData(InputPlugMode::Static, 4) };
int track4PolyNodes_26Outputs[] = { 25 };
InputNodeData track4PolyNodes_26 = { 1, 2, track4PolyNodes_26Inputs, 1, track4PolyNodes_26Outputs };
InputPlugData track4PolyNodes_27Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 39), InputPlugData(InputPlugMode::Static, 2) };
int track4PolyNodes_27Outputs[] = { 31 };
InputNodeData track4PolyNodes_27 = { 11, 2, track4PolyNodes_27Inputs, 1, track4PolyNodes_27Outputs };
InputPlugData track4PolyNodes_28Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 69) };
int track4PolyNodes_28Outputs[] = { 24 };
InputNodeData track4PolyNodes_28 = { 3, 2, track4PolyNodes_28Inputs, 1, track4PolyNodes_28Outputs };
InputPlugData track4PolyNodes_29Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 29), InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Dynamic, 31), InputPlugData(InputPlugMode::Static, 70) };
int track4PolyNodes_29Outputs[] = { 23 };
InputNodeData track4PolyNodes_29 = { 7, 4, track4PolyNodes_29Inputs, 1, track4PolyNodes_29Outputs };
InputPlugData track4PolyNodes_30Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 28), InputPlugData(InputPlugMode::Static, 69) };
int track4PolyNodes_30Outputs[] = { 19 };
InputNodeData track4PolyNodes_30 = { 3, 2, track4PolyNodes_30Inputs, 1, track4PolyNodes_30Outputs };
InputPlugData track4PolyNodes_31Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 25), InputPlugData(InputPlugMode::Dynamic, 26), InputPlugData(InputPlugMode::Dynamic, 27), InputPlugData(InputPlugMode::Static, 70) };
int track4PolyNodes_31Outputs[] = { 18 };
InputNodeData track4PolyNodes_31 = { 7, 4, track4PolyNodes_31Inputs, 1, track4PolyNodes_31Outputs };
InputPlugData track4PolyNodes_32Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 23), InputPlugData(InputPlugMode::Dynamic, 24), InputPlugData(InputPlugMode::Static, 8) };
int track4PolyNodes_32Outputs[] = { 20, 14, 21, 22 };
InputNodeData track4PolyNodes_32 = { 12, 3, track4PolyNodes_32Inputs, 4, track4PolyNodes_32Outputs };
InputPlugData track4PolyNodes_33Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 8) };
int track4PolyNodes_33Outputs[] = { 15, 13, 16, 17 };
InputNodeData track4PolyNodes_33 = { 12, 3, track4PolyNodes_33Inputs, 4, track4PolyNodes_33Outputs };
InputPlugData track4PolyNodes_34Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Dynamic, 14) };
int track4PolyNodes_34Outputs[] = { 12 };
InputNodeData track4PolyNodes_34 = { 1, 2, track4PolyNodes_34Inputs, 1, track4PolyNodes_34Outputs };
InputPlugData track4PolyNodes_35Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 13) };
int track4PolyNodes_35Outputs[] = { 11 };
InputNodeData track4PolyNodes_35 = { 1, 2, track4PolyNodes_35Inputs, 1, track4PolyNodes_35Outputs };
InputPlugData track4PolyNodes_36Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Dynamic, 3) };
int track4PolyNodes_36Outputs[] = { 10 };
InputNodeData track4PolyNodes_36 = { 1, 2, track4PolyNodes_36Inputs, 1, track4PolyNodes_36Outputs };
InputPlugData track4PolyNodes_37Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Dynamic, 3) };
int track4PolyNodes_37Outputs[] = { 9 };
InputNodeData track4PolyNodes_37 = { 1, 2, track4PolyNodes_37Inputs, 1, track4PolyNodes_37Outputs };
InputPlugData track4PolyNodes_38Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 10) };
int track4PolyNodes_38Outputs[] = { 8 };
InputNodeData track4PolyNodes_38 = { 3, 2, track4PolyNodes_38Inputs, 1, track4PolyNodes_38Outputs };
InputPlugData track4PolyNodes_39Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 0) };
int track4PolyNodes_39Outputs[] = { 5 };
InputNodeData track4PolyNodes_39 = { 8, 2, track4PolyNodes_39Inputs, 1, track4PolyNodes_39Outputs };
InputPlugData track4PolyNodes_40Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 7) };
int track4PolyNodes_40Outputs[] = { 4 };
InputNodeData track4PolyNodes_40 = { 3, 2, track4PolyNodes_40Inputs, 1, track4PolyNodes_40Outputs };
InputNodeData track4PolyNodes[] = { track4PolyNodes_0, track4PolyNodes_1, track4PolyNodes_2, track4PolyNodes_3, track4PolyNodes_4, track4PolyNodes_5, track4PolyNodes_6, track4PolyNodes_7, track4PolyNodes_8, track4PolyNodes_9, track4PolyNodes_10, track4PolyNodes_11, track4PolyNodes_12, track4PolyNodes_13, track4PolyNodes_14, track4PolyNodes_15, track4PolyNodes_16, track4PolyNodes_17, track4PolyNodes_18, track4PolyNodes_19, track4PolyNodes_20, track4PolyNodes_21, track4PolyNodes_22, track4PolyNodes_23, track4PolyNodes_24, track4PolyNodes_25, track4PolyNodes_26, track4PolyNodes_27, track4PolyNodes_28, track4PolyNodes_29, track4PolyNodes_30, track4PolyNodes_31, track4PolyNodes_32, track4PolyNodes_33, track4PolyNodes_34, track4PolyNodes_35, track4PolyNodes_36, track4PolyNodes_37, track4PolyNodes_38, track4PolyNodes_39, track4PolyNodes_40,  };
InputPlugData track4PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track4PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track4Poly = { 41, track4PolyNodes, 3, track4PolyNodesInputs, 4, track4PolyNodesOutputs, 51 };
InputPlugData track4FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Parameter, 0) };
int track4FxNodes_0Outputs[] = { 2 };
InputNodeData track4FxNodes_0 = { 1, 2, track4FxNodes_0Inputs, 1, track4FxNodes_0Outputs };
InputPlugData track4FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track4FxNodes_1Outputs[] = { 3 };
InputNodeData track4FxNodes_1 = { 1, 2, track4FxNodes_1Inputs, 1, track4FxNodes_1Outputs };
InputNodeData track4FxNodes[] = { track4FxNodes_0, track4FxNodes_1,  };
InputPlugData track4FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track4FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track4Fx = { 2, track4FxNodes, 2, track4FxNodesInputs, 2, track4FxNodesOutputs, 4 };
InputParameterData track4Param0 = { 4, automationDeltaTimes + 30, automationValues + 30 };
InputParameterData track4Params[] = { track4Param0,  };
InputTrackData track4 = {
    255,
    16, track4Poly, track4Fx,
    1, track4Params,
    672, noteDeltaTimes + 3632, noteDurations + 3632, notes + 3632, noteVelocities + 3632, notePans + 3632,
};
InputPlugData track5PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track5PolyNodes_0Outputs[] = { 19 };
InputNodeData track5PolyNodes_0 = { 5, 1, track5PolyNodes_0Inputs, 1, track5PolyNodes_0Outputs };
InputPlugData track5PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 0) };
int track5PolyNodes_1Outputs[] = { 20 };
InputNodeData track5PolyNodes_1 = { 8, 2, track5PolyNodes_1Inputs, 1, track5PolyNodes_1Outputs };
InputPlugData track5PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 64), InputPlugData(InputPlugMode::Static, 65), InputPlugData(InputPlugMode::Static, 66), InputPlugData(InputPlugMode::Static, 71) };
int track5PolyNodes_2Outputs[] = { 4 };
InputNodeData track5PolyNodes_2 = { 10, 5, track5PolyNodes_2Inputs, 1, track5PolyNodes_2Outputs };
InputPlugData track5PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Static, 2) };
int track5PolyNodes_3Outputs[] = { 17 };
InputNodeData track5PolyNodes_3 = { 6, 2, track5PolyNodes_3Inputs, 1, track5PolyNodes_3Outputs };
InputPlugData track5PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Static, 2) };
int track5PolyNodes_4Outputs[] = { 18 };
InputNodeData track5PolyNodes_4 = { 9, 2, track5PolyNodes_4Inputs, 1, track5PolyNodes_4Outputs };
InputPlugData track5PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Static, 4) };
int track5PolyNodes_5Outputs[] = { 13 };
InputNodeData track5PolyNodes_5 = { 1, 2, track5PolyNodes_5Inputs, 1, track5PolyNodes_5Outputs };
InputPlugData track5PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Static, 4) };
int track5PolyNodes_6Outputs[] = { 14 };
InputNodeData track5PolyNodes_6 = { 1, 2, track5PolyNodes_6Inputs, 1, track5PolyNodes_6Outputs };
InputPlugData track5PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 2) };
int track5PolyNodes_7Outputs[] = { 15 };
InputNodeData track5PolyNodes_7 = { 9, 2, track5PolyNodes_7Inputs, 1, track5PolyNodes_7Outputs };
InputPlugData track5PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Static, 72) };
int track5PolyNodes_8Outputs[] = { 16 };
InputNodeData track5PolyNodes_8 = { 1, 2, track5PolyNodes_8Inputs, 1, track5PolyNodes_8Outputs };
InputPlugData track5PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Dynamic, 15) };
int track5PolyNodes_9Outputs[] = { 11 };
InputNodeData track5PolyNodes_9 = { 7, 4, track5PolyNodes_9Inputs, 1, track5PolyNodes_9Outputs };
InputPlugData track5PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 16), InputPlugData(InputPlugMode::Static, 4) };
int track5PolyNodes_10Outputs[] = { 12 };
InputNodeData track5PolyNodes_10 = { 3, 2, track5PolyNodes_10Inputs, 1, track5PolyNodes_10Outputs };
InputPlugData track5PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 8) };
int track5PolyNodes_11Outputs[] = { 8, 7, 9, 10 };
InputNodeData track5PolyNodes_11 = { 12, 3, track5PolyNodes_11Inputs, 4, track5PolyNodes_11Outputs };
InputPlugData track5PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 7) };
int track5PolyNodes_12Outputs[] = { 6 };
InputNodeData track5PolyNodes_12 = { 1, 2, track5PolyNodes_12Inputs, 1, track5PolyNodes_12Outputs };
InputPlugData track5PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 3) };
int track5PolyNodes_13Outputs[] = { 5 };
InputNodeData track5PolyNodes_13 = { 1, 2, track5PolyNodes_13Inputs, 1, track5PolyNodes_13Outputs };
InputNodeData track5PolyNodes[] = { track5PolyNodes_0, track5PolyNodes_1, track5PolyNodes_2, track5PolyNodes_3, track5PolyNodes_4, track5PolyNodes_5, track5PolyNodes_6, track5PolyNodes_7, track5PolyNodes_8, track5PolyNodes_9, track5PolyNodes_10, track5PolyNodes_11, track5PolyNodes_12, track5PolyNodes_13,  };
InputPlugData track5PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track5PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track5Poly = { 14, track5PolyNodes, 3, track5PolyNodesInputs, 4, track5PolyNodesOutputs, 21 };
InputPlugData track5FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 47) };
int track5FxNodes_0Outputs[] = { 8 };
InputNodeData track5FxNodes_0 = { 1, 2, track5FxNodes_0Inputs, 1, track5FxNodes_0Outputs };
InputPlugData track5FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 73), InputPlugData(InputPlugMode::Static, 73) };
int track5FxNodes_1Outputs[] = { 14 };
InputNodeData track5FxNodes_1 = { 16, 3, track5FxNodes_1Inputs, 1, track5FxNodes_1Outputs };
InputPlugData track5FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 14) };
int track5FxNodes_2Outputs[] = { 13 };
InputNodeData track5FxNodes_2 = { 3, 2, track5FxNodes_2Inputs, 1, track5FxNodes_2Outputs };
InputPlugData track5FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 74), InputPlugData(InputPlugMode::Static, 74) };
int track5FxNodes_3Outputs[] = { 11 };
InputNodeData track5FxNodes_3 = { 16, 3, track5FxNodes_3Inputs, 1, track5FxNodes_3Outputs };
InputPlugData track5FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Static, 47), InputPlugData(InputPlugMode::Dynamic, 11) };
int track5FxNodes_4Outputs[] = { 9 };
InputNodeData track5FxNodes_4 = { 1, 2, track5FxNodes_4Inputs, 1, track5FxNodes_4Outputs };
InputPlugData track5FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 49) };
int track5FxNodes_5Outputs[] = { 6 };
InputNodeData track5FxNodes_5 = { 1, 2, track5FxNodes_5Inputs, 1, track5FxNodes_5Outputs };
InputPlugData track5FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Static, 49), InputPlugData(InputPlugMode::Dynamic, 9) };
int track5FxNodes_6Outputs[] = { 7 };
InputNodeData track5FxNodes_6 = { 1, 2, track5FxNodes_6Inputs, 1, track5FxNodes_6Outputs };
InputPlugData track5FxNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 0) };
int track5FxNodes_7Outputs[] = { 4 };
InputNodeData track5FxNodes_7 = { 3, 2, track5FxNodes_7Inputs, 1, track5FxNodes_7Outputs };
InputPlugData track5FxNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 7) };
int track5FxNodes_8Outputs[] = { 5 };
InputNodeData track5FxNodes_8 = { 3, 2, track5FxNodes_8Inputs, 1, track5FxNodes_8Outputs };
InputPlugData track5FxNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 9) };
int track5FxNodes_9Outputs[] = { 12 };
InputNodeData track5FxNodes_9 = { 3, 2, track5FxNodes_9Inputs, 1, track5FxNodes_9Outputs };
InputPlugData track5FxNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track5FxNodes_10Outputs[] = { 2 };
InputNodeData track5FxNodes_10 = { 1, 2, track5FxNodes_10Inputs, 1, track5FxNodes_10Outputs };
InputPlugData track5FxNodes_11Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 5) };
int track5FxNodes_11Outputs[] = { 3 };
InputNodeData track5FxNodes_11 = { 1, 2, track5FxNodes_11Inputs, 1, track5FxNodes_11Outputs };
InputPlugData track5FxNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 74), InputPlugData(InputPlugMode::Static, 74) };
int track5FxNodes_12Outputs[] = { 10 };
InputNodeData track5FxNodes_12 = { 16, 3, track5FxNodes_12Inputs, 1, track5FxNodes_12Outputs };
InputNodeData track5FxNodes[] = { track5FxNodes_0, track5FxNodes_1, track5FxNodes_2, track5FxNodes_3, track5FxNodes_4, track5FxNodes_5, track5FxNodes_6, track5FxNodes_7, track5FxNodes_8, track5FxNodes_9, track5FxNodes_10, track5FxNodes_11, track5FxNodes_12,  };
InputPlugData track5FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track5FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track5Fx = { 13, track5FxNodes, 2, track5FxNodesInputs, 2, track5FxNodesOutputs, 15 };
InputParameterData track5Param0 = { 5, automationDeltaTimes + 34, automationValues + 34 };
InputParameterData track5Params[] = { track5Param0,  };
InputTrackData track5 = {
    255,
    16, track5Poly, track5Fx,
    1, track5Params,
    290, noteDeltaTimes + 4304, noteDurations + 4304, notes + 4304, noteVelocities + 4304, notePans + 4304,
};
InputPlugData track6PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 75), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_0Outputs[] = { 37 };
InputNodeData track6PolyNodes_0 = { 10, 5, track6PolyNodes_0Inputs, 1, track6PolyNodes_0Outputs };
InputPlugData track6PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Static, 76), InputPlugData(InputPlugMode::Static, 77), InputPlugData(InputPlugMode::Dynamic, 37) };
int track6PolyNodes_1Outputs[] = { 36 };
InputNodeData track6PolyNodes_1 = { 14, 3, track6PolyNodes_1Inputs, 1, track6PolyNodes_1Outputs };
InputPlugData track6PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 36), InputPlugData(InputPlugMode::Static, 78) };
int track6PolyNodes_2Outputs[] = { 32 };
InputNodeData track6PolyNodes_2 = { 1, 2, track6PolyNodes_2Inputs, 1, track6PolyNodes_2Outputs };
InputPlugData track6PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 23) };
int track6PolyNodes_3Outputs[] = { 34 };
InputNodeData track6PolyNodes_3 = { 1, 2, track6PolyNodes_3Inputs, 1, track6PolyNodes_3Outputs };
InputPlugData track6PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 0) };
int track6PolyNodes_4Outputs[] = { 33 };
InputNodeData track6PolyNodes_4 = { 1, 2, track6PolyNodes_4Inputs, 1, track6PolyNodes_4Outputs };
InputPlugData track6PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 79) };
int track6PolyNodes_5Outputs[] = { 35 };
InputNodeData track6PolyNodes_5 = { 1, 2, track6PolyNodes_5Inputs, 1, track6PolyNodes_5Outputs };
InputPlugData track6PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 11), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 80) };
int track6PolyNodes_6Outputs[] = { 31 };
InputNodeData track6PolyNodes_6 = { 10, 5, track6PolyNodes_6Inputs, 1, track6PolyNodes_6Outputs };
InputPlugData *track6PolyNodes_7Inputs = nullptr;
int track6PolyNodes_7Outputs[] = { 30 };
InputNodeData track6PolyNodes_7 = { 0, 0, track6PolyNodes_7Inputs, 1, track6PolyNodes_7Outputs };
InputPlugData track6PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 81) };
int track6PolyNodes_8Outputs[] = { 29 };
InputNodeData track6PolyNodes_8 = { 1, 2, track6PolyNodes_8Inputs, 1, track6PolyNodes_8Outputs };
InputPlugData track6PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_9Outputs[] = { 21 };
InputNodeData track6PolyNodes_9 = { 6, 2, track6PolyNodes_9Inputs, 1, track6PolyNodes_9Outputs };
InputPlugData track6PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 35), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_10Outputs[] = { 27 };
InputNodeData track6PolyNodes_10 = { 6, 2, track6PolyNodes_10Inputs, 1, track6PolyNodes_10Outputs };
InputPlugData track6PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Static, 82) };
int track6PolyNodes_11Outputs[] = { 26 };
InputNodeData track6PolyNodes_11 = { 18, 1, track6PolyNodes_11Inputs, 1, track6PolyNodes_11Outputs };
InputPlugData track6PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 34), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_12Outputs[] = { 25 };
InputNodeData track6PolyNodes_12 = { 6, 2, track6PolyNodes_12Inputs, 1, track6PolyNodes_12Outputs };
InputPlugData track6PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Static, 83) };
int track6PolyNodes_13Outputs[] = { 24 };
InputNodeData track6PolyNodes_13 = { 18, 1, track6PolyNodes_13Inputs, 1, track6PolyNodes_13Outputs };
InputPlugData track6PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 33), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_14Outputs[] = { 23 };
InputNodeData track6PolyNodes_14 = { 6, 2, track6PolyNodes_14Inputs, 1, track6PolyNodes_14Outputs };
InputPlugData track6PolyNodes_15Inputs[] = { InputPlugData(InputPlugMode::Static, 84) };
int track6PolyNodes_15Outputs[] = { 22 };
InputNodeData track6PolyNodes_15 = { 18, 1, track6PolyNodes_15Inputs, 1, track6PolyNodes_15Outputs };
InputPlugData track6PolyNodes_16Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 85) };
int track6PolyNodes_16Outputs[] = { 28 };
InputNodeData track6PolyNodes_16 = { 1, 2, track6PolyNodes_16Inputs, 1, track6PolyNodes_16Outputs };
InputPlugData track6PolyNodes_17Inputs[] = { InputPlugData(InputPlugMode::Static, 86) };
int track6PolyNodes_17Outputs[] = { 20 };
InputNodeData track6PolyNodes_17 = { 18, 1, track6PolyNodes_17Inputs, 1, track6PolyNodes_17Outputs };
InputPlugData track6PolyNodes_18Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 29), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_18Outputs[] = { 18 };
InputNodeData track6PolyNodes_18 = { 6, 2, track6PolyNodes_18Inputs, 1, track6PolyNodes_18Outputs };
InputPlugData track6PolyNodes_19Inputs[] = { InputPlugData(InputPlugMode::Static, 87) };
int track6PolyNodes_19Outputs[] = { 17 };
InputNodeData track6PolyNodes_19 = { 18, 1, track6PolyNodes_19Inputs, 1, track6PolyNodes_19Outputs };
InputPlugData track6PolyNodes_20Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 28), InputPlugData(InputPlugMode::Static, 2) };
int track6PolyNodes_20Outputs[] = { 16 };
InputNodeData track6PolyNodes_20 = { 6, 2, track6PolyNodes_20Inputs, 1, track6PolyNodes_20Outputs };
InputPlugData track6PolyNodes_21Inputs[] = { InputPlugData(InputPlugMode::Static, 88) };
int track6PolyNodes_21Outputs[] = { 15 };
InputNodeData track6PolyNodes_21 = { 18, 1, track6PolyNodes_21Inputs, 1, track6PolyNodes_21Outputs };
InputPlugData track6PolyNodes_22Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 26), InputPlugData(InputPlugMode::Dynamic, 27) };
int track6PolyNodes_22Outputs[] = { 14 };
InputNodeData track6PolyNodes_22 = { 1, 2, track6PolyNodes_22Inputs, 1, track6PolyNodes_22Outputs };
InputPlugData track6PolyNodes_23Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 24), InputPlugData(InputPlugMode::Dynamic, 25) };
int track6PolyNodes_23Outputs[] = { 13 };
InputNodeData track6PolyNodes_23 = { 1, 2, track6PolyNodes_23Inputs, 1, track6PolyNodes_23Outputs };
InputPlugData track6PolyNodes_24Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 22), InputPlugData(InputPlugMode::Dynamic, 23) };
int track6PolyNodes_24Outputs[] = { 12 };
InputNodeData track6PolyNodes_24 = { 1, 2, track6PolyNodes_24Inputs, 1, track6PolyNodes_24Outputs };
InputPlugData track6PolyNodes_25Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Dynamic, 21) };
int track6PolyNodes_25Outputs[] = { 11 };
InputNodeData track6PolyNodes_25 = { 1, 2, track6PolyNodes_25Inputs, 1, track6PolyNodes_25Outputs };
InputPlugData track6PolyNodes_26Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Dynamic, 31) };
int track6PolyNodes_26Outputs[] = { 19 };
InputNodeData track6PolyNodes_26 = { 1, 2, track6PolyNodes_26Inputs, 1, track6PolyNodes_26Outputs };
InputPlugData track6PolyNodes_27Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 6) };
int track6PolyNodes_27Outputs[] = { 10 };
InputNodeData track6PolyNodes_27 = { 1, 2, track6PolyNodes_27Inputs, 1, track6PolyNodes_27Outputs };
InputPlugData track6PolyNodes_28Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Dynamic, 18) };
int track6PolyNodes_28Outputs[] = { 9 };
InputNodeData track6PolyNodes_28 = { 1, 2, track6PolyNodes_28Inputs, 1, track6PolyNodes_28Outputs };
InputPlugData track6PolyNodes_29Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Dynamic, 16) };
int track6PolyNodes_29Outputs[] = { 8 };
InputNodeData track6PolyNodes_29 = { 1, 2, track6PolyNodes_29Inputs, 1, track6PolyNodes_29Outputs };
InputPlugData track6PolyNodes_30Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14) };
int track6PolyNodes_30Outputs[] = { 7 };
InputNodeData track6PolyNodes_30 = { 7, 4, track6PolyNodes_30Inputs, 1, track6PolyNodes_30Outputs };
InputPlugData track6PolyNodes_31Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 10) };
int track6PolyNodes_31Outputs[] = { 6 };
InputNodeData track6PolyNodes_31 = { 7, 4, track6PolyNodes_31Inputs, 1, track6PolyNodes_31Outputs };
InputPlugData track6PolyNodes_32Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 11), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 89) };
int track6PolyNodes_32Outputs[] = { 4 };
InputNodeData track6PolyNodes_32 = { 10, 5, track6PolyNodes_32Inputs, 1, track6PolyNodes_32Outputs };
InputPlugData track6PolyNodes_33Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 6) };
int track6PolyNodes_33Outputs[] = { 5 };
InputNodeData track6PolyNodes_33 = { 1, 2, track6PolyNodes_33Inputs, 1, track6PolyNodes_33Outputs };
InputNodeData track6PolyNodes[] = { track6PolyNodes_0, track6PolyNodes_1, track6PolyNodes_2, track6PolyNodes_3, track6PolyNodes_4, track6PolyNodes_5, track6PolyNodes_6, track6PolyNodes_7, track6PolyNodes_8, track6PolyNodes_9, track6PolyNodes_10, track6PolyNodes_11, track6PolyNodes_12, track6PolyNodes_13, track6PolyNodes_14, track6PolyNodes_15, track6PolyNodes_16, track6PolyNodes_17, track6PolyNodes_18, track6PolyNodes_19, track6PolyNodes_20, track6PolyNodes_21, track6PolyNodes_22, track6PolyNodes_23, track6PolyNodes_24, track6PolyNodes_25, track6PolyNodes_26, track6PolyNodes_27, track6PolyNodes_28, track6PolyNodes_29, track6PolyNodes_30, track6PolyNodes_31, track6PolyNodes_32, track6PolyNodes_33,  };
InputPlugData track6PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Static, 70) };
int track6PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track6Poly = { 34, track6PolyNodes, 3, track6PolyNodesInputs, 4, track6PolyNodesOutputs, 38 };
InputPlugData track6FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 90) };
int track6FxNodes_0Outputs[] = { 5 };
InputNodeData track6FxNodes_0 = { 1, 2, track6FxNodes_0Inputs, 1, track6FxNodes_0Outputs };
InputPlugData track6FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 6) };
int track6FxNodes_1Outputs[] = { 4 };
InputNodeData track6FxNodes_1 = { 3, 2, track6FxNodes_1Inputs, 1, track6FxNodes_1Outputs };
InputPlugData track6FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Static, 91) };
int track6FxNodes_2Outputs[] = { 8 };
InputNodeData track6FxNodes_2 = { 1, 2, track6FxNodes_2Inputs, 1, track6FxNodes_2Outputs };
InputPlugData track6FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Static, 92) };
int track6FxNodes_3Outputs[] = { 3 };
InputNodeData track6FxNodes_3 = { 1, 2, track6FxNodes_3Inputs, 1, track6FxNodes_3Outputs };
InputPlugData track6FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 8) };
int track6FxNodes_4Outputs[] = { 7 };
InputNodeData track6FxNodes_4 = { 3, 2, track6FxNodes_4Inputs, 1, track6FxNodes_4Outputs };
InputPlugData track6FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 3), InputPlugData(InputPlugMode::Parameter, 0) };
int track6FxNodes_5Outputs[] = { 2 };
InputNodeData track6FxNodes_5 = { 1, 2, track6FxNodes_5Inputs, 1, track6FxNodes_5Outputs };
InputPlugData track6FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 93), InputPlugData(InputPlugMode::Static, 2) };
int track6FxNodes_6Outputs[] = { 6 };
InputNodeData track6FxNodes_6 = { 16, 3, track6FxNodes_6Inputs, 1, track6FxNodes_6Outputs };
InputNodeData track6FxNodes[] = { track6FxNodes_0, track6FxNodes_1, track6FxNodes_2, track6FxNodes_3, track6FxNodes_4, track6FxNodes_5, track6FxNodes_6,  };
InputPlugData track6FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 2) };
int track6FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track6Fx = { 7, track6FxNodes, 2, track6FxNodesInputs, 2, track6FxNodesOutputs, 9 };
InputParameterData track6Param0 = { 4, automationDeltaTimes + 39, automationValues + 39 };
InputParameterData track6Params[] = { track6Param0,  };
InputTrackData track6 = {
    255,
    16, track6Poly, track6Fx,
    1, track6Params,
    256, noteDeltaTimes + 4594, noteDurations + 4594, notes + 4594, noteVelocities + 4594, notePans + 4594,
};
InputPlugData *track7PolyNodes_0Inputs = nullptr;
int track7PolyNodes_0Outputs[] = { 11 };
InputNodeData track7PolyNodes_0 = { 0, 0, track7PolyNodes_0Inputs, 1, track7PolyNodes_0Outputs };
InputPlugData track7PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 94), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 95) };
int track7PolyNodes_1Outputs[] = { 6 };
InputNodeData track7PolyNodes_1 = { 10, 5, track7PolyNodes_1Inputs, 1, track7PolyNodes_1Outputs };
InputPlugData track7PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 11), InputPlugData(InputPlugMode::Static, 96), InputPlugData(InputPlugMode::Static, 97) };
int track7PolyNodes_2Outputs[] = { 8, 9, 7, 10 };
InputNodeData track7PolyNodes_2 = { 12, 3, track7PolyNodes_2Inputs, 4, track7PolyNodes_2Outputs };
InputPlugData track7PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 6) };
int track7PolyNodes_3Outputs[] = { 4 };
InputNodeData track7PolyNodes_3 = { 3, 2, track7PolyNodes_3Inputs, 1, track7PolyNodes_3Outputs };
InputPlugData track7PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 7) };
int track7PolyNodes_4Outputs[] = { 5 };
InputNodeData track7PolyNodes_4 = { 1, 2, track7PolyNodes_4Inputs, 1, track7PolyNodes_4Outputs };
InputNodeData track7PolyNodes[] = { track7PolyNodes_0, track7PolyNodes_1, track7PolyNodes_2, track7PolyNodes_3, track7PolyNodes_4,  };
InputPlugData track7PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Static, 70) };
int track7PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track7Poly = { 5, track7PolyNodes, 3, track7PolyNodesInputs, 4, track7PolyNodesOutputs, 12 };
InputPlugData track7FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Parameter, 0) };
int track7FxNodes_0Outputs[] = { 2 };
InputNodeData track7FxNodes_0 = { 1, 2, track7FxNodes_0Inputs, 1, track7FxNodes_0Outputs };
InputNodeData track7FxNodes[] = { track7FxNodes_0,  };
InputPlugData track7FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 2) };
int track7FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track7Fx = { 1, track7FxNodes, 2, track7FxNodesInputs, 2, track7FxNodesOutputs, 3 };
InputParameterData track7Param0 = { 5, automationDeltaTimes + 43, automationValues + 43 };
InputParameterData track7Params[] = { track7Param0,  };
InputTrackData track7 = {
    255,
    16, track7Poly, track7Fx,
    1, track7Params,
    1476, noteDeltaTimes + 4850, noteDurations + 4850, notes + 4850, noteVelocities + 4850, notePans + 4850,
};
InputPlugData track8PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 39), InputPlugData(InputPlugMode::Static, 98), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 99) };
int track8PolyNodes_0Outputs[] = { 6 };
InputNodeData track8PolyNodes_0 = { 10, 5, track8PolyNodes_0Inputs, 1, track8PolyNodes_0Outputs };
InputPlugData *track8PolyNodes_1Inputs = nullptr;
int track8PolyNodes_1Outputs[] = { 9 };
InputNodeData track8PolyNodes_1 = { 0, 0, track8PolyNodes_1Inputs, 1, track8PolyNodes_1Outputs };
InputPlugData track8PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 9) };
int track8PolyNodes_2Outputs[] = { 8 };
InputNodeData track8PolyNodes_2 = { 1, 2, track8PolyNodes_2Inputs, 1, track8PolyNodes_2Outputs };
InputPlugData track8PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 100), InputPlugData(InputPlugMode::Static, 101) };
int track8PolyNodes_3Outputs[] = { 7 };
InputNodeData track8PolyNodes_3 = { 15, 3, track8PolyNodes_3Inputs, 1, track8PolyNodes_3Outputs };
InputPlugData track8PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 6) };
int track8PolyNodes_4Outputs[] = { 4 };
InputNodeData track8PolyNodes_4 = { 3, 2, track8PolyNodes_4Inputs, 1, track8PolyNodes_4Outputs };
InputPlugData track8PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Parameter, 0) };
int track8PolyNodes_5Outputs[] = { 5 };
InputNodeData track8PolyNodes_5 = { 1, 2, track8PolyNodes_5Inputs, 1, track8PolyNodes_5Outputs };
InputNodeData track8PolyNodes[] = { track8PolyNodes_0, track8PolyNodes_1, track8PolyNodes_2, track8PolyNodes_3, track8PolyNodes_4, track8PolyNodes_5,  };
InputPlugData track8PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track8PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track8Poly = { 6, track8PolyNodes, 3, track8PolyNodesInputs, 4, track8PolyNodesOutputs, 10 };
InputNodeData *track8FxNodes = nullptr;
InputPlugData track8FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track8FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track8Fx = { 0, track8FxNodes, 2, track8FxNodesInputs, 2, track8FxNodesOutputs, 2 };
InputParameterData track8Param0 = { 5, automationDeltaTimes + 48, automationValues + 48 };
InputParameterData track8Params[] = { track8Param0,  };
InputTrackData track8 = {
    255,
    16, track8Poly, track8Fx,
    1, track8Params,
    192, noteDeltaTimes + 6326, noteDurations + 6326, notes + 6326, noteVelocities + 6326, notePans + 6326,
};
InputPlugData *track9PolyNodes_0Inputs = nullptr;
int track9PolyNodes_0Outputs[] = { 22 };
InputNodeData track9PolyNodes_0 = { 0, 0, track9PolyNodes_0Inputs, 1, track9PolyNodes_0Outputs };
InputPlugData *track9PolyNodes_1Inputs = nullptr;
int track9PolyNodes_1Outputs[] = { 23 };
InputNodeData track9PolyNodes_1 = { 0, 0, track9PolyNodes_1Inputs, 1, track9PolyNodes_1Outputs };
InputPlugData track9PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 22), InputPlugData(InputPlugMode::Static, 102), InputPlugData(InputPlugMode::Static, 8) };
int track9PolyNodes_2Outputs[] = { 20 };
InputNodeData track9PolyNodes_2 = { 15, 3, track9PolyNodes_2Inputs, 1, track9PolyNodes_2Outputs };
InputPlugData track9PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 23), InputPlugData(InputPlugMode::Static, 102), InputPlugData(InputPlugMode::Static, 8) };
int track9PolyNodes_3Outputs[] = { 21 };
InputNodeData track9PolyNodes_3 = { 15, 3, track9PolyNodes_3Inputs, 1, track9PolyNodes_3Outputs };
InputPlugData *track9PolyNodes_4Inputs = nullptr;
int track9PolyNodes_4Outputs[] = { 13 };
InputNodeData track9PolyNodes_4 = { 0, 0, track9PolyNodes_4Inputs, 1, track9PolyNodes_4Outputs };
InputPlugData track9PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Static, 103), InputPlugData(InputPlugMode::Static, 104), InputPlugData(InputPlugMode::Dynamic, 20) };
int track9PolyNodes_5Outputs[] = { 14 };
InputNodeData track9PolyNodes_5 = { 14, 3, track9PolyNodes_5Inputs, 1, track9PolyNodes_5Outputs };
InputPlugData *track9PolyNodes_6Inputs = nullptr;
int track9PolyNodes_6Outputs[] = { 18 };
InputNodeData track9PolyNodes_6 = { 0, 0, track9PolyNodes_6Inputs, 1, track9PolyNodes_6Outputs };
InputPlugData track9PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Static, 103), InputPlugData(InputPlugMode::Static, 104), InputPlugData(InputPlugMode::Dynamic, 21) };
int track9PolyNodes_7Outputs[] = { 19 };
InputNodeData track9PolyNodes_7 = { 14, 3, track9PolyNodes_7Inputs, 1, track9PolyNodes_7Outputs };
InputPlugData track9PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Static, 8) };
int track9PolyNodes_8Outputs[] = { 10, 8, 11, 12 };
InputNodeData track9PolyNodes_8 = { 12, 3, track9PolyNodes_8Inputs, 4, track9PolyNodes_8Outputs };
InputPlugData track9PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 8) };
int track9PolyNodes_9Outputs[] = { 15, 9, 16, 17 };
InputNodeData track9PolyNodes_9 = { 12, 3, track9PolyNodes_9Inputs, 4, track9PolyNodes_9Outputs };
InputPlugData track9PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 105) };
int track9PolyNodes_10Outputs[] = { 6 };
InputNodeData track9PolyNodes_10 = { 1, 2, track9PolyNodes_10Inputs, 1, track9PolyNodes_10Outputs };
InputPlugData track9PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Static, 106) };
int track9PolyNodes_11Outputs[] = { 7 };
InputNodeData track9PolyNodes_11 = { 1, 2, track9PolyNodes_11Inputs, 1, track9PolyNodes_11Outputs };
InputPlugData track9PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Parameter, 0) };
int track9PolyNodes_12Outputs[] = { 4 };
InputNodeData track9PolyNodes_12 = { 1, 2, track9PolyNodes_12Inputs, 1, track9PolyNodes_12Outputs };
InputPlugData track9PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 7) };
int track9PolyNodes_13Outputs[] = { 5 };
InputNodeData track9PolyNodes_13 = { 1, 2, track9PolyNodes_13Inputs, 1, track9PolyNodes_13Outputs };
InputNodeData track9PolyNodes[] = { track9PolyNodes_0, track9PolyNodes_1, track9PolyNodes_2, track9PolyNodes_3, track9PolyNodes_4, track9PolyNodes_5, track9PolyNodes_6, track9PolyNodes_7, track9PolyNodes_8, track9PolyNodes_9, track9PolyNodes_10, track9PolyNodes_11, track9PolyNodes_12, track9PolyNodes_13,  };
InputPlugData track9PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5) };
int track9PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track9Poly = { 14, track9PolyNodes, 3, track9PolyNodesInputs, 4, track9PolyNodesOutputs, 24 };
InputNodeData *track9FxNodes = nullptr;
InputPlugData track9FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track9FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track9Fx = { 0, track9FxNodes, 2, track9FxNodesInputs, 2, track9FxNodesOutputs, 2 };
InputParameterData track9Param0 = { 6, automationDeltaTimes + 53, automationValues + 53 };
InputParameterData track9Params[] = { track9Param0,  };
InputTrackData track9 = {
    255,
    16, track9Poly, track9Fx,
    1, track9Params,
    1, noteDeltaTimes + 6518, noteDurations + 6518, notes + 6518, noteVelocities + 6518, notePans + 6518,
};
InputPlugData track10PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track10PolyNodes_0Outputs[] = { 41 };
InputNodeData track10PolyNodes_0 = { 5, 1, track10PolyNodes_0Inputs, 1, track10PolyNodes_0Outputs };
InputPlugData track10PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 41), InputPlugData(InputPlugMode::Static, 4) };
int track10PolyNodes_1Outputs[] = { 37 };
InputNodeData track10PolyNodes_1 = { 8, 2, track10PolyNodes_1Inputs, 1, track10PolyNodes_1Outputs };
InputPlugData track10PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 107) };
int track10PolyNodes_2Outputs[] = { 38 };
InputNodeData track10PolyNodes_2 = { 1, 2, track10PolyNodes_2Inputs, 1, track10PolyNodes_2Outputs };
InputPlugData track10PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Static, 108) };
int track10PolyNodes_3Outputs[] = { 42 };
InputNodeData track10PolyNodes_3 = { 1, 2, track10PolyNodes_3Inputs, 1, track10PolyNodes_3Outputs };
InputPlugData track10PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 9) };
int track10PolyNodes_4Outputs[] = { 40 };
InputNodeData track10PolyNodes_4 = { 1, 2, track10PolyNodes_4Inputs, 1, track10PolyNodes_4Outputs };
InputPlugData track10PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 0) };
int track10PolyNodes_5Outputs[] = { 36 };
InputNodeData track10PolyNodes_5 = { 8, 2, track10PolyNodes_5Inputs, 1, track10PolyNodes_5Outputs };
InputPlugData track10PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 40), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_6Outputs[] = { 35 };
InputNodeData track10PolyNodes_6 = { 6, 2, track10PolyNodes_6Inputs, 1, track10PolyNodes_6Outputs };
InputPlugData track10PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 38), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_7Outputs[] = { 31 };
InputNodeData track10PolyNodes_7 = { 11, 2, track10PolyNodes_7Inputs, 1, track10PolyNodes_7Outputs };
InputPlugData track10PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_8Outputs[] = { 30 };
InputNodeData track10PolyNodes_8 = { 9, 2, track10PolyNodes_8Inputs, 1, track10PolyNodes_8Outputs };
InputPlugData track10PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 42), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_9Outputs[] = { 39 };
InputNodeData track10PolyNodes_9 = { 6, 2, track10PolyNodes_9Inputs, 1, track10PolyNodes_9Outputs };
InputPlugData track10PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Static, 8), InputPlugData(InputPlugMode::Dynamic, 39) };
int track10PolyNodes_10Outputs[] = { 34 };
InputNodeData track10PolyNodes_10 = { 1, 2, track10PolyNodes_10Inputs, 1, track10PolyNodes_10Outputs };
InputPlugData track10PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 37), InputPlugData(InputPlugMode::Static, 9) };
int track10PolyNodes_11Outputs[] = { 32 };
InputNodeData track10PolyNodes_11 = { 8, 2, track10PolyNodes_11Inputs, 1, track10PolyNodes_11Outputs };
InputPlugData track10PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 36), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_12Outputs[] = { 29 };
InputNodeData track10PolyNodes_12 = { 6, 2, track10PolyNodes_12Inputs, 1, track10PolyNodes_12Outputs };
InputPlugData track10PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 35), InputPlugData(InputPlugMode::Static, 8) };
int track10PolyNodes_13Outputs[] = { 28 };
InputNodeData track10PolyNodes_13 = { 1, 2, track10PolyNodes_13Inputs, 1, track10PolyNodes_13Outputs };
InputPlugData track10PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 30), InputPlugData(InputPlugMode::Dynamic, 31) };
int track10PolyNodes_14Outputs[] = { 22 };
InputNodeData track10PolyNodes_14 = { 3, 2, track10PolyNodes_14Inputs, 1, track10PolyNodes_14Outputs };
InputPlugData *track10PolyNodes_15Inputs = nullptr;
int track10PolyNodes_15Outputs[] = { 33 };
InputNodeData track10PolyNodes_15 = { 0, 0, track10PolyNodes_15Inputs, 1, track10PolyNodes_15Outputs };
InputPlugData track10PolyNodes_16Inputs[] = { InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track10PolyNodes_16Outputs[] = { 26 };
InputNodeData track10PolyNodes_16 = { 4, 2, track10PolyNodes_16Inputs, 1, track10PolyNodes_16Outputs };
InputPlugData track10PolyNodes_17Inputs[] = { InputPlugData(InputPlugMode::Static, 8), InputPlugData(InputPlugMode::Dynamic, 34) };
int track10PolyNodes_17Outputs[] = { 27 };
InputNodeData track10PolyNodes_17 = { 3, 2, track10PolyNodes_17Inputs, 1, track10PolyNodes_17Outputs };
InputPlugData track10PolyNodes_18Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 109), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 110) };
int track10PolyNodes_18Outputs[] = { 25 };
InputNodeData track10PolyNodes_18 = { 10, 5, track10PolyNodes_18Inputs, 1, track10PolyNodes_18Outputs };
InputPlugData track10PolyNodes_19Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 32), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_19Outputs[] = { 23 };
InputNodeData track10PolyNodes_19 = { 11, 2, track10PolyNodes_19Inputs, 1, track10PolyNodes_19Outputs };
InputPlugData track10PolyNodes_20Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 29), InputPlugData(InputPlugMode::Dynamic, 22) };
int track10PolyNodes_20Outputs[] = { 21 };
InputNodeData track10PolyNodes_20 = { 1, 2, track10PolyNodes_20Inputs, 1, track10PolyNodes_20Outputs };
InputPlugData track10PolyNodes_21Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 28), InputPlugData(InputPlugMode::Static, 8) };
int track10PolyNodes_21Outputs[] = { 20 };
InputNodeData track10PolyNodes_21 = { 3, 2, track10PolyNodes_21Inputs, 1, track10PolyNodes_21Outputs };
InputPlugData track10PolyNodes_22Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 33), InputPlugData(InputPlugMode::Static, 111), InputPlugData(InputPlugMode::Static, 8) };
int track10PolyNodes_22Outputs[] = { 24 };
InputNodeData track10PolyNodes_22 = { 15, 3, track10PolyNodes_22Inputs, 1, track10PolyNodes_22Outputs };
InputPlugData track10PolyNodes_23Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 26), InputPlugData(InputPlugMode::Dynamic, 27) };
int track10PolyNodes_23Outputs[] = { 19 };
InputNodeData track10PolyNodes_23 = { 1, 2, track10PolyNodes_23Inputs, 1, track10PolyNodes_23Outputs };
InputPlugData track10PolyNodes_24Inputs[] = { InputPlugData(InputPlugMode::Static, 112), InputPlugData(InputPlugMode::Static, 113), InputPlugData(InputPlugMode::Dynamic, 25) };
int track10PolyNodes_24Outputs[] = { 18 };
InputNodeData track10PolyNodes_24 = { 14, 3, track10PolyNodes_24Inputs, 1, track10PolyNodes_24Outputs };
InputPlugData track10PolyNodes_25Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 24), InputPlugData(InputPlugMode::Static, 114) };
int track10PolyNodes_25Outputs[] = { 17 };
InputNodeData track10PolyNodes_25 = { 1, 2, track10PolyNodes_25Inputs, 1, track10PolyNodes_25Outputs };
InputPlugData track10PolyNodes_26Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 23), InputPlugData(InputPlugMode::Static, 115) };
int track10PolyNodes_26Outputs[] = { 16 };
InputNodeData track10PolyNodes_26 = { 1, 2, track10PolyNodes_26Inputs, 1, track10PolyNodes_26Outputs };
InputPlugData track10PolyNodes_27Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 21), InputPlugData(InputPlugMode::Dynamic, 22), InputPlugData(InputPlugMode::Dynamic, 20) };
int track10PolyNodes_27Outputs[] = { 15 };
InputNodeData track10PolyNodes_27 = { 14, 3, track10PolyNodes_27Inputs, 1, track10PolyNodes_27Outputs };
InputPlugData track10PolyNodes_28Inputs[] = { InputPlugData(InputPlugMode::Static, 116), InputPlugData(InputPlugMode::Static, 117), InputPlugData(InputPlugMode::Dynamic, 20) };
int track10PolyNodes_28Outputs[] = { 14 };
InputNodeData track10PolyNodes_28 = { 14, 3, track10PolyNodes_28Inputs, 1, track10PolyNodes_28Outputs };
InputPlugData track10PolyNodes_29Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Static, 118), InputPlugData(InputPlugMode::Dynamic, 19) };
int track10PolyNodes_29Outputs[] = { 13 };
InputNodeData track10PolyNodes_29 = { 14, 3, track10PolyNodes_29Inputs, 1, track10PolyNodes_29Outputs };
InputPlugData track10PolyNodes_30Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Dynamic, 16), InputPlugData(InputPlugMode::Dynamic, 17), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_30Outputs[] = { 12 };
InputNodeData track10PolyNodes_30 = { 7, 4, track10PolyNodes_30Inputs, 1, track10PolyNodes_30Outputs };
InputPlugData track10PolyNodes_31Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Dynamic, 14) };
int track10PolyNodes_31Outputs[] = { 9, 8, 10, 11 };
InputNodeData track10PolyNodes_31 = { 12, 3, track10PolyNodes_31Inputs, 4, track10PolyNodes_31Outputs };
InputPlugData track10PolyNodes_32Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 119), InputPlugData(InputPlugMode::Static, 120), InputPlugData(InputPlugMode::Static, 121) };
int track10PolyNodes_32Outputs[] = { 4 };
InputNodeData track10PolyNodes_32 = { 10, 5, track10PolyNodes_32Inputs, 1, track10PolyNodes_32Outputs };
InputPlugData track10PolyNodes_33Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 8) };
int track10PolyNodes_33Outputs[] = { 7 };
InputNodeData track10PolyNodes_33 = { 1, 2, track10PolyNodes_33Inputs, 1, track10PolyNodes_33Outputs };
InputPlugData track10PolyNodes_34Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 2) };
int track10PolyNodes_34Outputs[] = { 5, 6 };
InputNodeData track10PolyNodes_34 = { 13, 2, track10PolyNodes_34Inputs, 2, track10PolyNodes_34Outputs };
InputNodeData track10PolyNodes[] = { track10PolyNodes_0, track10PolyNodes_1, track10PolyNodes_2, track10PolyNodes_3, track10PolyNodes_4, track10PolyNodes_5, track10PolyNodes_6, track10PolyNodes_7, track10PolyNodes_8, track10PolyNodes_9, track10PolyNodes_10, track10PolyNodes_11, track10PolyNodes_12, track10PolyNodes_13, track10PolyNodes_14, track10PolyNodes_15, track10PolyNodes_16, track10PolyNodes_17, track10PolyNodes_18, track10PolyNodes_19, track10PolyNodes_20, track10PolyNodes_21, track10PolyNodes_22, track10PolyNodes_23, track10PolyNodes_24, track10PolyNodes_25, track10PolyNodes_26, track10PolyNodes_27, track10PolyNodes_28, track10PolyNodes_29, track10PolyNodes_30, track10PolyNodes_31, track10PolyNodes_32, track10PolyNodes_33, track10PolyNodes_34,  };
InputPlugData track10PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 6) };
int track10PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track10Poly = { 35, track10PolyNodes, 3, track10PolyNodesInputs, 4, track10PolyNodesOutputs, 43 };
InputNodeData *track10FxNodes = nullptr;
InputPlugData track10FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track10FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track10Fx = { 0, track10FxNodes, 2, track10FxNodesInputs, 2, track10FxNodesOutputs, 2 };
InputParameterData track10Param0 = { 5, automationDeltaTimes + 59, automationValues + 59 };
InputParameterData track10Params[] = { track10Param0,  };
InputTrackData track10 = {
    255,
    16, track10Poly, track10Fx,
    1, track10Params,
    1, noteDeltaTimes + 6519, noteDurations + 6519, notes + 6519, noteVelocities + 6519, notePans + 6519,
};
InputPlugData track11PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1) };
int track11PolyNodes_0Outputs[] = { 20 };
InputNodeData track11PolyNodes_0 = { 5, 1, track11PolyNodes_0Inputs, 1, track11PolyNodes_0Outputs };
InputPlugData track11PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Static, 0) };
int track11PolyNodes_1Outputs[] = { 21 };
InputNodeData track11PolyNodes_1 = { 8, 2, track11PolyNodes_1Inputs, 1, track11PolyNodes_1Outputs };
InputPlugData track11PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 21), InputPlugData(InputPlugMode::Static, 2) };
int track11PolyNodes_2Outputs[] = { 19 };
InputNodeData track11PolyNodes_2 = { 9, 2, track11PolyNodes_2Inputs, 1, track11PolyNodes_2Outputs };
InputPlugData track11PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 21), InputPlugData(InputPlugMode::Static, 2) };
int track11PolyNodes_3Outputs[] = { 18 };
InputNodeData track11PolyNodes_3 = { 6, 2, track11PolyNodes_3Inputs, 1, track11PolyNodes_3Outputs };
InputPlugData track11PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 20), InputPlugData(InputPlugMode::Static, 2) };
int track11PolyNodes_4Outputs[] = { 17 };
InputNodeData track11PolyNodes_4 = { 9, 2, track11PolyNodes_4Inputs, 1, track11PolyNodes_4Outputs };
InputPlugData track11PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 19), InputPlugData(InputPlugMode::Static, 4) };
int track11PolyNodes_5Outputs[] = { 16 };
InputNodeData track11PolyNodes_5 = { 1, 2, track11PolyNodes_5Inputs, 1, track11PolyNodes_5Outputs };
InputPlugData track11PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 18), InputPlugData(InputPlugMode::Static, 4) };
int track11PolyNodes_6Outputs[] = { 15 };
InputNodeData track11PolyNodes_6 = { 1, 2, track11PolyNodes_6Inputs, 1, track11PolyNodes_6Outputs };
InputPlugData track11PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Dynamic, 17) };
int track11PolyNodes_7Outputs[] = { 14 };
InputNodeData track11PolyNodes_7 = { 3, 2, track11PolyNodes_7Inputs, 1, track11PolyNodes_7Outputs };
InputPlugData track11PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 15), InputPlugData(InputPlugMode::Dynamic, 16) };
int track11PolyNodes_8Outputs[] = { 13 };
InputNodeData track11PolyNodes_8 = { 3, 2, track11PolyNodes_8Inputs, 1, track11PolyNodes_8Outputs };
InputPlugData track11PolyNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 14), InputPlugData(InputPlugMode::Static, 122), InputPlugData(InputPlugMode::Static, 123) };
int track11PolyNodes_9Outputs[] = { 12 };
InputNodeData track11PolyNodes_9 = { 15, 3, track11PolyNodes_9Inputs, 1, track11PolyNodes_9Outputs };
InputPlugData track11PolyNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 122), InputPlugData(InputPlugMode::Static, 123) };
int track11PolyNodes_10Outputs[] = { 11 };
InputNodeData track11PolyNodes_10 = { 15, 3, track11PolyNodes_10Inputs, 1, track11PolyNodes_10Outputs };
InputPlugData track11PolyNodes_11Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 124), InputPlugData(InputPlugMode::Static, 125), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 126) };
int track11PolyNodes_11Outputs[] = { 4 };
InputNodeData track11PolyNodes_11 = { 10, 5, track11PolyNodes_11Inputs, 1, track11PolyNodes_11Outputs };
InputPlugData track11PolyNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 12) };
int track11PolyNodes_12Outputs[] = { 10 };
InputNodeData track11PolyNodes_12 = { 1, 2, track11PolyNodes_12Inputs, 1, track11PolyNodes_12Outputs };
InputPlugData track11PolyNodes_13Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 11) };
int track11PolyNodes_13Outputs[] = { 9 };
InputNodeData track11PolyNodes_13 = { 1, 2, track11PolyNodes_13Inputs, 1, track11PolyNodes_13Outputs };
InputPlugData track11PolyNodes_14Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Dynamic, 3) };
int track11PolyNodes_14Outputs[] = { 8 };
InputNodeData track11PolyNodes_14 = { 1, 2, track11PolyNodes_14Inputs, 1, track11PolyNodes_14Outputs };
InputPlugData track11PolyNodes_15Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 3) };
int track11PolyNodes_15Outputs[] = { 7 };
InputNodeData track11PolyNodes_15 = { 1, 2, track11PolyNodes_15Inputs, 1, track11PolyNodes_15Outputs };
InputPlugData track11PolyNodes_16Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 8) };
int track11PolyNodes_16Outputs[] = { 6 };
InputNodeData track11PolyNodes_16 = { 1, 2, track11PolyNodes_16Inputs, 1, track11PolyNodes_16Outputs };
InputPlugData track11PolyNodes_17Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Static, 8) };
int track11PolyNodes_17Outputs[] = { 5 };
InputNodeData track11PolyNodes_17 = { 1, 2, track11PolyNodes_17Inputs, 1, track11PolyNodes_17Outputs };
InputNodeData track11PolyNodes[] = { track11PolyNodes_0, track11PolyNodes_1, track11PolyNodes_2, track11PolyNodes_3, track11PolyNodes_4, track11PolyNodes_5, track11PolyNodes_6, track11PolyNodes_7, track11PolyNodes_8, track11PolyNodes_9, track11PolyNodes_10, track11PolyNodes_11, track11PolyNodes_12, track11PolyNodes_13, track11PolyNodes_14, track11PolyNodes_15, track11PolyNodes_16, track11PolyNodes_17,  };
InputPlugData track11PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 6) };
int track11PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track11Poly = { 18, track11PolyNodes, 3, track11PolyNodesInputs, 4, track11PolyNodesOutputs, 22 };
InputPlugData track11FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Parameter, 0) };
int track11FxNodes_0Outputs[] = { 2 };
InputNodeData track11FxNodes_0 = { 1, 2, track11FxNodes_0Inputs, 1, track11FxNodes_0Outputs };
InputPlugData track11FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 1) };
int track11FxNodes_1Outputs[] = { 3 };
InputNodeData track11FxNodes_1 = { 1, 2, track11FxNodes_1Inputs, 1, track11FxNodes_1Outputs };
InputNodeData track11FxNodes[] = { track11FxNodes_0, track11FxNodes_1,  };
InputPlugData track11FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track11FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track11Fx = { 2, track11FxNodes, 2, track11FxNodesInputs, 2, track11FxNodesOutputs, 4 };
InputParameterData track11Param0 = { 4, automationDeltaTimes + 64, automationValues + 64 };
InputParameterData track11Params[] = { track11Param0,  };
InputTrackData track11 = {
    255,
    16, track11Poly, track11Fx,
    1, track11Params,
    243, noteDeltaTimes + 6520, noteDurations + 6520, notes + 6520, noteVelocities + 6520, notePans + 6520,
};
InputPlugData track12PolyNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 11), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track12PolyNodes_0Outputs[] = { 12 };
InputNodeData track12PolyNodes_0 = { 10, 5, track12PolyNodes_0Inputs, 1, track12PolyNodes_0Outputs };
InputPlugData track12PolyNodes_1Inputs[] = { InputPlugData(InputPlugMode::Static, 127), InputPlugData(InputPlugMode::Static, 128), InputPlugData(InputPlugMode::Dynamic, 12) };
int track12PolyNodes_1Outputs[] = { 10 };
InputNodeData track12PolyNodes_1 = { 14, 3, track12PolyNodes_1Inputs, 1, track12PolyNodes_1Outputs };
InputPlugData track12PolyNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 11), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 2) };
int track12PolyNodes_2Outputs[] = { 11 };
InputNodeData track12PolyNodes_2 = { 10, 5, track12PolyNodes_2Inputs, 1, track12PolyNodes_2Outputs };
InputPlugData track12PolyNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 2) };
int track12PolyNodes_3Outputs[] = { 8 };
InputNodeData track12PolyNodes_3 = { 6, 2, track12PolyNodes_3Inputs, 1, track12PolyNodes_3Outputs };
InputPlugData track12PolyNodes_4Inputs[] = { InputPlugData(InputPlugMode::Static, 129), InputPlugData(InputPlugMode::Static, 130), InputPlugData(InputPlugMode::Dynamic, 11) };
int track12PolyNodes_4Outputs[] = { 9 };
InputNodeData track12PolyNodes_4 = { 14, 3, track12PolyNodes_4Inputs, 1, track12PolyNodes_4Outputs };
InputPlugData track12PolyNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 9), InputPlugData(InputPlugMode::Dynamic, 8) };
int track12PolyNodes_5Outputs[] = { 7 };
InputNodeData track12PolyNodes_5 = { 11, 2, track12PolyNodes_5Inputs, 1, track12PolyNodes_5Outputs };
InputPlugData track12PolyNodes_6Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Static, 131), InputPlugData(InputPlugMode::Static, 2), InputPlugData(InputPlugMode::Static, 4), InputPlugData(InputPlugMode::Static, 132) };
int track12PolyNodes_6Outputs[] = { 4 };
InputNodeData track12PolyNodes_6 = { 10, 5, track12PolyNodes_6Inputs, 1, track12PolyNodes_6Outputs };
InputPlugData track12PolyNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 7), InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 133) };
int track12PolyNodes_7Outputs[] = { 6 };
InputNodeData track12PolyNodes_7 = { 14, 3, track12PolyNodes_7Inputs, 1, track12PolyNodes_7Outputs };
InputPlugData track12PolyNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 6) };
int track12PolyNodes_8Outputs[] = { 5 };
InputNodeData track12PolyNodes_8 = { 1, 2, track12PolyNodes_8Inputs, 1, track12PolyNodes_8Outputs };
InputNodeData track12PolyNodes[] = { track12PolyNodes_0, track12PolyNodes_1, track12PolyNodes_2, track12PolyNodes_3, track12PolyNodes_4, track12PolyNodes_5, track12PolyNodes_6, track12PolyNodes_7, track12PolyNodes_8,  };
InputPlugData track12PolyNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Dynamic, 5), InputPlugData(InputPlugMode::Dynamic, 5) };
int track12PolyNodesOutputs[] = { 0, 1, 2, 3 };
InputInstrumentData track12Poly = { 9, track12PolyNodes, 3, track12PolyNodesInputs, 4, track12PolyNodesOutputs, 13 };
InputPlugData track12FxNodes_0Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 10), InputPlugData(InputPlugMode::Static, 58) };
int track12FxNodes_0Outputs[] = { 8 };
InputNodeData track12FxNodes_0 = { 1, 2, track12FxNodes_0Inputs, 1, track12FxNodes_0Outputs };
InputPlugData track12FxNodes_1Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Static, 59), InputPlugData(InputPlugMode::Static, 59) };
int track12FxNodes_1Outputs[] = { 14 };
InputNodeData track12FxNodes_1 = { 16, 3, track12FxNodes_1Inputs, 1, track12FxNodes_1Outputs };
InputPlugData track12FxNodes_2Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Dynamic, 14) };
int track12FxNodes_2Outputs[] = { 13 };
InputNodeData track12FxNodes_2 = { 3, 2, track12FxNodes_2Inputs, 1, track12FxNodes_2Outputs };
InputPlugData track12FxNodes_3Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 13), InputPlugData(InputPlugMode::Static, 134), InputPlugData(InputPlugMode::Static, 134) };
int track12FxNodes_3Outputs[] = { 11 };
InputNodeData track12FxNodes_3 = { 16, 3, track12FxNodes_3Inputs, 1, track12FxNodes_3Outputs };
InputPlugData track12FxNodes_4Inputs[] = { InputPlugData(InputPlugMode::Static, 58), InputPlugData(InputPlugMode::Dynamic, 11) };
int track12FxNodes_4Outputs[] = { 9 };
InputNodeData track12FxNodes_4 = { 1, 2, track12FxNodes_4Inputs, 1, track12FxNodes_4Outputs };
InputPlugData track12FxNodes_5Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 8), InputPlugData(InputPlugMode::Static, 61) };
int track12FxNodes_5Outputs[] = { 6 };
InputNodeData track12FxNodes_5 = { 1, 2, track12FxNodes_5Inputs, 1, track12FxNodes_5Outputs };
InputPlugData track12FxNodes_6Inputs[] = { InputPlugData(InputPlugMode::Static, 61), InputPlugData(InputPlugMode::Dynamic, 9) };
int track12FxNodes_6Outputs[] = { 7 };
InputNodeData track12FxNodes_6 = { 1, 2, track12FxNodes_6Inputs, 1, track12FxNodes_6Outputs };
InputPlugData track12FxNodes_7Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 6), InputPlugData(InputPlugMode::Dynamic, 0) };
int track12FxNodes_7Outputs[] = { 4 };
InputNodeData track12FxNodes_7 = { 3, 2, track12FxNodes_7Inputs, 1, track12FxNodes_7Outputs };
InputPlugData track12FxNodes_8Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 1), InputPlugData(InputPlugMode::Dynamic, 7) };
int track12FxNodes_8Outputs[] = { 5 };
InputNodeData track12FxNodes_8 = { 3, 2, track12FxNodes_8Inputs, 1, track12FxNodes_8Outputs };
InputPlugData track12FxNodes_9Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 0), InputPlugData(InputPlugMode::Dynamic, 9) };
int track12FxNodes_9Outputs[] = { 12 };
InputNodeData track12FxNodes_9 = { 3, 2, track12FxNodes_9Inputs, 1, track12FxNodes_9Outputs };
InputPlugData track12FxNodes_10Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 4), InputPlugData(InputPlugMode::Parameter, 0) };
int track12FxNodes_10Outputs[] = { 2 };
InputNodeData track12FxNodes_10 = { 1, 2, track12FxNodes_10Inputs, 1, track12FxNodes_10Outputs };
InputPlugData track12FxNodes_11Inputs[] = { InputPlugData(InputPlugMode::Parameter, 0), InputPlugData(InputPlugMode::Dynamic, 5) };
int track12FxNodes_11Outputs[] = { 3 };
InputNodeData track12FxNodes_11 = { 1, 2, track12FxNodes_11Inputs, 1, track12FxNodes_11Outputs };
InputPlugData track12FxNodes_12Inputs[] = { InputPlugData(InputPlugMode::Dynamic, 12), InputPlugData(InputPlugMode::Static, 134), InputPlugData(InputPlugMode::Static, 134) };
int track12FxNodes_12Outputs[] = { 10 };
InputNodeData track12FxNodes_12 = { 16, 3, track12FxNodes_12Inputs, 1, track12FxNodes_12Outputs };
InputNodeData track12FxNodes[] = { track12FxNodes_0, track12FxNodes_1, track12FxNodes_2, track12FxNodes_3, track12FxNodes_4, track12FxNodes_5, track12FxNodes_6, track12FxNodes_7, track12FxNodes_8, track12FxNodes_9, track12FxNodes_10, track12FxNodes_11, track12FxNodes_12,  };
InputPlugData track12FxNodesInputs[] = { InputPlugData(InputPlugMode::Dynamic, 2), InputPlugData(InputPlugMode::Dynamic, 3) };
int track12FxNodesOutputs[] = { 0, 1 };
InputInstrumentData track12Fx = { 13, track12FxNodes, 2, track12FxNodesInputs, 2, track12FxNodesOutputs, 15 };
InputParameterData track12Param0 = { 2, automationDeltaTimes + 68, automationValues + 68 };
InputParameterData track12Params[] = { track12Param0,  };
InputTrackData track12 = {
    255,
    16, track12Poly, track12Fx,
    1, track12Params,
    2, noteDeltaTimes + 6763, noteDurations + 6763, notes + 6763, noteVelocities + 6763, notePans + 6763,
};
const int trackCount = 13;
const InputTrackData tracks[] = { track0, track1, track2, track3, track4, track5, track6, track7, track8, track9, track10, track11, track12,  };

